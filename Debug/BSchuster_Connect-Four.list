
BSchuster_Connect-Four.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077c4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012f4  08007974  08007974  00008974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c68  08008c68  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  08008c68  08008c68  00009c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c70  08008c70  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c70  08008c70  00009c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c74  08008c74  00009c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008c78  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a070  2**0
                  CONTENTS
 10 .bss          00025ce0  20000070  20000070  0000a070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025d50  20025d50  0000a070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000149e3  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035f1  00000000  00000000  0001ea83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  00022078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd1  00000000  00000000  00023508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027704  00000000  00000000  000244d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a4cd  00000000  00000000  0004bbdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2d2b  00000000  00000000  000660aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00148dd5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a80  00000000  00000000  00148e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0014e898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800795c 	.word	0x0800795c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800795c 	.word	0x0800795c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS


void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000586:	f003 f863 	bl	8003650 <initialise_monitor_handles>
    LTCD__Init();
 800058a:	f000 f969 	bl	8000860 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058e:	2000      	movs	r0, #0
 8000590:	f000 f926 	bl	80007e0 <LTCD_Layer_Init>
    LCD_SetFont(&Font16x24);
 8000594:	480e      	ldr	r0, [pc, #56]	@ (80005d0 <ApplicationInit+0x50>)
 8000596:	f000 fa87 	bl	8000aa8 <LCD_SetFont>
    LCD_Clear(0,LCD_COLOR_BLACK);
 800059a:	2100      	movs	r1, #0
 800059c:	2000      	movs	r0, #0
 800059e:	f000 fa51 	bl	8000a44 <LCD_Clear>
	InitializeLCDTouch();    
 80005a2:	f000 fb57 	bl	8000c54 <InitializeLCDTouch>
    __HAL_RCC_RNG_CLK_ENABLE();  // Enable the RNG peripheral clock
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <ApplicationInit+0x54>)
 80005ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ae:	4a09      	ldr	r2, [pc, #36]	@ (80005d4 <ApplicationInit+0x54>)
 80005b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005b4:	6353      	str	r3, [r2, #52]	@ 0x34
 80005b6:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <ApplicationInit+0x54>)
 80005b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
    Button_InitInterrupt(); // Button Interrupts
 80005c2:	f000 f809 	bl	80005d8 <Button_InitInterrupt>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000004 	.word	0x20000004
 80005d4:	40023800 	.word	0x40023800

080005d8 <Button_InitInterrupt>:
//	return (read_pin_input(BUTTON_PORT, BUTTON_PIN) == BUTTON_IS_PRESSED) ? 1 : 0;
    return (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
}

//Interrupt Based
void Button_InitInterrupt(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	4b18      	ldr	r3, [pc, #96]	@ (8000644 <Button_InitInterrupt+0x6c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a17      	ldr	r2, [pc, #92]	@ (8000644 <Button_InitInterrupt+0x6c>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <Button_InitInterrupt+0x6c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]
//    __HAL_RCC_SYSCFG_CLK_ENABLE(); // Needed to remap EXTI lines

    GPIO_InitTypeDef buttonConfig = {0};
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
    buttonConfig.Pin   = GPIO_PIN_0;
 8000608:	2301      	movs	r3, #1
 800060a:	607b      	str	r3, [r7, #4]
    buttonConfig.Mode  = GPIO_MODE_IT_RISING; // Generate an interrupt on rising/falling edge
 800060c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000610:	60bb      	str	r3, [r7, #8]
    buttonConfig.Pull  = GPIO_PULLDOWN;
 8000612:	2302      	movs	r3, #2
 8000614:	60fb      	str	r3, [r7, #12]
    buttonConfig.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &buttonConfig);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4619      	mov	r1, r3
 800061e:	480a      	ldr	r0, [pc, #40]	@ (8000648 <Button_InitInterrupt+0x70>)
 8000620:	f003 fa38 	bl	8003a94 <HAL_GPIO_Init>

    // Clear any pending interrupt (just in case something is set from before)
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8000624:	4b09      	ldr	r3, [pc, #36]	@ (800064c <Button_InitInterrupt+0x74>)
 8000626:	2201      	movs	r2, #1
 8000628:	615a      	str	r2, [r3, #20]

    HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0); // Priority 2, sub-priority 0. Not sure if they're the correct values tho
 800062a:	2200      	movs	r2, #0
 800062c:	2102      	movs	r1, #2
 800062e:	2006      	movs	r0, #6
 8000630:	f003 f9f9 	bl	8003a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000634:	2006      	movs	r0, #6
 8000636:	f003 fa12 	bl	8003a5e <HAL_NVIC_EnableIRQ>
}
 800063a:	bf00      	nop
 800063c:	3718      	adds	r7, #24
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40020000 	.word	0x40020000
 800064c:	40013c00 	.word	0x40013c00

08000650 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	@ 0x30
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
 800065a:	4b5a      	ldr	r3, [pc, #360]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800065e:	4a59      	ldr	r2, [pc, #356]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000660:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000664:	6453      	str	r3, [r2, #68]	@ 0x44
 8000666:	4b57      	ldr	r3, [pc, #348]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800066a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	4b53      	ldr	r3, [pc, #332]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a52      	ldr	r2, [pc, #328]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b50      	ldr	r3, [pc, #320]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	4b4c      	ldr	r3, [pc, #304]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a4b      	ldr	r2, [pc, #300]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b49      	ldr	r3, [pc, #292]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	4b45      	ldr	r3, [pc, #276]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a44      	ldr	r2, [pc, #272]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b42      	ldr	r3, [pc, #264]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b3e      	ldr	r3, [pc, #248]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a3d      	ldr	r2, [pc, #244]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006d0:	f043 0308 	orr.w	r3, r3, #8
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b3b      	ldr	r3, [pc, #236]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b37      	ldr	r3, [pc, #220]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a36      	ldr	r2, [pc, #216]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006ec:	f043 0320 	orr.w	r3, r3, #32
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b34      	ldr	r3, [pc, #208]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0320 	and.w	r3, r3, #32
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b30      	ldr	r3, [pc, #192]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a2f      	ldr	r2, [pc, #188]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b2d      	ldr	r3, [pc, #180]	@ (80007c4 <LCD_GPIO_Init+0x174>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800071a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800071e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000728:	2302      	movs	r3, #2
 800072a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800072c:	230e      	movs	r3, #14
 800072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	4824      	ldr	r0, [pc, #144]	@ (80007c8 <LCD_GPIO_Init+0x178>)
 8000738:	f003 f9ac 	bl	8003a94 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800073c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000740:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4820      	ldr	r0, [pc, #128]	@ (80007cc <LCD_GPIO_Init+0x17c>)
 800074a:	f003 f9a3 	bl	8003a94 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800074e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	481d      	ldr	r0, [pc, #116]	@ (80007d0 <LCD_GPIO_Init+0x180>)
 800075c:	f003 f99a 	bl	8003a94 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000760:	2348      	movs	r3, #72	@ 0x48
 8000762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	481a      	ldr	r0, [pc, #104]	@ (80007d4 <LCD_GPIO_Init+0x184>)
 800076c:	f003 f992 	bl	8003a94 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000770:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	4619      	mov	r1, r3
 800077c:	4816      	ldr	r0, [pc, #88]	@ (80007d8 <LCD_GPIO_Init+0x188>)
 800077e:	f003 f989 	bl	8003a94 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000782:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000786:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	4813      	ldr	r0, [pc, #76]	@ (80007dc <LCD_GPIO_Init+0x18c>)
 8000790:	f003 f980 	bl	8003a94 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000794:	2303      	movs	r3, #3
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000798:	2309      	movs	r3, #9
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	480a      	ldr	r0, [pc, #40]	@ (80007cc <LCD_GPIO_Init+0x17c>)
 80007a4:	f003 f976 	bl	8003a94 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80007a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	4809      	ldr	r0, [pc, #36]	@ (80007dc <LCD_GPIO_Init+0x18c>)
 80007b6:	f003 f96d 	bl	8003a94 <HAL_GPIO_Init>
}
 80007ba:	bf00      	nop
 80007bc:	3730      	adds	r7, #48	@ 0x30
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020000 	.word	0x40020000
 80007cc:	40020400 	.word	0x40020400
 80007d0:	40020800 	.word	0x40020800
 80007d4:	40020c00 	.word	0x40020c00
 80007d8:	40021400 	.word	0x40021400
 80007dc:	40021800 	.word	0x40021800

080007e0 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b090      	sub	sp, #64	@ 0x40
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80007ee:	23f0      	movs	r3, #240	@ 0xf0
 80007f0:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80007f6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80007fa:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80007fc:	2302      	movs	r3, #2
 80007fe:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000800:	23ff      	movs	r3, #255	@ 0xff
 8000802:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800080e:	2305      	movs	r3, #5
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <LTCD_Layer_Init+0x78>)
 800081a:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 800081c:	23f0      	movs	r3, #240	@ 0xf0
 800081e:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000820:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000824:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000838:	79fa      	ldrb	r2, [r7, #7]
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4619      	mov	r1, r3
 8000840:	4806      	ldr	r0, [pc, #24]	@ (800085c <LTCD_Layer_Init+0x7c>)
 8000842:	f004 fd99 	bl	8005378 <HAL_LTDC_ConfigLayer>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 800084c:	f000 f9fc 	bl	8000c48 <LCD_Error_Handler>
	}
}
 8000850:	bf00      	nop
 8000852:	3740      	adds	r7, #64	@ 0x40
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000168 	.word	0x20000168
 800085c:	2000008c 	.word	0x2000008c

08000860 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000864:	4b2a      	ldr	r3, [pc, #168]	@ (8000910 <LTCD__Init+0xb0>)
 8000866:	4a2b      	ldr	r2, [pc, #172]	@ (8000914 <LTCD__Init+0xb4>)
 8000868:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800086a:	4b29      	ldr	r3, [pc, #164]	@ (8000910 <LTCD__Init+0xb0>)
 800086c:	2209      	movs	r2, #9
 800086e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000870:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <LTCD__Init+0xb0>)
 8000872:	2201      	movs	r2, #1
 8000874:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000876:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <LTCD__Init+0xb0>)
 8000878:	221d      	movs	r2, #29
 800087a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 800087c:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <LTCD__Init+0xb0>)
 800087e:	2203      	movs	r2, #3
 8000880:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000882:	4b23      	ldr	r3, [pc, #140]	@ (8000910 <LTCD__Init+0xb0>)
 8000884:	f240 120d 	movw	r2, #269	@ 0x10d
 8000888:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800088a:	4b21      	ldr	r3, [pc, #132]	@ (8000910 <LTCD__Init+0xb0>)
 800088c:	f240 1243 	movw	r2, #323	@ 0x143
 8000890:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000892:	4b1f      	ldr	r3, [pc, #124]	@ (8000910 <LTCD__Init+0xb0>)
 8000894:	f240 1217 	movw	r2, #279	@ 0x117
 8000898:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800089a:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <LTCD__Init+0xb0>)
 800089c:	f240 1247 	movw	r2, #327	@ 0x147
 80008a0:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <LTCD__Init+0xb0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80008aa:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <LTCD__Init+0xb0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <LTCD__Init+0xb0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80008ba:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <LTCD__Init+0xb8>)
 80008bc:	2208      	movs	r2, #8
 80008be:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80008c0:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <LTCD__Init+0xb8>)
 80008c2:	22c0      	movs	r2, #192	@ 0xc0
 80008c4:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80008c6:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <LTCD__Init+0xb8>)
 80008c8:	2204      	movs	r2, #4
 80008ca:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <LTCD__Init+0xb8>)
 80008ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80008d4:	4810      	ldr	r0, [pc, #64]	@ (8000918 <LTCD__Init+0xb8>)
 80008d6:	f005 fba9 	bl	800602c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008da:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <LTCD__Init+0xb0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <LTCD__Init+0xb0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <LTCD__Init+0xb0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <LTCD__Init+0xb0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80008f2:	f7ff fead 	bl	8000650 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008f6:	4806      	ldr	r0, [pc, #24]	@ (8000910 <LTCD__Init+0xb0>)
 80008f8:	f004 fc6e 	bl	80051d8 <HAL_LTDC_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000902:	f000 f9a1 	bl	8000c48 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000906:	f000 fd5d 	bl	80013c4 <ili9341_Init>
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000008c 	.word	0x2000008c
 8000914:	40016800 	.word	0x40016800
 8000918:	20000134 	.word	0x20000134

0800091c <LCD_Draw_Pixel>:
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
// Regular draw pixel, with X flipped for landscape mirroring
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
 8000926:	460b      	mov	r3, r1
 8000928:	80bb      	strh	r3, [r7, #4]
 800092a:	4613      	mov	r3, r2
 800092c:	807b      	strh	r3, [r7, #2]
	// Draws a pixel mirrored horizontally (flipped across the vertical axis)
    if (x < LCD_PIXEL_WIDTH && y < LCD_PIXEL_HEIGHT) {
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	2bef      	cmp	r3, #239	@ 0xef
 8000932:	d811      	bhi.n	8000958 <LCD_Draw_Pixel+0x3c>
 8000934:	88bb      	ldrh	r3, [r7, #4]
 8000936:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800093a:	d20d      	bcs.n	8000958 <LCD_Draw_Pixel+0x3c>
        frameBuffer[y * LCD_PIXEL_WIDTH + (LCD_PIXEL_WIDTH - 1 - x)] = color;
 800093c:	88ba      	ldrh	r2, [r7, #4]
 800093e:	4613      	mov	r3, r2
 8000940:	011b      	lsls	r3, r3, #4
 8000942:	1a9b      	subs	r3, r3, r2
 8000944:	011b      	lsls	r3, r3, #4
 8000946:	461a      	mov	r2, r3
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800094e:	4413      	add	r3, r2
 8000950:	4904      	ldr	r1, [pc, #16]	@ (8000964 <LCD_Draw_Pixel+0x48>)
 8000952:	887a      	ldrh	r2, [r7, #2]
 8000954:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	20000168 	.word	0x20000168

08000968 <LCD_Draw_Pixel_Landscape>:

// Landscape = rotate 90 degrees
void LCD_Draw_Pixel_Landscape(uint16_t x, uint16_t y, uint16_t color)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
 8000972:	460b      	mov	r3, r1
 8000974:	80bb      	strh	r3, [r7, #4]
 8000976:	4613      	mov	r3, r2
 8000978:	807b      	strh	r3, [r7, #2]
    // Map (x, y) to rotated location in framebuffer
    // Original: x = col, y = row
    // Rotated: (x, y) → (y, WIDTH - 1 - x)
    if (x < LCD_PIXEL_HEIGHT && y < LCD_PIXEL_WIDTH) {
 800097a:	88fb      	ldrh	r3, [r7, #6]
 800097c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000980:	d208      	bcs.n	8000994 <LCD_Draw_Pixel_Landscape+0x2c>
 8000982:	88bb      	ldrh	r3, [r7, #4]
 8000984:	2bef      	cmp	r3, #239	@ 0xef
 8000986:	d805      	bhi.n	8000994 <LCD_Draw_Pixel_Landscape+0x2c>
        LCD_Draw_Pixel(y, x, color); // Uses the mirrored version from above
 8000988:	887a      	ldrh	r2, [r7, #2]
 800098a:	88f9      	ldrh	r1, [r7, #6]
 800098c:	88bb      	ldrh	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ffc4 	bl	800091c <LCD_Draw_Pixel>
    }
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4604      	mov	r4, r0
 80009a4:	4608      	mov	r0, r1
 80009a6:	4611      	mov	r1, r2
 80009a8:	461a      	mov	r2, r3
 80009aa:	4623      	mov	r3, r4
 80009ac:	80fb      	strh	r3, [r7, #6]
 80009ae:	4603      	mov	r3, r0
 80009b0:	80bb      	strh	r3, [r7, #4]
 80009b2:	460b      	mov	r3, r1
 80009b4:	807b      	strh	r3, [r7, #2]
 80009b6:	4613      	mov	r3, r2
 80009b8:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 80009ba:	887b      	ldrh	r3, [r7, #2]
 80009bc:	425b      	negs	r3, r3
 80009be:	b29b      	uxth	r3, r3
 80009c0:	81fb      	strh	r3, [r7, #14]
 80009c2:	e034      	b.n	8000a2e <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 80009c4:	887b      	ldrh	r3, [r7, #2]
 80009c6:	425b      	negs	r3, r3
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	81bb      	strh	r3, [r7, #12]
 80009cc:	e024      	b.n	8000a18 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 80009ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80009d2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009d6:	fb03 f202 	mul.w	r2, r3, r2
 80009da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009de:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80009e2:	fb01 f303 	mul.w	r3, r1, r3
 80009e6:	441a      	add	r2, r3
 80009e8:	887b      	ldrh	r3, [r7, #2]
 80009ea:	8879      	ldrh	r1, [r7, #2]
 80009ec:	fb01 f303 	mul.w	r3, r1, r3
 80009f0:	429a      	cmp	r2, r3
 80009f2:	dc0b      	bgt.n	8000a0c <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 80009f4:	89ba      	ldrh	r2, [r7, #12]
 80009f6:	88fb      	ldrh	r3, [r7, #6]
 80009f8:	4413      	add	r3, r2
 80009fa:	b298      	uxth	r0, r3
 80009fc:	89fa      	ldrh	r2, [r7, #14]
 80009fe:	88bb      	ldrh	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	883a      	ldrh	r2, [r7, #0]
 8000a06:	4619      	mov	r1, r3
 8000a08:	f7ff ff88 	bl	800091c <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000a0c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	3301      	adds	r3, #1
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	81bb      	strh	r3, [r7, #12]
 8000a18:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a1c:	887b      	ldrh	r3, [r7, #2]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	ddd5      	ble.n	80009ce <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000a22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	3301      	adds	r3, #1
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	81fb      	strh	r3, [r7, #14]
 8000a2e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a32:	887b      	ldrh	r3, [r7, #2]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	ddc5      	ble.n	80009c4 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd90      	pop	{r4, r7, pc}
	...

08000a44 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	460a      	mov	r2, r1
 8000a4e:	71fb      	strb	r3, [r7, #7]
 8000a50:	4613      	mov	r3, r2
 8000a52:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d10e      	bne.n	8000a78 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	e007      	b.n	8000a70 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000a60:	4908      	ldr	r1, [pc, #32]	@ (8000a84 <LCD_Clear+0x40>)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	88ba      	ldrh	r2, [r7, #4]
 8000a66:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000a76:	d3f3      	bcc.n	8000a60 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	20000168 	.word	0x20000168

08000a88 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000a92:	4a04      	ldr	r2, [pc, #16]	@ (8000aa4 <LCD_SetTextColor+0x1c>)
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	8013      	strh	r3, [r2, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	20000000 	.word	0x20000000

08000aa8 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000ab0:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <LCD_SetFont+0x1c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000164 	.word	0x20000164

08000ac8 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	603a      	str	r2, [r7, #0]
 8000ad2:	80fb      	strh	r3, [r7, #6]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	80bb      	strh	r3, [r7, #4]
    for (uint32_t row = 0; row < LCD_Currentfonts->Height; row++) {
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	e055      	b.n	8000b8a <LCD_Draw_Char+0xc2>
        for (uint32_t col = 0; col < LCD_Currentfonts->Width; col++) {
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	e048      	b.n	8000b76 <LCD_Draw_Char+0xae>

            uint8_t bitSet = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	73fb      	strb	r3, [r7, #15]
            if (LCD_Currentfonts->Width <= 12) {
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba4 <LCD_Draw_Char+0xdc>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	889b      	ldrh	r3, [r3, #4]
 8000aee:	2b0c      	cmp	r3, #12
 8000af0:	d81b      	bhi.n	8000b2a <LCD_Draw_Char+0x62>
                bitSet = (c[row] & ((0x80 << ((LCD_Currentfonts->Width / 12) * 8)) >> col)) != 0;
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	4413      	add	r3, r2
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	4b29      	ldr	r3, [pc, #164]	@ (8000ba4 <LCD_Draw_Char+0xdc>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	889b      	ldrh	r3, [r3, #4]
 8000b04:	4a28      	ldr	r2, [pc, #160]	@ (8000ba8 <LCD_Draw_Char+0xe0>)
 8000b06:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0a:	08db      	lsrs	r3, r3, #3
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	2280      	movs	r2, #128	@ 0x80
 8000b12:	409a      	lsls	r2, r3
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	fa42 f303 	asr.w	r3, r2, r3
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	bf14      	ite	ne
 8000b20:	2301      	movne	r3, #1
 8000b22:	2300      	moveq	r3, #0
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	73fb      	strb	r3, [r7, #15]
 8000b28:	e010      	b.n	8000b4c <LCD_Draw_Char+0x84>
            } else {
                bitSet = (c[row] & (1 << col)) != 0;
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	683a      	ldr	r2, [r7, #0]
 8000b30:	4413      	add	r3, r2
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	fa42 f303 	asr.w	r3, r2, r3
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	bf14      	ite	ne
 8000b44:	2301      	movne	r3, #1
 8000b46:	2300      	moveq	r3, #0
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	73fb      	strb	r3, [r7, #15]
            }

            if (bitSet) {
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00e      	beq.n	8000b70 <LCD_Draw_Char+0xa8>
                LCD_Draw_Pixel_Landscape(Xpos + col, Ypos + row, CurrentTextColor);
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	4413      	add	r3, r2
 8000b5a:	b298      	uxth	r0, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	b29a      	uxth	r2, r3
 8000b60:	88bb      	ldrh	r3, [r7, #4]
 8000b62:	4413      	add	r3, r2
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	4a11      	ldr	r2, [pc, #68]	@ (8000bac <LCD_Draw_Char+0xe4>)
 8000b68:	8812      	ldrh	r2, [r2, #0]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f7ff fefc 	bl	8000968 <LCD_Draw_Pixel_Landscape>
        for (uint32_t col = 0; col < LCD_Currentfonts->Width; col++) {
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	3301      	adds	r3, #1
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <LCD_Draw_Char+0xdc>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	889b      	ldrh	r3, [r3, #4]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d3af      	bcc.n	8000ae4 <LCD_Draw_Char+0x1c>
    for (uint32_t row = 0; row < LCD_Currentfonts->Height; row++) {
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	3301      	adds	r3, #1
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <LCD_Draw_Char+0xdc>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	88db      	ldrh	r3, [r3, #6]
 8000b90:	461a      	mov	r2, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d3a2      	bcc.n	8000ade <LCD_Draw_Char+0x16>
            }
        }
    }
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000164 	.word	0x20000164
 8000ba8:	aaaaaaab 	.word	0xaaaaaaab
 8000bac:	20000000 	.word	0x20000000

08000bb0 <LCD_DisplayString>:


void LCD_DisplayString(uint16_t x, uint16_t y, uint8_t *text, uint16_t mode) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60ba      	str	r2, [r7, #8]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4603      	mov	r3, r0
 8000bbc:	81fb      	strh	r3, [r7, #14]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	81bb      	strh	r3, [r7, #12]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	80fb      	strh	r3, [r7, #6]
  while (*text) {
 8000bc6:	e011      	b.n	8000bec <LCD_DisplayString+0x3c>
      LCD_DisplayChar(x, y, *text);
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	781a      	ldrb	r2, [r3, #0]
 8000bcc:	89b9      	ldrh	r1, [r7, #12]
 8000bce:	89fb      	ldrh	r3, [r7, #14]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 f817 	bl	8000c04 <LCD_DisplayChar>
      x += LCD_Currentfonts->Width - 1;
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <LCD_DisplayString+0x50>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	889a      	ldrh	r2, [r3, #4]
 8000bdc:	89fb      	ldrh	r3, [r7, #14]
 8000bde:	4413      	add	r3, r2
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	3b01      	subs	r3, #1
 8000be4:	81fb      	strh	r3, [r7, #14]
      text++;
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	3301      	adds	r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
  while (*text) {
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1e9      	bne.n	8000bc8 <LCD_DisplayString+0x18>
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000164 	.word	0x20000164

08000c04 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80fb      	strh	r3, [r7, #6]
 8000c0e:	460b      	mov	r3, r1
 8000c10:	80bb      	strh	r3, [r7, #4]
 8000c12:	4613      	mov	r3, r2
 8000c14:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000c16:	78fb      	ldrb	r3, [r7, #3]
 8000c18:	3b20      	subs	r3, #32
 8000c1a:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <LCD_DisplayChar+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	78fb      	ldrb	r3, [r7, #3]
 8000c24:	4907      	ldr	r1, [pc, #28]	@ (8000c44 <LCD_DisplayChar+0x40>)
 8000c26:	6809      	ldr	r1, [r1, #0]
 8000c28:	88c9      	ldrh	r1, [r1, #6]
 8000c2a:	fb01 f303 	mul.w	r3, r1, r3
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	441a      	add	r2, r3
 8000c32:	88b9      	ldrh	r1, [r7, #4]
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff46 	bl	8000ac8 <LCD_Draw_Char>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000164 	.word	0x20000164

08000c48 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <LCD_Error_Handler+0x8>

08000c54 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000c58:	f002 f9b2 	bl	8002fc0 <STMPE811_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d001      	beq.n	8000c66 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000c62:	bf00      	nop
 8000c64:	e7fd      	b.n	8000c62 <InitializeLCDTouch+0xe>
  }
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <HAL_GPIO_EXTI_Callback>:
volatile bool dropRequested = false; // Button Interrupt Flag

// Interrupt flag triggered by the button
// Sets a flag that the main game loop checks to drop a token
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d102      	bne.n	8000c82 <HAL_GPIO_EXTI_Callback+0x16>
    {
        dropRequested = true;
 8000c7c:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <HAL_GPIO_EXTI_Callback+0x24>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
    }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	2002599e 	.word	0x2002599e

08000c94 <Game_Init>:

void Game_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
    Start_Menu(); // Start_Menu is pretty much the main loop, but put inside here just in case I want to add more later
 8000c98:	f000 f80e 	bl	8000cb8 <Start_Menu>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <Restart_Game>:

void Restart_Game(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
    Start_Game(is1p); // Restart the game with the correct mode
 8000ca4:	4b03      	ldr	r3, [pc, #12]	@ (8000cb4 <Restart_Game+0x14>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f857 	bl	8000d5c <Start_Game>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20025968 	.word	0x20025968

08000cb8 <Start_Menu>:

void Start_Menu(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
    StartScreen(); // Draw the screen
 8000cbe:	f001 fa0b 	bl	80020d8 <StartScreen>
    while (1)
    {
        STMPE811_TouchData touch;
        touch.orientation = STMPE811_Orientation_Portrait_1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	72bb      	strb	r3, [r7, #10]
        STMPE811_State_t state = STMPE811_ReadTouch(&touch); // Grab current touch input and fill struct with .x/.y/.pressed
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f002 fa31 	bl	8003130 <STMPE811_ReadTouch>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	73fb      	strb	r3, [r7, #15]

        if (state == STMPE811_State_Pressed)
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d137      	bne.n	8000d48 <Start_Menu+0x90>
        {
            // Debug Mode
            if (TM_STMPE811_TouchInRectangle(&touch, 200, 280, 40, 40))
 8000cd8:	88bb      	ldrh	r3, [r7, #4]
 8000cda:	2bc7      	cmp	r3, #199	@ 0xc7
 8000cdc:	d90e      	bls.n	8000cfc <Start_Menu+0x44>
 8000cde:	88bb      	ldrh	r3, [r7, #4]
 8000ce0:	2bef      	cmp	r3, #239	@ 0xef
 8000ce2:	d80b      	bhi.n	8000cfc <Start_Menu+0x44>
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8000cea:	d307      	bcc.n	8000cfc <Start_Menu+0x44>
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000cf2:	d203      	bcs.n	8000cfc <Start_Menu+0x44>
            {
                Debug_Mode();
 8000cf4:	f001 fc2e 	bl	8002554 <Debug_Mode>
                StartScreen();
 8000cf8:	f001 f9ee 	bl	80020d8 <StartScreen>
            }
            // 1P-Mode
            if (TM_STMPE811_TouchInRectangle(&touch, 60, 90, 40, 140))
 8000cfc:	88bb      	ldrh	r3, [r7, #4]
 8000cfe:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d00:	d90f      	bls.n	8000d22 <Start_Menu+0x6a>
 8000d02:	88bb      	ldrh	r3, [r7, #4]
 8000d04:	2b63      	cmp	r3, #99	@ 0x63
 8000d06:	d80c      	bhi.n	8000d22 <Start_Menu+0x6a>
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	2b59      	cmp	r3, #89	@ 0x59
 8000d0c:	d909      	bls.n	8000d22 <Start_Menu+0x6a>
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	2be5      	cmp	r3, #229	@ 0xe5
 8000d12:	d806      	bhi.n	8000d22 <Start_Menu+0x6a>
            {
                is1p = true;
 8000d14:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <Start_Menu+0xa0>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
                Start_Game(true);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f000 f81e 	bl	8000d5c <Start_Game>
                return;
 8000d20:	e016      	b.n	8000d50 <Start_Menu+0x98>
            }
            // 2P-Mode
            if (TM_STMPE811_TouchInRectangle(&touch, 120, 90, 40, 140))
 8000d22:	88bb      	ldrh	r3, [r7, #4]
 8000d24:	2b77      	cmp	r3, #119	@ 0x77
 8000d26:	d90f      	bls.n	8000d48 <Start_Menu+0x90>
 8000d28:	88bb      	ldrh	r3, [r7, #4]
 8000d2a:	2b9f      	cmp	r3, #159	@ 0x9f
 8000d2c:	d80c      	bhi.n	8000d48 <Start_Menu+0x90>
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	2b59      	cmp	r3, #89	@ 0x59
 8000d32:	d909      	bls.n	8000d48 <Start_Menu+0x90>
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	2be5      	cmp	r3, #229	@ 0xe5
 8000d38:	d806      	bhi.n	8000d48 <Start_Menu+0x90>
            {
                is1p = false;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	@ (8000d58 <Start_Menu+0xa0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
                Start_Game(false);
 8000d40:	2000      	movs	r0, #0
 8000d42:	f000 f80b 	bl	8000d5c <Start_Game>
                return;
 8000d46:	e003      	b.n	8000d50 <Start_Menu+0x98>
            }
        }

        HAL_Delay(100);
 8000d48:	2064      	movs	r0, #100	@ 0x64
 8000d4a:	f002 fd6d 	bl	8003828 <HAL_Delay>
    {
 8000d4e:	e7b8      	b.n	8000cc2 <Start_Menu+0xa>
    }
}
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20025968 	.word	0x20025968

08000d5c <Start_Game>:

void Start_Game(bool is1P)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	@ 0x30
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
    LCD_Clear(0, LCD_COLOR_BLACK);
 8000d66:	2100      	movs	r1, #0
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f7ff fe6b 	bl	8000a44 <LCD_Clear>
    Game_CleanBoard(); // Start with a clean board in mem
 8000d6e:	f000 f99b 	bl	80010a8 <Game_CleanBoard>
    GameScreen();      // Draw the actual board
 8000d72:	f001 fa3b 	bl	80021ec <GameScreen>

    int currentPlayer = RED; // Idk, red as first
 8000d76:	2301      	movs	r3, #1
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool gameOver = false;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    uint32_t startTime = HAL_GetTick();
 8000d80:	f002 fd46 	bl	8003810 <HAL_GetTick>
 8000d84:	61b8      	str	r0, [r7, #24]

    while (!gameOver)
 8000d86:	e09e      	b.n	8000ec6 <Start_Game+0x16a>
    {
        int result = -1;
 8000d88:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24

        // Player Moves
        if (!is1P || currentPlayer == RED)
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f083 0301 	eor.w	r3, r3, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d102      	bne.n	8000da0 <Start_Game+0x44>
 8000d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d104      	bne.n	8000daa <Start_Game+0x4e>
        {
            // Either 2P, or it's the human player's turn in 1P
            result = Game_PlacingToken(currentPlayer);
 8000da0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000da2:	f000 f8c9 	bl	8000f38 <Game_PlacingToken>
 8000da6:	6278      	str	r0, [r7, #36]	@ 0x24
 8000da8:	e03c      	b.n	8000e24 <Start_Game+0xc8>
        }
        else
        {
            // CPU Turn in 1P Mode (YELLOW)
            HAL_Delay(150);
 8000daa:	2096      	movs	r0, #150	@ 0x96
 8000dac:	f002 fd3c 	bl	8003828 <HAL_Delay>

            int col = 0;       // column we will finally use
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
            bool good = false; // becomes true once we find a legal column
 8000db4:	2300      	movs	r3, #0
 8000db6:	77fb      	strb	r3, [r7, #31]

            while (!good)
 8000db8:	e01c      	b.n	8000df4 <Start_Game+0x98>
            {
                uint32_t rnd = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
                HAL_RNG_GenerateRandomNumber(&hrng, &rnd); // grab a 32-bit random value
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4846      	ldr	r0, [pc, #280]	@ (8000ee0 <Start_Game+0x184>)
 8000dc6:	f005 fb1b 	bl	8006400 <HAL_RNG_GenerateRandomNumber>

                // Mod calculationt to give us a value between 0 to 6
                col = (int)(rnd % COLS);
 8000dca:	68b9      	ldr	r1, [r7, #8]
 8000dcc:	4b45      	ldr	r3, [pc, #276]	@ (8000ee4 <Start_Game+0x188>)
 8000dce:	fba3 2301 	umull	r2, r3, r3, r1
 8000dd2:	1aca      	subs	r2, r1, r3
 8000dd4:	0852      	lsrs	r2, r2, #1
 8000dd6:	4413      	add	r3, r2
 8000dd8:	089a      	lsrs	r2, r3, #2
 8000dda:	4613      	mov	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	1a9b      	subs	r3, r3, r2
 8000de0:	1aca      	subs	r2, r1, r3
 8000de2:	623a      	str	r2, [r7, #32]

                // Only use if it isn't full
                if (ColumnHasSpace(col))
 8000de4:	6a38      	ldr	r0, [r7, #32]
 8000de6:	f000 f883 	bl	8000ef0 <ColumnHasSpace>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <Start_Game+0x98>
                {
                    good = true; // exit
 8000df0:	2301      	movs	r3, #1
 8000df2:	77fb      	strb	r3, [r7, #31]
            while (!good)
 8000df4:	7ffb      	ldrb	r3, [r7, #31]
 8000df6:	f083 0301 	eor.w	r3, r3, #1
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1dc      	bne.n	8000dba <Start_Game+0x5e>
                }
            }

            int row = Game_DropToken(col, currentPlayer);
 8000e00:	6a3b      	ldr	r3, [r7, #32]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f974 	bl	80010f8 <Game_DropToken>
 8000e10:	6178      	str	r0, [r7, #20]
            DrawToken(row, col, currentPlayer); // draw the piece
 8000e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	6a39      	ldr	r1, [r7, #32]
 8000e1a:	6978      	ldr	r0, [r7, #20]
 8000e1c:	f001 fa69 	bl	80022f2 <DrawToken>
            result = col;                       // For the win/tie logic
 8000e20:	6a3b      	ldr	r3, [r7, #32]
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        // Check the results
        if (result >= 0)
 8000e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	db4a      	blt.n	8000ec0 <Start_Game+0x164>
        {
            if (Game_CheckWin(currentPlayer))
 8000e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f998 	bl	8001164 <Game_CheckWin>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d020      	beq.n	8000e7c <Start_Game+0x120>
            {
                if (currentPlayer == RED)
 8000e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d105      	bne.n	8000e4c <Start_Game+0xf0>
                    redWins++;
 8000e40:	4b29      	ldr	r3, [pc, #164]	@ (8000ee8 <Start_Game+0x18c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	4a28      	ldr	r2, [pc, #160]	@ (8000ee8 <Start_Game+0x18c>)
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e004      	b.n	8000e56 <Start_Game+0xfa>
                else
                    yellowWins++;
 8000e4c:	4b27      	ldr	r3, [pc, #156]	@ (8000eec <Start_Game+0x190>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	4a26      	ldr	r2, [pc, #152]	@ (8000eec <Start_Game+0x190>)
 8000e54:	6013      	str	r3, [r2, #0]

                uint32_t duration = HAL_GetTick() - startTime;
 8000e56:	f002 fcdb 	bl	8003810 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	60fb      	str	r3, [r7, #12]
                EndScreen(currentPlayer, duration, redWins, yellowWins);
 8000e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e64:	b2d8      	uxtb	r0, r3
 8000e66:	4b20      	ldr	r3, [pc, #128]	@ (8000ee8 <Start_Game+0x18c>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b20      	ldr	r3, [pc, #128]	@ (8000eec <Start_Game+0x190>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68f9      	ldr	r1, [r7, #12]
 8000e70:	f001 fa92 	bl	8002398 <EndScreen>
                gameOver = true;
 8000e74:	2301      	movs	r3, #1
 8000e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000e7a:	e01e      	b.n	8000eba <Start_Game+0x15e>
            }
            else if (BoardIsFull())
 8000e7c:	f000 f8e8 	bl	8001050 <BoardIsFull>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d011      	beq.n	8000eaa <Start_Game+0x14e>
            {
                uint32_t duration = HAL_GetTick() - startTime;
 8000e86:	f002 fcc3 	bl	8003810 <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	613b      	str	r3, [r7, #16]
                EndScreen(0, duration, redWins, yellowWins);
 8000e92:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <Start_Game+0x18c>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <Start_Game+0x190>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6939      	ldr	r1, [r7, #16]
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f001 fa7b 	bl	8002398 <EndScreen>
                gameOver = true;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000ea8:	e007      	b.n	8000eba <Start_Game+0x15e>
            }
            else
            {
                // Next player play
                if (currentPlayer == RED)
 8000eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d102      	bne.n	8000eb6 <Start_Game+0x15a>
                {
                    currentPlayer = YELLOW;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000eb4:	e001      	b.n	8000eba <Start_Game+0x15e>
                }
                else
                {
                    currentPlayer = RED;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }
            }

            HAL_Delay(150);
 8000eba:	2096      	movs	r0, #150	@ 0x96
 8000ebc:	f002 fcb4 	bl	8003828 <HAL_Delay>
        }

        HAL_Delay(50);
 8000ec0:	2032      	movs	r0, #50	@ 0x32
 8000ec2:	f002 fcb1 	bl	8003828 <HAL_Delay>
    while (!gameOver)
 8000ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000eca:	f083 0301 	eor.w	r3, r3, #1
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f47f af59 	bne.w	8000d88 <Start_Game+0x2c>
    }
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	3730      	adds	r7, #48	@ 0x30
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200259fc 	.word	0x200259fc
 8000ee4:	24924925 	.word	0x24924925
 8000ee8:	2002596c 	.word	0x2002596c
 8000eec:	20025970 	.word	0x20025970

08000ef0 <ColumnHasSpace>:

// for the 1p mode, we have to know that the rng is valid so we check that the column is empty
bool ColumnHasSpace(int col)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    for (int r = 0; r < ROWS; r++)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	e00f      	b.n	8000f1e <ColumnHasSpace+0x2e>
    {
        if (board[r][col] == EMPTY)
 8000efe:	490d      	ldr	r1, [pc, #52]	@ (8000f34 <ColumnHasSpace+0x44>)
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	4613      	mov	r3, r2
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	1a9b      	subs	r3, r3, r2
 8000f08:	18ca      	adds	r2, r1, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <ColumnHasSpace+0x28>
            return true;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e006      	b.n	8000f26 <ColumnHasSpace+0x36>
    for (int r = 0; r < ROWS; r++)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2b05      	cmp	r3, #5
 8000f22:	ddec      	ble.n	8000efe <ColumnHasSpace+0xe>
    }
    return false;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20025974 	.word	0x20025974

08000f38 <Game_PlacingToken>:

int Game_PlacingToken(int currentPlayer)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    static int currentCol = 3;
    int lastCol = currentCol; // Keep a track of where the cursor last was so we can erase it
 8000f40:	4b40      	ldr	r3, [pc, #256]	@ (8001044 <Game_PlacingToken+0x10c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	61fb      	str	r3, [r7, #28]

    DrawCursor(currentCol, currentPlayer); // Initial draw
 8000f46:	4b3f      	ldr	r3, [pc, #252]	@ (8001044 <Game_PlacingToken+0x10c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f001 f9ef 	bl	8002334 <DrawCursor>

    while (1)
    {

        STMPE811_TouchData touch;
        touch.orientation = STMPE811_Orientation_Portrait_1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	74bb      	strb	r3, [r7, #18]
        STMPE811_State_t state = STMPE811_ReadTouch(&touch);
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 f8e6 	bl	8003130 <STMPE811_ReadTouch>
 8000f64:	4603      	mov	r3, r0
 8000f66:	76fb      	strb	r3, [r7, #27]

        if (state == STMPE811_State_Pressed)
 8000f68:	7efb      	ldrb	r3, [r7, #27]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d131      	bne.n	8000fd2 <Game_PlacingToken+0x9a>
        {
            if (touch.y > 160 && currentCol > 0)
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	2ba0      	cmp	r3, #160	@ 0xa0
 8000f72:	d90c      	bls.n	8000f8e <Game_PlacingToken+0x56>
 8000f74:	4b33      	ldr	r3, [pc, #204]	@ (8001044 <Game_PlacingToken+0x10c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	dd08      	ble.n	8000f8e <Game_PlacingToken+0x56>
            {
                lastCol = currentCol;
 8000f7c:	4b31      	ldr	r3, [pc, #196]	@ (8001044 <Game_PlacingToken+0x10c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	61fb      	str	r3, [r7, #28]
                currentCol--;
 8000f82:	4b30      	ldr	r3, [pc, #192]	@ (8001044 <Game_PlacingToken+0x10c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	4a2e      	ldr	r2, [pc, #184]	@ (8001044 <Game_PlacingToken+0x10c>)
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	e00e      	b.n	8000fac <Game_PlacingToken+0x74>
            }
            else if (touch.y <= 160 && currentCol < COLS - 1)
 8000f8e:	89fb      	ldrh	r3, [r7, #14]
 8000f90:	2ba0      	cmp	r3, #160	@ 0xa0
 8000f92:	d80b      	bhi.n	8000fac <Game_PlacingToken+0x74>
 8000f94:	4b2b      	ldr	r3, [pc, #172]	@ (8001044 <Game_PlacingToken+0x10c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b05      	cmp	r3, #5
 8000f9a:	dc07      	bgt.n	8000fac <Game_PlacingToken+0x74>
            {
                lastCol = currentCol;
 8000f9c:	4b29      	ldr	r3, [pc, #164]	@ (8001044 <Game_PlacingToken+0x10c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	61fb      	str	r3, [r7, #28]
                currentCol++;
 8000fa2:	4b28      	ldr	r3, [pc, #160]	@ (8001044 <Game_PlacingToken+0x10c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	4a26      	ldr	r2, [pc, #152]	@ (8001044 <Game_PlacingToken+0x10c>)
 8000faa:	6013      	str	r3, [r2, #0]
            }

            // As the cursor moves left and right, erase the prev location
            if (lastCol != currentCol)
 8000fac:	4b25      	ldr	r3, [pc, #148]	@ (8001044 <Game_PlacingToken+0x10c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d00d      	beq.n	8000fd2 <Game_PlacingToken+0x9a>
            {
                // Erase previous cursor
                EraseCursor(lastCol);
 8000fb6:	69f8      	ldr	r0, [r7, #28]
 8000fb8:	f001 f9dd 	bl	8002376 <EraseCursor>

                // Draw new cursor
                DrawCursor(currentCol, currentPlayer);
 8000fbc:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <Game_PlacingToken+0x10c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f001 f9b4 	bl	8002334 <DrawCursor>
                HAL_Delay(200);
 8000fcc:	20c8      	movs	r0, #200	@ 0xc8
 8000fce:	f002 fc2b 	bl	8003828 <HAL_Delay>
            }
        }

        // Button Interrupt
        if (dropRequested)
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001048 <Game_PlacingToken+0x110>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d02a      	beq.n	8001032 <Game_PlacingToken+0xfa>
        {
            dropRequested = false; // Reset the flag
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <Game_PlacingToken+0x110>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]

            int placedRow = Game_DropToken(currentCol, currentPlayer);
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <Game_PlacingToken+0x10c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f882 	bl	80010f8 <Game_DropToken>
 8000ff4:	6178      	str	r0, [r7, #20]

            if (placedRow >= 0)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db1a      	blt.n	8001032 <Game_PlacingToken+0xfa>
            {
                DrawToken(placedRow, currentCol, currentPlayer);
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <Game_PlacingToken+0x10c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	4619      	mov	r1, r3
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f001 f973 	bl	80022f2 <DrawToken>
                EraseCursor(currentCol);
 800100c:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <Game_PlacingToken+0x10c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f001 f9b0 	bl	8002376 <EraseCursor>

                // Kinda a debounce guard. had some issues where it mis registerd the button
                while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8001016:	e002      	b.n	800101e <Game_PlacingToken+0xe6>
                {
                    HAL_Delay(10);
 8001018:	200a      	movs	r0, #10
 800101a:	f002 fc05 	bl	8003828 <HAL_Delay>
                while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 800101e:	2101      	movs	r1, #1
 8001020:	480a      	ldr	r0, [pc, #40]	@ (800104c <Game_PlacingToken+0x114>)
 8001022:	f002 ffef 	bl	8004004 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d0f5      	beq.n	8001018 <Game_PlacingToken+0xe0>
                }

                return currentCol;
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <Game_PlacingToken+0x10c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	e003      	b.n	800103a <Game_PlacingToken+0x102>
            }
        }

        HAL_Delay(50);
 8001032:	2032      	movs	r0, #50	@ 0x32
 8001034:	f002 fbf8 	bl	8003828 <HAL_Delay>
    {
 8001038:	e78d      	b.n	8000f56 <Game_PlacingToken+0x1e>
    }

    return -1;
}
 800103a:	4618      	mov	r0, r3
 800103c:	3720      	adds	r7, #32
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2000000c 	.word	0x2000000c
 8001048:	2002599e 	.word	0x2002599e
 800104c:	40020000 	.word	0x40020000

08001050 <BoardIsFull>:

bool BoardIsFull(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
    for (int c = 0; c < COLS; c++)
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	e018      	b.n	800108e <BoardIsFull+0x3e>
    {
        for (int r = 0; r < ROWS; r++)
 800105c:	2300      	movs	r3, #0
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	e00f      	b.n	8001082 <BoardIsFull+0x32>
        {
            if (board[r][c] == EMPTY)
 8001062:	4910      	ldr	r1, [pc, #64]	@ (80010a4 <BoardIsFull+0x54>)
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	4613      	mov	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	1a9b      	subs	r3, r3, r2
 800106c:	18ca      	adds	r2, r1, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <BoardIsFull+0x2c>
            {
                return false; // Found at least one empty slot
 8001078:	2300      	movs	r3, #0
 800107a:	e00c      	b.n	8001096 <BoardIsFull+0x46>
        for (int r = 0; r < ROWS; r++)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	2b05      	cmp	r3, #5
 8001086:	ddec      	ble.n	8001062 <BoardIsFull+0x12>
    for (int c = 0; c < COLS; c++)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3301      	adds	r3, #1
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b06      	cmp	r3, #6
 8001092:	dde3      	ble.n	800105c <BoardIsFull+0xc>
            }
        }
    }
    return true; // No empties found
 8001094:	2301      	movs	r3, #1
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20025974 	.word	0x20025974

080010a8 <Game_CleanBoard>:

// Genereate/Clean a fresh board
void Game_CleanBoard(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
    for (int r = 0; r < ROWS; r++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	e015      	b.n	80010e0 <Game_CleanBoard+0x38>
    {
        for (int c = 0; c < COLS; c++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	e00c      	b.n	80010d4 <Game_CleanBoard+0x2c>
        {
            board[r][c] = EMPTY;
 80010ba:	490e      	ldr	r1, [pc, #56]	@ (80010f4 <Game_CleanBoard+0x4c>)
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	1a9b      	subs	r3, r3, r2
 80010c4:	18ca      	adds	r2, r1, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	4413      	add	r3, r2
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < COLS; c++)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	ddef      	ble.n	80010ba <Game_CleanBoard+0x12>
    for (int r = 0; r < ROWS; r++)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3301      	adds	r3, #1
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b05      	cmp	r3, #5
 80010e4:	dde6      	ble.n	80010b4 <Game_CleanBoard+0xc>
        }
    }
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	20025974 	.word	0x20025974

080010f8 <Game_DropToken>:

int Game_DropToken(uint8_t col, uint8_t player)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	4613      	mov	r3, r2
 8001106:	71bb      	strb	r3, [r7, #6]
    int actualCol = (COLS - 1) - col; // Flip the column
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	f1c3 0306 	rsb	r3, r3, #6
 800110e:	60bb      	str	r3, [r7, #8]

    for (int row = ROWS - 1; row >= 0; row--)
 8001110:	2305      	movs	r3, #5
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	e019      	b.n	800114a <Game_DropToken+0x52>
    {
        if (board[row][actualCol] == EMPTY)
 8001116:	4912      	ldr	r1, [pc, #72]	@ (8001160 <Game_DropToken+0x68>)
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4613      	mov	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	1a9b      	subs	r3, r3, r2
 8001120:	18ca      	adds	r2, r1, r3
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	4413      	add	r3, r2
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10b      	bne.n	8001144 <Game_DropToken+0x4c>
        {
            board[row][actualCol] = player;
 800112c:	490c      	ldr	r1, [pc, #48]	@ (8001160 <Game_DropToken+0x68>)
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4613      	mov	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	1a9b      	subs	r3, r3, r2
 8001136:	18ca      	adds	r2, r1, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	4413      	add	r3, r2
 800113c:	79ba      	ldrb	r2, [r7, #6]
 800113e:	701a      	strb	r2, [r3, #0]
            return row; // Return the row where token landed
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	e007      	b.n	8001154 <Game_DropToken+0x5c>
    for (int row = ROWS - 1; row >= 0; row--)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3b01      	subs	r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2b00      	cmp	r3, #0
 800114e:	dae2      	bge.n	8001116 <Game_DropToken+0x1e>
        }
    }
    return -1; // Column full
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	20025974 	.word	0x20025974

08001164 <Game_CheckWin>:

bool Game_CheckWin(uint8_t player)
{
 8001164:	b480      	push	{r7}
 8001166:	b08b      	sub	sp, #44	@ 0x2c
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
    // Horizontal
    for (int r = 0; r < ROWS; r++)
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
 8001172:	e040      	b.n	80011f6 <Game_CheckWin+0x92>
    {
        for (int c = 0; c <= COLS - 4; c++)
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
 8001178:	e037      	b.n	80011ea <Game_CheckWin+0x86>
        {
            if (board[r][c] == player && board[r][c + 1] == player &&
 800117a:	4991      	ldr	r1, [pc, #580]	@ (80013c0 <Game_CheckWin+0x25c>)
 800117c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800117e:	4613      	mov	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	18ca      	adds	r2, r1, r3
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	79fa      	ldrb	r2, [r7, #7]
 800118e:	429a      	cmp	r2, r3
 8001190:	d128      	bne.n	80011e4 <Game_CheckWin+0x80>
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	1c59      	adds	r1, r3, #1
 8001196:	488a      	ldr	r0, [pc, #552]	@ (80013c0 <Game_CheckWin+0x25c>)
 8001198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800119a:	4613      	mov	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	1a9b      	subs	r3, r3, r2
 80011a0:	4403      	add	r3, r0
 80011a2:	440b      	add	r3, r1
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	79fa      	ldrb	r2, [r7, #7]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d11b      	bne.n	80011e4 <Game_CheckWin+0x80>
                board[r][c + 2] == player && board[r][c + 3] == player)
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	1c99      	adds	r1, r3, #2
 80011b0:	4883      	ldr	r0, [pc, #524]	@ (80013c0 <Game_CheckWin+0x25c>)
 80011b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011b4:	4613      	mov	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	1a9b      	subs	r3, r3, r2
 80011ba:	4403      	add	r3, r0
 80011bc:	440b      	add	r3, r1
 80011be:	781b      	ldrb	r3, [r3, #0]
            if (board[r][c] == player && board[r][c + 1] == player &&
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d10e      	bne.n	80011e4 <Game_CheckWin+0x80>
                board[r][c + 2] == player && board[r][c + 3] == player)
 80011c6:	6a3b      	ldr	r3, [r7, #32]
 80011c8:	1cd9      	adds	r1, r3, #3
 80011ca:	487d      	ldr	r0, [pc, #500]	@ (80013c0 <Game_CheckWin+0x25c>)
 80011cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011ce:	4613      	mov	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	1a9b      	subs	r3, r3, r2
 80011d4:	4403      	add	r3, r0
 80011d6:	440b      	add	r3, r1
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	79fa      	ldrb	r2, [r7, #7]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d101      	bne.n	80011e4 <Game_CheckWin+0x80>
                return true;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0e7      	b.n	80013b4 <Game_CheckWin+0x250>
        for (int c = 0; c <= COLS - 4; c++)
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	3301      	adds	r3, #1
 80011e8:	623b      	str	r3, [r7, #32]
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	ddc4      	ble.n	800117a <Game_CheckWin+0x16>
    for (int r = 0; r < ROWS; r++)
 80011f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f2:	3301      	adds	r3, #1
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f8:	2b05      	cmp	r3, #5
 80011fa:	ddbb      	ble.n	8001174 <Game_CheckWin+0x10>
        }
    }

    // Vertical
    for (int r = 0; r <= ROWS - 4; r++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	e040      	b.n	8001284 <Game_CheckWin+0x120>
    {
        for (int c = 0; c < COLS; c++)
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	e037      	b.n	8001278 <Game_CheckWin+0x114>
        {
            if (board[r][c] == player && board[r + 1][c] == player &&
 8001208:	496d      	ldr	r1, [pc, #436]	@ (80013c0 <Game_CheckWin+0x25c>)
 800120a:	69fa      	ldr	r2, [r7, #28]
 800120c:	4613      	mov	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	1a9b      	subs	r3, r3, r2
 8001212:	18ca      	adds	r2, r1, r3
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	79fa      	ldrb	r2, [r7, #7]
 800121c:	429a      	cmp	r2, r3
 800121e:	d128      	bne.n	8001272 <Game_CheckWin+0x10e>
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	4966      	ldr	r1, [pc, #408]	@ (80013c0 <Game_CheckWin+0x25c>)
 8001226:	4613      	mov	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	1a9b      	subs	r3, r3, r2
 800122c:	18ca      	adds	r2, r1, r3
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	4413      	add	r3, r2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	79fa      	ldrb	r2, [r7, #7]
 8001236:	429a      	cmp	r2, r3
 8001238:	d11b      	bne.n	8001272 <Game_CheckWin+0x10e>
                board[r + 2][c] == player && board[r + 3][c] == player)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	1c9a      	adds	r2, r3, #2
 800123e:	4960      	ldr	r1, [pc, #384]	@ (80013c0 <Game_CheckWin+0x25c>)
 8001240:	4613      	mov	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	1a9b      	subs	r3, r3, r2
 8001246:	18ca      	adds	r2, r1, r3
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
            if (board[r][c] == player && board[r + 1][c] == player &&
 800124e:	79fa      	ldrb	r2, [r7, #7]
 8001250:	429a      	cmp	r2, r3
 8001252:	d10e      	bne.n	8001272 <Game_CheckWin+0x10e>
                board[r + 2][c] == player && board[r + 3][c] == player)
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	1cda      	adds	r2, r3, #3
 8001258:	4959      	ldr	r1, [pc, #356]	@ (80013c0 <Game_CheckWin+0x25c>)
 800125a:	4613      	mov	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	1a9b      	subs	r3, r3, r2
 8001260:	18ca      	adds	r2, r1, r3
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	79fa      	ldrb	r2, [r7, #7]
 800126a:	429a      	cmp	r2, r3
 800126c:	d101      	bne.n	8001272 <Game_CheckWin+0x10e>
                return true;
 800126e:	2301      	movs	r3, #1
 8001270:	e0a0      	b.n	80013b4 <Game_CheckWin+0x250>
        for (int c = 0; c < COLS; c++)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	3301      	adds	r3, #1
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2b06      	cmp	r3, #6
 800127c:	ddc4      	ble.n	8001208 <Game_CheckWin+0xa4>
    for (int r = 0; r <= ROWS - 4; r++)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3301      	adds	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b02      	cmp	r3, #2
 8001288:	ddbb      	ble.n	8001202 <Game_CheckWin+0x9e>
        }
    }

    // Diagonal right
    for (int r = 0; r <= ROWS - 4; r++)
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	e043      	b.n	8001318 <Game_CheckWin+0x1b4>
    {
        for (int c = 0; c <= COLS - 4; c++)
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	e03a      	b.n	800130c <Game_CheckWin+0x1a8>
        {
            if (board[r][c] == player && board[r + 1][c + 1] == player &&
 8001296:	494a      	ldr	r1, [pc, #296]	@ (80013c0 <Game_CheckWin+0x25c>)
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	4613      	mov	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	1a9b      	subs	r3, r3, r2
 80012a0:	18ca      	adds	r2, r1, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4413      	add	r3, r2
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	79fa      	ldrb	r2, [r7, #7]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d12b      	bne.n	8001306 <Game_CheckWin+0x1a2>
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1c59      	adds	r1, r3, #1
 80012b6:	4842      	ldr	r0, [pc, #264]	@ (80013c0 <Game_CheckWin+0x25c>)
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	4403      	add	r3, r0
 80012c0:	440b      	add	r3, r1
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	79fa      	ldrb	r2, [r7, #7]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d11d      	bne.n	8001306 <Game_CheckWin+0x1a2>
                board[r + 2][c + 2] == player && board[r + 3][c + 3] == player)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	1c9a      	adds	r2, r3, #2
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1c99      	adds	r1, r3, #2
 80012d2:	483b      	ldr	r0, [pc, #236]	@ (80013c0 <Game_CheckWin+0x25c>)
 80012d4:	4613      	mov	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	1a9b      	subs	r3, r3, r2
 80012da:	4403      	add	r3, r0
 80012dc:	440b      	add	r3, r1
 80012de:	781b      	ldrb	r3, [r3, #0]
            if (board[r][c] == player && board[r + 1][c + 1] == player &&
 80012e0:	79fa      	ldrb	r2, [r7, #7]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d10f      	bne.n	8001306 <Game_CheckWin+0x1a2>
                board[r + 2][c + 2] == player && board[r + 3][c + 3] == player)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	1cda      	adds	r2, r3, #3
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1cd9      	adds	r1, r3, #3
 80012ee:	4834      	ldr	r0, [pc, #208]	@ (80013c0 <Game_CheckWin+0x25c>)
 80012f0:	4613      	mov	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	4403      	add	r3, r0
 80012f8:	440b      	add	r3, r1
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	79fa      	ldrb	r2, [r7, #7]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d101      	bne.n	8001306 <Game_CheckWin+0x1a2>
                return true;
 8001302:	2301      	movs	r3, #1
 8001304:	e056      	b.n	80013b4 <Game_CheckWin+0x250>
        for (int c = 0; c <= COLS - 4; c++)
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	3301      	adds	r3, #1
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	2b03      	cmp	r3, #3
 8001310:	ddc1      	ble.n	8001296 <Game_CheckWin+0x132>
    for (int r = 0; r <= ROWS - 4; r++)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	2b02      	cmp	r3, #2
 800131c:	ddb8      	ble.n	8001290 <Game_CheckWin+0x12c>
        }
    }

    // Diagonal left
    for (int r = 0; r <= ROWS - 4; r++)
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	e043      	b.n	80013ac <Game_CheckWin+0x248>
    {
        for (int c = 3; c < COLS; c++)
 8001324:	2303      	movs	r3, #3
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	e03a      	b.n	80013a0 <Game_CheckWin+0x23c>
        {
            if (board[r][c] == player && board[r + 1][c - 1] == player &&
 800132a:	4925      	ldr	r1, [pc, #148]	@ (80013c0 <Game_CheckWin+0x25c>)
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4613      	mov	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	1a9b      	subs	r3, r3, r2
 8001334:	18ca      	adds	r2, r1, r3
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	4413      	add	r3, r2
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	79fa      	ldrb	r2, [r7, #7]
 800133e:	429a      	cmp	r2, r3
 8001340:	d12b      	bne.n	800139a <Game_CheckWin+0x236>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1e59      	subs	r1, r3, #1
 800134a:	481d      	ldr	r0, [pc, #116]	@ (80013c0 <Game_CheckWin+0x25c>)
 800134c:	4613      	mov	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	1a9b      	subs	r3, r3, r2
 8001352:	4403      	add	r3, r0
 8001354:	440b      	add	r3, r1
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	79fa      	ldrb	r2, [r7, #7]
 800135a:	429a      	cmp	r2, r3
 800135c:	d11d      	bne.n	800139a <Game_CheckWin+0x236>
                board[r + 2][c - 2] == player && board[r + 3][c - 3] == player)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1c9a      	adds	r2, r3, #2
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	1e99      	subs	r1, r3, #2
 8001366:	4816      	ldr	r0, [pc, #88]	@ (80013c0 <Game_CheckWin+0x25c>)
 8001368:	4613      	mov	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	1a9b      	subs	r3, r3, r2
 800136e:	4403      	add	r3, r0
 8001370:	440b      	add	r3, r1
 8001372:	781b      	ldrb	r3, [r3, #0]
            if (board[r][c] == player && board[r + 1][c - 1] == player &&
 8001374:	79fa      	ldrb	r2, [r7, #7]
 8001376:	429a      	cmp	r2, r3
 8001378:	d10f      	bne.n	800139a <Game_CheckWin+0x236>
                board[r + 2][c - 2] == player && board[r + 3][c - 3] == player)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1cda      	adds	r2, r3, #3
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1ed9      	subs	r1, r3, #3
 8001382:	480f      	ldr	r0, [pc, #60]	@ (80013c0 <Game_CheckWin+0x25c>)
 8001384:	4613      	mov	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	1a9b      	subs	r3, r3, r2
 800138a:	4403      	add	r3, r0
 800138c:	440b      	add	r3, r1
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	79fa      	ldrb	r2, [r7, #7]
 8001392:	429a      	cmp	r2, r3
 8001394:	d101      	bne.n	800139a <Game_CheckWin+0x236>
                return true;
 8001396:	2301      	movs	r3, #1
 8001398:	e00c      	b.n	80013b4 <Game_CheckWin+0x250>
        for (int c = 3; c < COLS; c++)
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	3301      	adds	r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	ddc1      	ble.n	800132a <Game_CheckWin+0x1c6>
    for (int r = 0; r <= ROWS - 4; r++)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3301      	adds	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	ddb8      	ble.n	8001324 <Game_CheckWin+0x1c0>
        }
    }

    return false;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	372c      	adds	r7, #44	@ 0x2c
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20025974 	.word	0x20025974

080013c4 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80013c8:	f000 f9fe 	bl	80017c8 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80013cc:	20ca      	movs	r0, #202	@ 0xca
 80013ce:	f000 f943 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80013d2:	20c3      	movs	r0, #195	@ 0xc3
 80013d4:	f000 f94d 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80013d8:	2008      	movs	r0, #8
 80013da:	f000 f94a 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80013de:	2050      	movs	r0, #80	@ 0x50
 80013e0:	f000 f947 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80013e4:	20cf      	movs	r0, #207	@ 0xcf
 80013e6:	f000 f937 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80013ea:	2000      	movs	r0, #0
 80013ec:	f000 f941 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80013f0:	20c1      	movs	r0, #193	@ 0xc1
 80013f2:	f000 f93e 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80013f6:	2030      	movs	r0, #48	@ 0x30
 80013f8:	f000 f93b 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80013fc:	20ed      	movs	r0, #237	@ 0xed
 80013fe:	f000 f92b 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001402:	2064      	movs	r0, #100	@ 0x64
 8001404:	f000 f935 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001408:	2003      	movs	r0, #3
 800140a:	f000 f932 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800140e:	2012      	movs	r0, #18
 8001410:	f000 f92f 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001414:	2081      	movs	r0, #129	@ 0x81
 8001416:	f000 f92c 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800141a:	20e8      	movs	r0, #232	@ 0xe8
 800141c:	f000 f91c 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001420:	2085      	movs	r0, #133	@ 0x85
 8001422:	f000 f926 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001426:	2000      	movs	r0, #0
 8001428:	f000 f923 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800142c:	2078      	movs	r0, #120	@ 0x78
 800142e:	f000 f920 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001432:	20cb      	movs	r0, #203	@ 0xcb
 8001434:	f000 f910 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001438:	2039      	movs	r0, #57	@ 0x39
 800143a:	f000 f91a 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800143e:	202c      	movs	r0, #44	@ 0x2c
 8001440:	f000 f917 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001444:	2000      	movs	r0, #0
 8001446:	f000 f914 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800144a:	2034      	movs	r0, #52	@ 0x34
 800144c:	f000 f911 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001450:	2002      	movs	r0, #2
 8001452:	f000 f90e 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001456:	20f7      	movs	r0, #247	@ 0xf7
 8001458:	f000 f8fe 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800145c:	2020      	movs	r0, #32
 800145e:	f000 f908 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001462:	20ea      	movs	r0, #234	@ 0xea
 8001464:	f000 f8f8 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001468:	2000      	movs	r0, #0
 800146a:	f000 f902 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800146e:	2000      	movs	r0, #0
 8001470:	f000 f8ff 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001474:	20b1      	movs	r0, #177	@ 0xb1
 8001476:	f000 f8ef 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800147a:	2000      	movs	r0, #0
 800147c:	f000 f8f9 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001480:	201b      	movs	r0, #27
 8001482:	f000 f8f6 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001486:	20b6      	movs	r0, #182	@ 0xb6
 8001488:	f000 f8e6 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800148c:	200a      	movs	r0, #10
 800148e:	f000 f8f0 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001492:	20a2      	movs	r0, #162	@ 0xa2
 8001494:	f000 f8ed 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001498:	20c0      	movs	r0, #192	@ 0xc0
 800149a:	f000 f8dd 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800149e:	2010      	movs	r0, #16
 80014a0:	f000 f8e7 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80014a4:	20c1      	movs	r0, #193	@ 0xc1
 80014a6:	f000 f8d7 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80014aa:	2010      	movs	r0, #16
 80014ac:	f000 f8e1 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80014b0:	20c5      	movs	r0, #197	@ 0xc5
 80014b2:	f000 f8d1 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80014b6:	2045      	movs	r0, #69	@ 0x45
 80014b8:	f000 f8db 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80014bc:	2015      	movs	r0, #21
 80014be:	f000 f8d8 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80014c2:	20c7      	movs	r0, #199	@ 0xc7
 80014c4:	f000 f8c8 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80014c8:	2090      	movs	r0, #144	@ 0x90
 80014ca:	f000 f8d2 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80014ce:	2036      	movs	r0, #54	@ 0x36
 80014d0:	f000 f8c2 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80014d4:	20c8      	movs	r0, #200	@ 0xc8
 80014d6:	f000 f8cc 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80014da:	20f2      	movs	r0, #242	@ 0xf2
 80014dc:	f000 f8bc 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80014e0:	2000      	movs	r0, #0
 80014e2:	f000 f8c6 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80014e6:	20b0      	movs	r0, #176	@ 0xb0
 80014e8:	f000 f8b6 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80014ec:	20c2      	movs	r0, #194	@ 0xc2
 80014ee:	f000 f8c0 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80014f2:	20b6      	movs	r0, #182	@ 0xb6
 80014f4:	f000 f8b0 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80014f8:	200a      	movs	r0, #10
 80014fa:	f000 f8ba 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80014fe:	20a7      	movs	r0, #167	@ 0xa7
 8001500:	f000 f8b7 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001504:	2027      	movs	r0, #39	@ 0x27
 8001506:	f000 f8b4 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800150a:	2004      	movs	r0, #4
 800150c:	f000 f8b1 	bl	8001672 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001510:	202a      	movs	r0, #42	@ 0x2a
 8001512:	f000 f8a1 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001516:	2000      	movs	r0, #0
 8001518:	f000 f8ab 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800151c:	2000      	movs	r0, #0
 800151e:	f000 f8a8 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001522:	2000      	movs	r0, #0
 8001524:	f000 f8a5 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001528:	20ef      	movs	r0, #239	@ 0xef
 800152a:	f000 f8a2 	bl	8001672 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800152e:	202b      	movs	r0, #43	@ 0x2b
 8001530:	f000 f892 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001534:	2000      	movs	r0, #0
 8001536:	f000 f89c 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800153a:	2000      	movs	r0, #0
 800153c:	f000 f899 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001540:	2001      	movs	r0, #1
 8001542:	f000 f896 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001546:	203f      	movs	r0, #63	@ 0x3f
 8001548:	f000 f893 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800154c:	20f6      	movs	r0, #246	@ 0xf6
 800154e:	f000 f883 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001552:	2001      	movs	r0, #1
 8001554:	f000 f88d 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001558:	2000      	movs	r0, #0
 800155a:	f000 f88a 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800155e:	2006      	movs	r0, #6
 8001560:	f000 f887 	bl	8001672 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001564:	202c      	movs	r0, #44	@ 0x2c
 8001566:	f000 f877 	bl	8001658 <ili9341_Write_Reg>
  LCD_Delay(200);
 800156a:	20c8      	movs	r0, #200	@ 0xc8
 800156c:	f000 f9e8 	bl	8001940 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001570:	2026      	movs	r0, #38	@ 0x26
 8001572:	f000 f871 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001576:	2001      	movs	r0, #1
 8001578:	f000 f87b 	bl	8001672 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800157c:	20e0      	movs	r0, #224	@ 0xe0
 800157e:	f000 f86b 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001582:	200f      	movs	r0, #15
 8001584:	f000 f875 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001588:	2029      	movs	r0, #41	@ 0x29
 800158a:	f000 f872 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800158e:	2024      	movs	r0, #36	@ 0x24
 8001590:	f000 f86f 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001594:	200c      	movs	r0, #12
 8001596:	f000 f86c 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800159a:	200e      	movs	r0, #14
 800159c:	f000 f869 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80015a0:	2009      	movs	r0, #9
 80015a2:	f000 f866 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80015a6:	204e      	movs	r0, #78	@ 0x4e
 80015a8:	f000 f863 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80015ac:	2078      	movs	r0, #120	@ 0x78
 80015ae:	f000 f860 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80015b2:	203c      	movs	r0, #60	@ 0x3c
 80015b4:	f000 f85d 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80015b8:	2009      	movs	r0, #9
 80015ba:	f000 f85a 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80015be:	2013      	movs	r0, #19
 80015c0:	f000 f857 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80015c4:	2005      	movs	r0, #5
 80015c6:	f000 f854 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80015ca:	2017      	movs	r0, #23
 80015cc:	f000 f851 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80015d0:	2011      	movs	r0, #17
 80015d2:	f000 f84e 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f000 f84b 	bl	8001672 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80015dc:	20e1      	movs	r0, #225	@ 0xe1
 80015de:	f000 f83b 	bl	8001658 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 f845 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80015e8:	2016      	movs	r0, #22
 80015ea:	f000 f842 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80015ee:	201b      	movs	r0, #27
 80015f0:	f000 f83f 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80015f4:	2004      	movs	r0, #4
 80015f6:	f000 f83c 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80015fa:	2011      	movs	r0, #17
 80015fc:	f000 f839 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001600:	2007      	movs	r0, #7
 8001602:	f000 f836 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001606:	2031      	movs	r0, #49	@ 0x31
 8001608:	f000 f833 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 800160c:	2033      	movs	r0, #51	@ 0x33
 800160e:	f000 f830 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001612:	2042      	movs	r0, #66	@ 0x42
 8001614:	f000 f82d 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001618:	2005      	movs	r0, #5
 800161a:	f000 f82a 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800161e:	200c      	movs	r0, #12
 8001620:	f000 f827 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001624:	200a      	movs	r0, #10
 8001626:	f000 f824 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800162a:	2028      	movs	r0, #40	@ 0x28
 800162c:	f000 f821 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001630:	202f      	movs	r0, #47	@ 0x2f
 8001632:	f000 f81e 	bl	8001672 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001636:	200f      	movs	r0, #15
 8001638:	f000 f81b 	bl	8001672 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800163c:	2011      	movs	r0, #17
 800163e:	f000 f80b 	bl	8001658 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001642:	20c8      	movs	r0, #200	@ 0xc8
 8001644:	f000 f97c 	bl	8001940 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001648:	2029      	movs	r0, #41	@ 0x29
 800164a:	f000 f805 	bl	8001658 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800164e:	202c      	movs	r0, #44	@ 0x2c
 8001650:	f000 f802 	bl	8001658 <ili9341_Write_Reg>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f949 	bl	80018fc <LCD_IO_WriteReg>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f91a 	bl	80018b8 <LCD_IO_WriteData>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001690:	4819      	ldr	r0, [pc, #100]	@ (80016f8 <SPI_Init+0x6c>)
 8001692:	f005 f900 	bl	8006896 <HAL_SPI_GetState>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d12b      	bne.n	80016f4 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 800169c:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <SPI_Init+0x6c>)
 800169e:	4a17      	ldr	r2, [pc, #92]	@ (80016fc <SPI_Init+0x70>)
 80016a0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016a2:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <SPI_Init+0x6c>)
 80016a4:	2218      	movs	r2, #24
 80016a6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80016a8:	4b13      	ldr	r3, [pc, #76]	@ (80016f8 <SPI_Init+0x6c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80016ae:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <SPI_Init+0x6c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80016b4:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <SPI_Init+0x6c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80016ba:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <SPI_Init+0x6c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80016c0:	4b0d      	ldr	r3, [pc, #52]	@ (80016f8 <SPI_Init+0x6c>)
 80016c2:	2207      	movs	r2, #7
 80016c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80016c6:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <SPI_Init+0x6c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <SPI_Init+0x6c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <SPI_Init+0x6c>)
 80016d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016d8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80016da:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <SPI_Init+0x6c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80016e0:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <SPI_Init+0x6c>)
 80016e2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016e6:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <SPI_Init+0x6c>)
 80016ea:	f000 f833 	bl	8001754 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80016ee:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <SPI_Init+0x6c>)
 80016f0:	f004 fedc 	bl	80064ac <HAL_SPI_Init>
  }
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200259a0 	.word	0x200259a0
 80016fc:	40015000 	.word	0x40015000

08001700 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <SPI_Write+0x34>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	1db9      	adds	r1, r7, #6
 8001714:	2201      	movs	r2, #1
 8001716:	4808      	ldr	r0, [pc, #32]	@ (8001738 <SPI_Write+0x38>)
 8001718:	f004 ff79 	bl	800660e <HAL_SPI_Transmit>
 800171c:	4603      	mov	r3, r0
 800171e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001726:	f000 f809 	bl	800173c <SPI_Error>
  }
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000010 	.word	0x20000010
 8001738:	200259a0 	.word	0x200259a0

0800173c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001740:	4803      	ldr	r0, [pc, #12]	@ (8001750 <SPI_Error+0x14>)
 8001742:	f004 ff3c 	bl	80065be <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001746:	f7ff ffa1 	bl	800168c <SPI_Init>
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200259a0 	.word	0x200259a0

08001754 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	@ 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <SPI_MspInit+0x6c>)
 8001762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001764:	4a16      	ldr	r2, [pc, #88]	@ (80017c0 <SPI_MspInit+0x6c>)
 8001766:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800176a:	6453      	str	r3, [r2, #68]	@ 0x44
 800176c:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <SPI_MspInit+0x6c>)
 800176e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001770:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <SPI_MspInit+0x6c>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001780:	4a0f      	ldr	r2, [pc, #60]	@ (80017c0 <SPI_MspInit+0x6c>)
 8001782:	f043 0320 	orr.w	r3, r3, #32
 8001786:	6313      	str	r3, [r2, #48]	@ 0x30
 8001788:	4b0d      	ldr	r3, [pc, #52]	@ (80017c0 <SPI_MspInit+0x6c>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178c:	f003 0320 	and.w	r3, r3, #32
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001794:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001798:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800179e:	2302      	movs	r3, #2
 80017a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80017a2:	2301      	movs	r3, #1
 80017a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80017a6:	2305      	movs	r3, #5
 80017a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	4804      	ldr	r0, [pc, #16]	@ (80017c4 <SPI_MspInit+0x70>)
 80017b2:	f002 f96f 	bl	8003a94 <HAL_GPIO_Init>
}
 80017b6:	bf00      	nop
 80017b8:	3728      	adds	r7, #40	@ 0x28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40021400 	.word	0x40021400

080017c8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 80017ce:	4b36      	ldr	r3, [pc, #216]	@ (80018a8 <LCD_IO_Init+0xe0>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d164      	bne.n	80018a0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80017d6:	4b34      	ldr	r3, [pc, #208]	@ (80018a8 <LCD_IO_Init+0xe0>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	4b32      	ldr	r3, [pc, #200]	@ (80018ac <LCD_IO_Init+0xe4>)
 80017e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e4:	4a31      	ldr	r2, [pc, #196]	@ (80018ac <LCD_IO_Init+0xe4>)
 80017e6:	f043 0308 	orr.w	r3, r3, #8
 80017ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ec:	4b2f      	ldr	r3, [pc, #188]	@ (80018ac <LCD_IO_Init+0xe4>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80017f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80017fe:	2301      	movs	r3, #1
 8001800:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001806:	2302      	movs	r3, #2
 8001808:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	4619      	mov	r1, r3
 8001810:	4827      	ldr	r0, [pc, #156]	@ (80018b0 <LCD_IO_Init+0xe8>)
 8001812:	f002 f93f 	bl	8003a94 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b24      	ldr	r3, [pc, #144]	@ (80018ac <LCD_IO_Init+0xe4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a23      	ldr	r2, [pc, #140]	@ (80018ac <LCD_IO_Init+0xe4>)
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <LCD_IO_Init+0xe4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001832:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001836:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001840:	2302      	movs	r3, #2
 8001842:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	4619      	mov	r1, r3
 800184a:	4819      	ldr	r0, [pc, #100]	@ (80018b0 <LCD_IO_Init+0xe8>)
 800184c:	f002 f922 	bl	8003a94 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <LCD_IO_Init+0xe4>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001858:	4a14      	ldr	r2, [pc, #80]	@ (80018ac <LCD_IO_Init+0xe4>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <LCD_IO_Init+0xe4>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800186c:	2304      	movs	r3, #4
 800186e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001870:	2301      	movs	r3, #1
 8001872:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001878:	2302      	movs	r3, #2
 800187a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	4619      	mov	r1, r3
 8001882:	480c      	ldr	r0, [pc, #48]	@ (80018b4 <LCD_IO_Init+0xec>)
 8001884:	f002 f906 	bl	8003a94 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001888:	2200      	movs	r2, #0
 800188a:	2104      	movs	r1, #4
 800188c:	4809      	ldr	r0, [pc, #36]	@ (80018b4 <LCD_IO_Init+0xec>)
 800188e:	f002 fbd1 	bl	8004034 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001892:	2201      	movs	r2, #1
 8001894:	2104      	movs	r1, #4
 8001896:	4807      	ldr	r0, [pc, #28]	@ (80018b4 <LCD_IO_Init+0xec>)
 8001898:	f002 fbcc 	bl	8004034 <HAL_GPIO_WritePin>

    SPI_Init();
 800189c:	f7ff fef6 	bl	800168c <SPI_Init>
  }
}
 80018a0:	bf00      	nop
 80018a2:	3720      	adds	r7, #32
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	200259f8 	.word	0x200259f8
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40020800 	.word	0x40020800

080018b8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80018c2:	2201      	movs	r2, #1
 80018c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018c8:	480a      	ldr	r0, [pc, #40]	@ (80018f4 <LCD_IO_WriteData+0x3c>)
 80018ca:	f002 fbb3 	bl	8004034 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80018ce:	2200      	movs	r2, #0
 80018d0:	2104      	movs	r1, #4
 80018d2:	4809      	ldr	r0, [pc, #36]	@ (80018f8 <LCD_IO_WriteData+0x40>)
 80018d4:	f002 fbae 	bl	8004034 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff10 	bl	8001700 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80018e0:	2201      	movs	r2, #1
 80018e2:	2104      	movs	r1, #4
 80018e4:	4804      	ldr	r0, [pc, #16]	@ (80018f8 <LCD_IO_WriteData+0x40>)
 80018e6:	f002 fba5 	bl	8004034 <HAL_GPIO_WritePin>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40020c00 	.word	0x40020c00
 80018f8:	40020800 	.word	0x40020800

080018fc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800190c:	480a      	ldr	r0, [pc, #40]	@ (8001938 <LCD_IO_WriteReg+0x3c>)
 800190e:	f002 fb91 	bl	8004034 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001912:	2200      	movs	r2, #0
 8001914:	2104      	movs	r1, #4
 8001916:	4809      	ldr	r0, [pc, #36]	@ (800193c <LCD_IO_WriteReg+0x40>)
 8001918:	f002 fb8c 	bl	8004034 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	b29b      	uxth	r3, r3
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff feed 	bl	8001700 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001926:	2201      	movs	r2, #1
 8001928:	2104      	movs	r1, #4
 800192a:	4804      	ldr	r0, [pc, #16]	@ (800193c <LCD_IO_WriteReg+0x40>)
 800192c:	f002 fb82 	bl	8004034 <HAL_GPIO_WritePin>
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40020c00 	.word	0x40020c00
 800193c:	40020800 	.word	0x40020800

08001940 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f001 ff6d 	bl	8003828 <HAL_Delay>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195a:	f001 fef3 	bl	8003744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195e:	f000 f815 	bl	800198c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001962:	f000 fa05 	bl	8001d70 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001966:	f000 f8bb 	bl	8001ae0 <MX_LTDC_Init>
  MX_RNG_Init();
 800196a:	f000 f96b 	bl	8001c44 <MX_RNG_Init>
  MX_TIM2_Init();
 800196e:	f000 f9b3 	bl	8001cd8 <MX_TIM2_Init>
  MX_SPI5_Init();
 8001972:	f000 f97b 	bl	8001c6c <MX_SPI5_Init>
  MX_I2C3_Init();
 8001976:	f000 f873 	bl	8001a60 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 800197a:	f7fe fe01 	bl	8000580 <ApplicationInit>
  HAL_Delay(50);
 800197e:	2032      	movs	r0, #50	@ 0x32
 8001980:	f001 ff52 	bl	8003828 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Game_Init();
 8001984:	f7ff f986 	bl	8000c94 <Game_Init>
 8001988:	e7fc      	b.n	8001984 <main+0x2e>
	...

0800198c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b094      	sub	sp, #80	@ 0x50
 8001990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	f107 0320 	add.w	r3, r7, #32
 8001996:	2230      	movs	r2, #48	@ 0x30
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f005 fb5e 	bl	800705c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	4b28      	ldr	r3, [pc, #160]	@ (8001a58 <SystemClock_Config+0xcc>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	4a27      	ldr	r2, [pc, #156]	@ (8001a58 <SystemClock_Config+0xcc>)
 80019ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019be:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c0:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <SystemClock_Config+0xcc>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <SystemClock_Config+0xd0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a21      	ldr	r2, [pc, #132]	@ (8001a5c <SystemClock_Config+0xd0>)
 80019d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a5c <SystemClock_Config+0xd0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e8:	2301      	movs	r3, #1
 80019ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f2:	2302      	movs	r3, #2
 80019f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019fc:	2308      	movs	r3, #8
 80019fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a00:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001a04:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a06:	2302      	movs	r3, #2
 8001a08:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 fe86 	bl	8005724 <HAL_RCC_OscConfig>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a1e:	f000 fb55 	bl	80020cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a22:	230f      	movs	r3, #15
 8001a24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a26:	2302      	movs	r3, #2
 8001a28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a2e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	2105      	movs	r1, #5
 8001a40:	4618      	mov	r0, r3
 8001a42:	f004 f8e7 	bl	8005c14 <HAL_RCC_ClockConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a4c:	f000 fb3e 	bl	80020cc <Error_Handler>
  }
}
 8001a50:	bf00      	nop
 8001a52:	3750      	adds	r7, #80	@ 0x50
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40007000 	.word	0x40007000

08001a60 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <MX_I2C3_Init+0x74>)
 8001a66:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad8 <MX_I2C3_Init+0x78>)
 8001a68:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <MX_I2C3_Init+0x74>)
 8001a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001adc <MX_I2C3_Init+0x7c>)
 8001a6e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a70:	4b18      	ldr	r3, [pc, #96]	@ (8001ad4 <MX_I2C3_Init+0x74>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a76:	4b17      	ldr	r3, [pc, #92]	@ (8001ad4 <MX_I2C3_Init+0x74>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	@ (8001ad4 <MX_I2C3_Init+0x74>)
 8001a7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a82:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a84:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <MX_I2C3_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <MX_I2C3_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a90:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <MX_I2C3_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <MX_I2C3_Init+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a9c:	480d      	ldr	r0, [pc, #52]	@ (8001ad4 <MX_I2C3_Init+0x74>)
 8001a9e:	f002 fafb 	bl	8004098 <HAL_I2C_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001aa8:	f000 fb10 	bl	80020cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aac:	2100      	movs	r1, #0
 8001aae:	4809      	ldr	r0, [pc, #36]	@ (8001ad4 <MX_I2C3_Init+0x74>)
 8001ab0:	f003 fb16 	bl	80050e0 <HAL_I2CEx_ConfigAnalogFilter>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001aba:	f000 fb07 	bl	80020cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4804      	ldr	r0, [pc, #16]	@ (8001ad4 <MX_I2C3_Init+0x74>)
 8001ac2:	f003 fb49 	bl	8005158 <HAL_I2CEx_ConfigDigitalFilter>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001acc:	f000 fafe 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20025a0c 	.word	0x20025a0c
 8001ad8:	40005c00 	.word	0x40005c00
 8001adc:	000186a0 	.word	0x000186a0

08001ae0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b09a      	sub	sp, #104	@ 0x68
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001ae6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001aea:	2234      	movs	r2, #52	@ 0x34
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f005 fab4 	bl	800705c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001af4:	463b      	mov	r3, r7
 8001af6:	2234      	movs	r2, #52	@ 0x34
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f005 faae 	bl	800705c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001b00:	4b4e      	ldr	r3, [pc, #312]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001b02:	4a4f      	ldr	r2, [pc, #316]	@ (8001c40 <MX_LTDC_Init+0x160>)
 8001b04:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b06:	4b4d      	ldr	r3, [pc, #308]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b12:	4b4a      	ldr	r3, [pc, #296]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b18:	4b48      	ldr	r3, [pc, #288]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001b1e:	4b47      	ldr	r3, [pc, #284]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001b20:	2207      	movs	r2, #7
 8001b22:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001b24:	4b45      	ldr	r3, [pc, #276]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001b26:	2203      	movs	r2, #3
 8001b28:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001b2a:	4b44      	ldr	r3, [pc, #272]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001b2c:	220e      	movs	r2, #14
 8001b2e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001b30:	4b42      	ldr	r3, [pc, #264]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001b32:	2205      	movs	r2, #5
 8001b34:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001b36:	4b41      	ldr	r3, [pc, #260]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001b38:	f240 228e 	movw	r2, #654	@ 0x28e
 8001b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001b3e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001b40:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001b44:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001b46:	4b3d      	ldr	r3, [pc, #244]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001b48:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001b50:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001b54:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001b56:	4b39      	ldr	r3, [pc, #228]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001b5e:	4b37      	ldr	r3, [pc, #220]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001b66:	4b35      	ldr	r3, [pc, #212]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b6e:	4833      	ldr	r0, [pc, #204]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001b70:	f003 fb32 	bl	80051d8 <HAL_LTDC_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001b7a:	f000 faa7 	bl	80020cc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b9e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001ba0:	2305      	movs	r3, #5
 8001ba2:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001bc2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	4619      	mov	r1, r3
 8001bca:	481c      	ldr	r0, [pc, #112]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001bcc:	f003 fbd4 	bl	8005378 <HAL_LTDC_ConfigLayer>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001bd6:	f000 fa79 	bl	80020cc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bfa:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001bfc:	2305      	movs	r3, #5
 8001bfe:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001c1e:	463b      	mov	r3, r7
 8001c20:	2201      	movs	r2, #1
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <MX_LTDC_Init+0x15c>)
 8001c26:	f003 fba7 	bl	8005378 <HAL_LTDC_ConfigLayer>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001c30:	f000 fa4c 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	3768      	adds	r7, #104	@ 0x68
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20025a60 	.word	0x20025a60
 8001c40:	40016800 	.word	0x40016800

08001c44 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <MX_RNG_Init+0x20>)
 8001c4a:	4a07      	ldr	r2, [pc, #28]	@ (8001c68 <MX_RNG_Init+0x24>)
 8001c4c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001c4e:	4805      	ldr	r0, [pc, #20]	@ (8001c64 <MX_RNG_Init+0x20>)
 8001c50:	f004 fbac 	bl	80063ac <HAL_RNG_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001c5a:	f000 fa37 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200259fc 	.word	0x200259fc
 8001c68:	50060800 	.word	0x50060800

08001c6c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001c70:	4b17      	ldr	r3, [pc, #92]	@ (8001cd0 <MX_SPI5_Init+0x64>)
 8001c72:	4a18      	ldr	r2, [pc, #96]	@ (8001cd4 <MX_SPI5_Init+0x68>)
 8001c74:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001c76:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <MX_SPI5_Init+0x64>)
 8001c78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c7c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001c7e:	4b14      	ldr	r3, [pc, #80]	@ (8001cd0 <MX_SPI5_Init+0x64>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c84:	4b12      	ldr	r3, [pc, #72]	@ (8001cd0 <MX_SPI5_Init+0x64>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c8a:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <MX_SPI5_Init+0x64>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c90:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd0 <MX_SPI5_Init+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001c96:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <MX_SPI5_Init+0x64>)
 8001c98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c9c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd0 <MX_SPI5_Init+0x64>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <MX_SPI5_Init+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001caa:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <MX_SPI5_Init+0x64>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb0:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <MX_SPI5_Init+0x64>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <MX_SPI5_Init+0x64>)
 8001cb8:	220a      	movs	r2, #10
 8001cba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001cbc:	4804      	ldr	r0, [pc, #16]	@ (8001cd0 <MX_SPI5_Init+0x64>)
 8001cbe:	f004 fbf5 	bl	80064ac <HAL_SPI_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001cc8:	f000 fa00 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20025b08 	.word	0x20025b08
 8001cd4:	40015000 	.word	0x40015000

08001cd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cde:	f107 0308 	add.w	r3, r7, #8
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cec:	463b      	mov	r3, r7
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <MX_TIM2_Init+0x94>)
 8001cf6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <MX_TIM2_Init+0x94>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d02:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <MX_TIM2_Init+0x94>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d08:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <MX_TIM2_Init+0x94>)
 8001d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d10:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <MX_TIM2_Init+0x94>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d16:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <MX_TIM2_Init+0x94>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d1c:	4813      	ldr	r0, [pc, #76]	@ (8001d6c <MX_TIM2_Init+0x94>)
 8001d1e:	f004 fea5 	bl	8006a6c <HAL_TIM_Base_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d28:	f000 f9d0 	bl	80020cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d32:	f107 0308 	add.w	r3, r7, #8
 8001d36:	4619      	mov	r1, r3
 8001d38:	480c      	ldr	r0, [pc, #48]	@ (8001d6c <MX_TIM2_Init+0x94>)
 8001d3a:	f004 fee6 	bl	8006b0a <HAL_TIM_ConfigClockSource>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d44:	f000 f9c2 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d50:	463b      	mov	r3, r7
 8001d52:	4619      	mov	r1, r3
 8001d54:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <MX_TIM2_Init+0x94>)
 8001d56:	f005 f8e5 	bl	8006f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d60:	f000 f9b4 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d64:	bf00      	nop
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20025b60 	.word	0x20025b60

08001d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08e      	sub	sp, #56	@ 0x38
 8001d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
 8001d84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	623b      	str	r3, [r7, #32]
 8001d8a:	4bb2      	ldr	r3, [pc, #712]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	4ab1      	ldr	r2, [pc, #708]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d96:	4baf      	ldr	r3, [pc, #700]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	623b      	str	r3, [r7, #32]
 8001da0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	4bab      	ldr	r3, [pc, #684]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	4aaa      	ldr	r2, [pc, #680]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001dac:	f043 0320 	orr.w	r3, r3, #32
 8001db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db2:	4ba8      	ldr	r3, [pc, #672]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	4ba4      	ldr	r3, [pc, #656]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	4aa3      	ldr	r2, [pc, #652]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dce:	4ba1      	ldr	r3, [pc, #644]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	4b9d      	ldr	r3, [pc, #628]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	4a9c      	ldr	r2, [pc, #624]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dea:	4b9a      	ldr	r3, [pc, #616]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b96      	ldr	r3, [pc, #600]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	4a95      	ldr	r2, [pc, #596]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e06:	4b93      	ldr	r3, [pc, #588]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b8f      	ldr	r3, [pc, #572]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	4a8e      	ldr	r2, [pc, #568]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001e1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e22:	4b8c      	ldr	r3, [pc, #560]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	4b88      	ldr	r3, [pc, #544]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	4a87      	ldr	r2, [pc, #540]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001e38:	f043 0310 	orr.w	r3, r3, #16
 8001e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3e:	4b85      	ldr	r3, [pc, #532]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	4b81      	ldr	r3, [pc, #516]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4a80      	ldr	r2, [pc, #512]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001e54:	f043 0308 	orr.w	r3, r3, #8
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4b7e      	ldr	r3, [pc, #504]	@ (8002054 <MX_GPIO_Init+0x2e4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2116      	movs	r1, #22
 8001e6a:	487b      	ldr	r0, [pc, #492]	@ (8002058 <MX_GPIO_Init+0x2e8>)
 8001e6c:	f002 f8e2 	bl	8004034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2180      	movs	r1, #128	@ 0x80
 8001e74:	4879      	ldr	r0, [pc, #484]	@ (800205c <MX_GPIO_Init+0x2ec>)
 8001e76:	f002 f8dd 	bl	8004034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001e80:	4877      	ldr	r0, [pc, #476]	@ (8002060 <MX_GPIO_Init+0x2f0>)
 8001e82:	f002 f8d7 	bl	8004034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001e8c:	4875      	ldr	r0, [pc, #468]	@ (8002064 <MX_GPIO_Init+0x2f4>)
 8001e8e:	f002 f8d1 	bl	8004034 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001e92:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ea4:	230c      	movs	r3, #12
 8001ea6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eac:	4619      	mov	r1, r3
 8001eae:	486e      	ldr	r0, [pc, #440]	@ (8002068 <MX_GPIO_Init+0x2f8>)
 8001eb0:	f001 fdf0 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ec4:	230c      	movs	r3, #12
 8001ec6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001ec8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4862      	ldr	r0, [pc, #392]	@ (8002058 <MX_GPIO_Init+0x2e8>)
 8001ed0:	f001 fde0 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001ed4:	2316      	movs	r3, #22
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee8:	4619      	mov	r1, r3
 8001eea:	485b      	ldr	r0, [pc, #364]	@ (8002058 <MX_GPIO_Init+0x2e8>)
 8001eec:	f001 fdd2 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001ef0:	f248 0306 	movw	r3, #32774	@ 0x8006
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ef6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001efa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f04:	4619      	mov	r1, r3
 8001f06:	4855      	ldr	r0, [pc, #340]	@ (800205c <MX_GPIO_Init+0x2ec>)
 8001f08:	f001 fdc4 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f10:	2301      	movs	r3, #1
 8001f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001f1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f20:	4619      	mov	r1, r3
 8001f22:	484e      	ldr	r0, [pc, #312]	@ (800205c <MX_GPIO_Init+0x2ec>)
 8001f24:	f001 fdb6 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001f28:	2320      	movs	r3, #32
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f2c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001f30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4846      	ldr	r0, [pc, #280]	@ (8002058 <MX_GPIO_Init+0x2e8>)
 8001f3e:	f001 fda9 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001f42:	2304      	movs	r3, #4
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f46:	2300      	movs	r3, #0
 8001f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f52:	4619      	mov	r1, r3
 8001f54:	4845      	ldr	r0, [pc, #276]	@ (800206c <MX_GPIO_Init+0x2fc>)
 8001f56:	f001 fd9d 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001f5a:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001f5e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f74:	4619      	mov	r1, r3
 8001f76:	483b      	ldr	r0, [pc, #236]	@ (8002064 <MX_GPIO_Init+0x2f4>)
 8001f78:	f001 fd8c 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001f7c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f8e:	230c      	movs	r3, #12
 8001f90:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f96:	4619      	mov	r1, r3
 8001f98:	4835      	ldr	r0, [pc, #212]	@ (8002070 <MX_GPIO_Init+0x300>)
 8001f9a:	f001 fd7b 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001f9e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2300      	movs	r3, #0
 8001fae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001fb0:	230c      	movs	r3, #12
 8001fb2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fb8:	4619      	mov	r1, r3
 8001fba:	482c      	ldr	r0, [pc, #176]	@ (800206c <MX_GPIO_Init+0x2fc>)
 8001fbc:	f001 fd6a 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001fc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001fce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4825      	ldr	r0, [pc, #148]	@ (800206c <MX_GPIO_Init+0x2fc>)
 8001fd6:	f001 fd5d 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001fda:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fec:	230c      	movs	r3, #12
 8001fee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	481a      	ldr	r0, [pc, #104]	@ (8002060 <MX_GPIO_Init+0x2f0>)
 8001ff8:	f001 fd4c 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001ffc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002002:	2300      	movs	r3, #0
 8002004:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800200a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800200e:	4619      	mov	r1, r3
 8002010:	4813      	ldr	r0, [pc, #76]	@ (8002060 <MX_GPIO_Init+0x2f0>)
 8002012:	f001 fd3f 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002016:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201c:	2301      	movs	r3, #1
 800201e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800202c:	4619      	mov	r1, r3
 800202e:	480c      	ldr	r0, [pc, #48]	@ (8002060 <MX_GPIO_Init+0x2f0>)
 8002030:	f001 fd30 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002034:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002042:	2303      	movs	r3, #3
 8002044:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002046:	2307      	movs	r3, #7
 8002048:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800204e:	4619      	mov	r1, r3
 8002050:	e010      	b.n	8002074 <MX_GPIO_Init+0x304>
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	40020800 	.word	0x40020800
 800205c:	40020000 	.word	0x40020000
 8002060:	40020c00 	.word	0x40020c00
 8002064:	40021800 	.word	0x40021800
 8002068:	40021400 	.word	0x40021400
 800206c:	40020400 	.word	0x40020400
 8002070:	40021000 	.word	0x40021000
 8002074:	4812      	ldr	r0, [pc, #72]	@ (80020c0 <MX_GPIO_Init+0x350>)
 8002076:	f001 fd0d 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800207a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002080:	2301      	movs	r3, #1
 8002082:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002088:	2300      	movs	r3, #0
 800208a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800208c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002090:	4619      	mov	r1, r3
 8002092:	480c      	ldr	r0, [pc, #48]	@ (80020c4 <MX_GPIO_Init+0x354>)
 8002094:	f001 fcfe 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002098:	2360      	movs	r3, #96	@ 0x60
 800209a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020a8:	230c      	movs	r3, #12
 80020aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020b0:	4619      	mov	r1, r3
 80020b2:	4805      	ldr	r0, [pc, #20]	@ (80020c8 <MX_GPIO_Init+0x358>)
 80020b4:	f001 fcee 	bl	8003a94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020b8:	bf00      	nop
 80020ba:	3738      	adds	r7, #56	@ 0x38
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40020000 	.word	0x40020000
 80020c4:	40021800 	.word	0x40021800
 80020c8:	40020400 	.word	0x40020400

080020cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020d0:	b672      	cpsid	i
}
 80020d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <Error_Handler+0x8>

080020d8 <StartScreen>:
#define CELL_SPACING 4 // Smaller = more compact grid
#define ANCHOR_X 75    // Right edge base X
#define ANCHOR_Y 100   // Top edge base Y

void StartScreen(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_BLACK);
 80020de:	2100      	movs	r1, #0
 80020e0:	2000      	movs	r0, #0
 80020e2:	f7fe fcaf 	bl	8000a44 <LCD_Clear>
    LCD_SetTextColor(LCD_COLOR_YELLOW);
 80020e6:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 80020ea:	f7fe fccd 	bl	8000a88 <LCD_SetTextColor>

    // Title background
    for (int y = 60; y < 260; y++)
 80020ee:	233c      	movs	r3, #60	@ 0x3c
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	e014      	b.n	800211e <StartScreen+0x46>
    {
        for (int x = 5; x < 45; x++)
 80020f4:	2305      	movs	r3, #5
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	e00b      	b.n	8002112 <StartScreen+0x3a>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_RED);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	b291      	uxth	r1, r2
 8002102:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fc08 	bl	800091c <LCD_Draw_Pixel>
        for (int x = 5; x < 45; x++)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	3301      	adds	r3, #1
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	2b2c      	cmp	r3, #44	@ 0x2c
 8002116:	ddf0      	ble.n	80020fa <StartScreen+0x22>
    for (int y = 60; y < 260; y++)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3301      	adds	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002124:	dbe6      	blt.n	80020f4 <StartScreen+0x1c>
        }
    }

    LCD_SetTextColor(LCD_COLOR_BLACK);
 8002126:	2000      	movs	r0, #0
 8002128:	f7fe fcae 	bl	8000a88 <LCD_SetTextColor>

    // 1P button
    for (int y = 90; y < 230; y++)
 800212c:	235a      	movs	r3, #90	@ 0x5a
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	e014      	b.n	800215c <StartScreen+0x84>
    {
        for (int x = 60; x < 100; x++)
 8002132:	233c      	movs	r3, #60	@ 0x3c
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	e00b      	b.n	8002150 <StartScreen+0x78>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_YELLOW);
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	b29b      	uxth	r3, r3
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	b291      	uxth	r1, r2
 8002140:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fbe9 	bl	800091c <LCD_Draw_Pixel>
        for (int x = 60; x < 100; x++)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	3301      	adds	r3, #1
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b63      	cmp	r3, #99	@ 0x63
 8002154:	ddf0      	ble.n	8002138 <StartScreen+0x60>
    for (int y = 90; y < 230; y++)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3301      	adds	r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2be5      	cmp	r3, #229	@ 0xe5
 8002160:	dde7      	ble.n	8002132 <StartScreen+0x5a>
        }
    }

    // 2P button
    for (int y = 90; y < 230; y++)
 8002162:	235a      	movs	r3, #90	@ 0x5a
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	e014      	b.n	8002192 <StartScreen+0xba>
    {
        for (int x = 120; x < 160; x++)
 8002168:	2378      	movs	r3, #120	@ 0x78
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	e00b      	b.n	8002186 <StartScreen+0xae>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_RED);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	b291      	uxth	r1, r2
 8002176:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fbce 	bl	800091c <LCD_Draw_Pixel>
        for (int x = 120; x < 160; x++)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	3301      	adds	r3, #1
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b9f      	cmp	r3, #159	@ 0x9f
 800218a:	ddf0      	ble.n	800216e <StartScreen+0x96>
    for (int y = 90; y < 230; y++)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3301      	adds	r3, #1
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2be5      	cmp	r3, #229	@ 0xe5
 8002196:	dde7      	ble.n	8002168 <StartScreen+0x90>
        }
    }

    LCD_DisplayString(70, 15, (uint8_t *)"CONNECT FOUR", CENTER_MODE);
 8002198:	2301      	movs	r3, #1
 800219a:	4a10      	ldr	r2, [pc, #64]	@ (80021dc <StartScreen+0x104>)
 800219c:	210f      	movs	r1, #15
 800219e:	2046      	movs	r0, #70	@ 0x46
 80021a0:	f7fe fd06 	bl	8000bb0 <LCD_DisplayString>
    LCD_DisplayString(100, 70, (uint8_t *)"1 PLAYER", CENTER_MODE);
 80021a4:	2301      	movs	r3, #1
 80021a6:	4a0e      	ldr	r2, [pc, #56]	@ (80021e0 <StartScreen+0x108>)
 80021a8:	2146      	movs	r1, #70	@ 0x46
 80021aa:	2064      	movs	r0, #100	@ 0x64
 80021ac:	f7fe fd00 	bl	8000bb0 <LCD_DisplayString>
    LCD_DisplayString(100, 130, (uint8_t *)"2 PLAYER", CENTER_MODE);
 80021b0:	2301      	movs	r3, #1
 80021b2:	4a0c      	ldr	r2, [pc, #48]	@ (80021e4 <StartScreen+0x10c>)
 80021b4:	2182      	movs	r1, #130	@ 0x82
 80021b6:	2064      	movs	r0, #100	@ 0x64
 80021b8:	f7fe fcfa 	bl	8000bb0 <LCD_DisplayString>
    LCD_SetTextColor(LCD_COLOR_WHITE);
 80021bc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80021c0:	f7fe fc62 	bl	8000a88 <LCD_SetTextColor>
    LCD_DisplayString(5, 215, (uint8_t *)"Brandon Schuster", LEFT_MODE);
 80021c4:	2300      	movs	r3, #0
 80021c6:	4a08      	ldr	r2, [pc, #32]	@ (80021e8 <StartScreen+0x110>)
 80021c8:	21d7      	movs	r1, #215	@ 0xd7
 80021ca:	2005      	movs	r0, #5
 80021cc:	f7fe fcf0 	bl	8000bb0 <LCD_DisplayString>
    DrawDebugBug(); // My attempt at a debug icon
 80021d0:	f000 fb7a 	bl	80028c8 <DrawDebugBug>
}
 80021d4:	bf00      	nop
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	08007974 	.word	0x08007974
 80021e0:	08007984 	.word	0x08007984
 80021e4:	08007990 	.word	0x08007990
 80021e8:	0800799c 	.word	0x0800799c

080021ec <GameScreen>:

void GameScreen(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
    // Blue board
    for (int y = 50; y < 265; y++)
 80021f2:	2332      	movs	r3, #50	@ 0x32
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	e014      	b.n	8002222 <GameScreen+0x36>
    {
        for (int x = 55; x < 240; x++)
 80021f8:	2337      	movs	r3, #55	@ 0x37
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	e00b      	b.n	8002216 <GameScreen+0x2a>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_BLUE2);
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	b29b      	uxth	r3, r3
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	b291      	uxth	r1, r2
 8002206:	f240 521f 	movw	r2, #1311	@ 0x51f
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fb86 	bl	800091c <LCD_Draw_Pixel>
        for (int x = 55; x < 240; x++)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	3301      	adds	r3, #1
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2bef      	cmp	r3, #239	@ 0xef
 800221a:	ddf0      	ble.n	80021fe <GameScreen+0x12>
    for (int y = 50; y < 265; y++)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3301      	adds	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8002228:	dde6      	ble.n	80021f8 <GameScreen+0xc>
        }
    }
    // Slots and pieces placed already
    for (int r = 0; r < ROWS; r++)
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e032      	b.n	8002296 <GameScreen+0xaa>
    {
        for (int c = 0; c < COLS; c++)
 8002230:	2300      	movs	r3, #0
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	e029      	b.n	800228a <GameScreen+0x9e>
        {
            uint16_t color = LCD_COLOR_BLACK;
 8002236:	2300      	movs	r3, #0
 8002238:	80fb      	strh	r3, [r7, #6]

            if (board[r][c] == RED)
 800223a:	491b      	ldr	r1, [pc, #108]	@ (80022a8 <GameScreen+0xbc>)
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	18ca      	adds	r2, r1, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	4413      	add	r3, r2
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d103      	bne.n	8002258 <GameScreen+0x6c>
                color = LCD_COLOR_RED;
 8002250:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002254:	80fb      	strh	r3, [r7, #6]
 8002256:	e00d      	b.n	8002274 <GameScreen+0x88>
            else if (board[r][c] == YELLOW)
 8002258:	4913      	ldr	r1, [pc, #76]	@ (80022a8 <GameScreen+0xbc>)
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	18ca      	adds	r2, r1, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4413      	add	r3, r2
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d102      	bne.n	8002274 <GameScreen+0x88>
                color = LCD_COLOR_YELLOW;
 800226e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002272:	80fb      	strh	r3, [r7, #6]

            DrawCircleAtCell(r, COLS - 1 - c, color);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f1c3 0306 	rsb	r3, r3, #6
 800227a:	88fa      	ldrh	r2, [r7, #6]
 800227c:	4619      	mov	r1, r3
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f814 	bl	80022ac <DrawCircleAtCell>
        for (int c = 0; c < COLS; c++)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	3301      	adds	r3, #1
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b06      	cmp	r3, #6
 800228e:	ddd2      	ble.n	8002236 <GameScreen+0x4a>
    for (int r = 0; r < ROWS; r++)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3301      	adds	r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b05      	cmp	r3, #5
 800229a:	ddc9      	ble.n	8002230 <GameScreen+0x44>
        }
    }
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20025974 	.word	0x20025974

080022ac <DrawCircleAtCell>:

void DrawCircleAtCell(int col, int row, uint16_t color)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	4613      	mov	r3, r2
 80022b8:	80fb      	strh	r3, [r7, #6]
    int x = ANCHOR_X + col * CELL_SIZE;              // Move left per column
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	334b      	adds	r3, #75	@ 0x4b
 80022c6:	617b      	str	r3, [r7, #20]
    int y = ANCHOR_Y + (ROWS - 1 - row) * CELL_SIZE; // Move down per row
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f1c3 0205 	rsb	r2, r3, #5
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	3364      	adds	r3, #100	@ 0x64
 80022d8:	613b      	str	r3, [r7, #16]
    LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, color);
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	b298      	uxth	r0, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	b299      	uxth	r1, r3
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	220c      	movs	r2, #12
 80022e6:	f7fe fb59 	bl	800099c <LCD_Draw_Circle_Fill>
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <DrawToken>:

void DrawToken(int row, int col, uint8_t player)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b086      	sub	sp, #24
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	4613      	mov	r3, r2
 80022fe:	71fb      	strb	r3, [r7, #7]
    uint16_t color = LCD_COLOR_WHITE;
 8002300:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002304:	82fb      	strh	r3, [r7, #22]

    if (player == RED)
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d103      	bne.n	8002314 <DrawToken+0x22>
    {
        color = LCD_COLOR_RED;
 800230c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002310:	82fb      	strh	r3, [r7, #22]
 8002312:	e005      	b.n	8002320 <DrawToken+0x2e>
    }
    else if (player == YELLOW)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d102      	bne.n	8002320 <DrawToken+0x2e>
    {
        color = LCD_COLOR_YELLOW;
 800231a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800231e:	82fb      	strh	r3, [r7, #22]
    }

    DrawCircleAtCell(row, col, color);
 8002320:	8afb      	ldrh	r3, [r7, #22]
 8002322:	461a      	mov	r2, r3
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f7ff ffc0 	bl	80022ac <DrawCircleAtCell>
}
 800232c:	bf00      	nop
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <DrawCursor>:

void DrawCursor(int currentCol, uint8_t currentPlayer)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	70fb      	strb	r3, [r7, #3]
    uint16_t color = (currentPlayer == RED) ? LCD_COLOR_RED : LCD_COLOR_YELLOW;
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d102      	bne.n	800234c <DrawCursor+0x18>
 8002346:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800234a:	e001      	b.n	8002350 <DrawCursor+0x1c>
 800234c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002350:	82fb      	strh	r3, [r7, #22]

    // Draw hovering above +2 rows
    int row = ROWS + 2;
 8002352:	2308      	movs	r3, #8
 8002354:	613b      	str	r3, [r7, #16]

    int drawRow = currentCol;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	60fb      	str	r3, [r7, #12]
    int drawCol = COLS - 1 - row;
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f1c3 0306 	rsb	r3, r3, #6
 8002360:	60bb      	str	r3, [r7, #8]

    DrawCircleAtCell(drawCol, drawRow, color);
 8002362:	8afb      	ldrh	r3, [r7, #22]
 8002364:	461a      	mov	r2, r3
 8002366:	68f9      	ldr	r1, [r7, #12]
 8002368:	68b8      	ldr	r0, [r7, #8]
 800236a:	f7ff ff9f 	bl	80022ac <DrawCircleAtCell>
}
 800236e:	bf00      	nop
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <EraseCursor>:

void EraseCursor(int col)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
    int offset = -2;
 800237e:	f06f 0301 	mvn.w	r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
    DrawCircleAtCell(offset, col, LCD_COLOR_BLACK);
 8002384:	2200      	movs	r2, #0
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f7ff ff8f 	bl	80022ac <DrawCircleAtCell>
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <EndScreen>:

void EndScreen(uint8_t winner, uint32_t duration_ms, int redWins, int yellowWins)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b09c      	sub	sp, #112	@ 0x70
 800239c:	af00      	add	r7, sp, #0
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	4603      	mov	r3, r0
 80023a6:	73fb      	strb	r3, [r7, #15]
    LCD_Clear(0, LCD_COLOR_BLACK);
 80023a8:	2100      	movs	r1, #0
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7fe fb4a 	bl	8000a44 <LCD_Clear>
    LCD_SetTextColor(LCD_COLOR_WHITE);
 80023b0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80023b4:	f7fe fb68 	bl	8000a88 <LCD_SetTextColor>

    // Draw winner message
    if (winner == RED)
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d106      	bne.n	80023cc <EndScreen+0x34>
    {
        LCD_DisplayString(50, 20, (uint8_t *)"Red Wins!", LEFT_MODE);
 80023be:	2300      	movs	r3, #0
 80023c0:	4a5c      	ldr	r2, [pc, #368]	@ (8002534 <EndScreen+0x19c>)
 80023c2:	2114      	movs	r1, #20
 80023c4:	2032      	movs	r0, #50	@ 0x32
 80023c6:	f7fe fbf3 	bl	8000bb0 <LCD_DisplayString>
 80023ca:	e00f      	b.n	80023ec <EndScreen+0x54>
    }
    else if (winner == YELLOW)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d106      	bne.n	80023e0 <EndScreen+0x48>
    {
        LCD_DisplayString(50, 20, (uint8_t *)"Yellow Wins!", LEFT_MODE);
 80023d2:	2300      	movs	r3, #0
 80023d4:	4a58      	ldr	r2, [pc, #352]	@ (8002538 <EndScreen+0x1a0>)
 80023d6:	2114      	movs	r1, #20
 80023d8:	2032      	movs	r0, #50	@ 0x32
 80023da:	f7fe fbe9 	bl	8000bb0 <LCD_DisplayString>
 80023de:	e005      	b.n	80023ec <EndScreen+0x54>
    }
    else
    {
        LCD_DisplayString(50, 20, (uint8_t *)"It's a Draw!", LEFT_MODE);
 80023e0:	2300      	movs	r3, #0
 80023e2:	4a56      	ldr	r2, [pc, #344]	@ (800253c <EndScreen+0x1a4>)
 80023e4:	2114      	movs	r1, #20
 80023e6:	2032      	movs	r0, #50	@ 0x32
 80023e8:	f7fe fbe2 	bl	8000bb0 <LCD_DisplayString>
    }

    // Draw duration
    char durationMessage[32];
    sprintf(durationMessage, "Time: %lu.%03lus sec", duration_ms / 1000, duration_ms % 1000);
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4a54      	ldr	r2, [pc, #336]	@ (8002540 <EndScreen+0x1a8>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	0999      	lsrs	r1, r3, #6
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	4b51      	ldr	r3, [pc, #324]	@ (8002540 <EndScreen+0x1a8>)
 80023fa:	fba3 0302 	umull	r0, r3, r3, r2
 80023fe:	099b      	lsrs	r3, r3, #6
 8002400:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002404:	fb00 f303 	mul.w	r3, r0, r3
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800240e:	460a      	mov	r2, r1
 8002410:	494c      	ldr	r1, [pc, #304]	@ (8002544 <EndScreen+0x1ac>)
 8002412:	f004 fe03 	bl	800701c <siprintf>
    LCD_DisplayString(50, 60, (uint8_t *)durationMessage, LEFT_MODE);
 8002416:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800241a:	2300      	movs	r3, #0
 800241c:	213c      	movs	r1, #60	@ 0x3c
 800241e:	2032      	movs	r0, #50	@ 0x32
 8002420:	f7fe fbc6 	bl	8000bb0 <LCD_DisplayString>

    // Draw running score
    char scoreMessage[32];
    sprintf(scoreMessage, "Red: %d  Yellow: %d", redWins, yellowWins);
 8002424:	f107 001c 	add.w	r0, r7, #28
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	4946      	ldr	r1, [pc, #280]	@ (8002548 <EndScreen+0x1b0>)
 800242e:	f004 fdf5 	bl	800701c <siprintf>
    LCD_DisplayString(50, 100, (uint8_t *)scoreMessage, LEFT_MODE);
 8002432:	f107 021c 	add.w	r2, r7, #28
 8002436:	2300      	movs	r3, #0
 8002438:	2164      	movs	r1, #100	@ 0x64
 800243a:	2032      	movs	r0, #50	@ 0x32
 800243c:	f7fe fbb8 	bl	8000bb0 <LCD_DisplayString>

    LCD_SetTextColor(LCD_COLOR_BLACK);
 8002440:	2000      	movs	r0, #0
 8002442:	f7fe fb21 	bl	8000a88 <LCD_SetTextColor>
    // Draw Restart Button manually (green block)
    for (int y = 80; y < 240; y++)
 8002446:	2350      	movs	r3, #80	@ 0x50
 8002448:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800244a:	e014      	b.n	8002476 <EndScreen+0xde>
    {
        for (int x = 140; x < 170; x++)
 800244c:	238c      	movs	r3, #140	@ 0x8c
 800244e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002450:	e00b      	b.n	800246a <EndScreen+0xd2>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_GREEN);
 8002452:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002454:	b29b      	uxth	r3, r3
 8002456:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002458:	b291      	uxth	r1, r2
 800245a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fa5c 	bl	800091c <LCD_Draw_Pixel>
        for (int x = 140; x < 170; x++)
 8002464:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002466:	3301      	adds	r3, #1
 8002468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800246a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800246c:	2ba9      	cmp	r3, #169	@ 0xa9
 800246e:	ddf0      	ble.n	8002452 <EndScreen+0xba>
    for (int y = 80; y < 240; y++)
 8002470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002472:	3301      	adds	r3, #1
 8002474:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002478:	2bef      	cmp	r3, #239	@ 0xef
 800247a:	dde7      	ble.n	800244c <EndScreen+0xb4>
        }
    }
    LCD_DisplayString(85, 145, (uint8_t *)"Play Again", LEFT_MODE);
 800247c:	2300      	movs	r3, #0
 800247e:	4a33      	ldr	r2, [pc, #204]	@ (800254c <EndScreen+0x1b4>)
 8002480:	2191      	movs	r1, #145	@ 0x91
 8002482:	2055      	movs	r0, #85	@ 0x55
 8002484:	f7fe fb94 	bl	8000bb0 <LCD_DisplayString>

    // Draw Exit Button manually (red block)
    for (int y = 80; y < 240; y++)
 8002488:	2350      	movs	r3, #80	@ 0x50
 800248a:	667b      	str	r3, [r7, #100]	@ 0x64
 800248c:	e014      	b.n	80024b8 <EndScreen+0x120>
    {
        for (int x = 190; x < 220; x++)
 800248e:	23be      	movs	r3, #190	@ 0xbe
 8002490:	663b      	str	r3, [r7, #96]	@ 0x60
 8002492:	e00b      	b.n	80024ac <EndScreen+0x114>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_RED);
 8002494:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002496:	b29b      	uxth	r3, r3
 8002498:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800249a:	b291      	uxth	r1, r2
 800249c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe fa3b 	bl	800091c <LCD_Draw_Pixel>
        for (int x = 190; x < 220; x++)
 80024a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024a8:	3301      	adds	r3, #1
 80024aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80024ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024ae:	2bdb      	cmp	r3, #219	@ 0xdb
 80024b0:	ddf0      	ble.n	8002494 <EndScreen+0xfc>
    for (int y = 80; y < 240; y++)
 80024b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024b4:	3301      	adds	r3, #1
 80024b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80024b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024ba:	2bef      	cmp	r3, #239	@ 0xef
 80024bc:	dde7      	ble.n	800248e <EndScreen+0xf6>
        }
    }
    LCD_DisplayString(95, 195, (uint8_t *)"Main Menu", LEFT_MODE);
 80024be:	2300      	movs	r3, #0
 80024c0:	4a23      	ldr	r2, [pc, #140]	@ (8002550 <EndScreen+0x1b8>)
 80024c2:	21c3      	movs	r1, #195	@ 0xc3
 80024c4:	205f      	movs	r0, #95	@ 0x5f
 80024c6:	f7fe fb73 	bl	8000bb0 <LCD_DisplayString>

    while (1)
    {
        STMPE811_TouchData touch;
        touch.orientation = STMPE811_Orientation_Portrait_1;
 80024ca:	2300      	movs	r3, #0
 80024cc:	76bb      	strb	r3, [r7, #26]

        STMPE811_State_t state = STMPE811_ReadTouch(&touch);
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fe2c 	bl	8003130 <STMPE811_ReadTouch>
 80024d8:	4603      	mov	r3, r0
 80024da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

        if (state == STMPE811_State_Pressed)
 80024de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d121      	bne.n	800252a <EndScreen+0x192>
        {
            if (touch.x >= 140 && touch.x <= 170 && touch.y >= 80 && touch.y <= 240)
 80024e6:	8abb      	ldrh	r3, [r7, #20]
 80024e8:	2b8b      	cmp	r3, #139	@ 0x8b
 80024ea:	d90d      	bls.n	8002508 <EndScreen+0x170>
 80024ec:	8abb      	ldrh	r3, [r7, #20]
 80024ee:	2baa      	cmp	r3, #170	@ 0xaa
 80024f0:	d80a      	bhi.n	8002508 <EndScreen+0x170>
 80024f2:	8afb      	ldrh	r3, [r7, #22]
 80024f4:	2b4f      	cmp	r3, #79	@ 0x4f
 80024f6:	d907      	bls.n	8002508 <EndScreen+0x170>
 80024f8:	8afb      	ldrh	r3, [r7, #22]
 80024fa:	2bf0      	cmp	r3, #240	@ 0xf0
 80024fc:	d804      	bhi.n	8002508 <EndScreen+0x170>
            {
                HAL_Delay(200); // Debounce
 80024fe:	20c8      	movs	r0, #200	@ 0xc8
 8002500:	f001 f992 	bl	8003828 <HAL_Delay>
                Restart_Game();
 8002504:	f7fe fbcc 	bl	8000ca0 <Restart_Game>
            }

            if (touch.x >= 190 && touch.x <= 220 && touch.y >= 80 && touch.y <= 240)
 8002508:	8abb      	ldrh	r3, [r7, #20]
 800250a:	2bbd      	cmp	r3, #189	@ 0xbd
 800250c:	d90d      	bls.n	800252a <EndScreen+0x192>
 800250e:	8abb      	ldrh	r3, [r7, #20]
 8002510:	2bdc      	cmp	r3, #220	@ 0xdc
 8002512:	d80a      	bhi.n	800252a <EndScreen+0x192>
 8002514:	8afb      	ldrh	r3, [r7, #22]
 8002516:	2b4f      	cmp	r3, #79	@ 0x4f
 8002518:	d907      	bls.n	800252a <EndScreen+0x192>
 800251a:	8afb      	ldrh	r3, [r7, #22]
 800251c:	2bf0      	cmp	r3, #240	@ 0xf0
 800251e:	d804      	bhi.n	800252a <EndScreen+0x192>
            {
                HAL_Delay(200); // Debounce
 8002520:	20c8      	movs	r0, #200	@ 0xc8
 8002522:	f001 f981 	bl	8003828 <HAL_Delay>
                Start_Menu();
 8002526:	f7fe fbc7 	bl	8000cb8 <Start_Menu>
            }
        }

        HAL_Delay(50);
 800252a:	2032      	movs	r0, #50	@ 0x32
 800252c:	f001 f97c 	bl	8003828 <HAL_Delay>
    {
 8002530:	e7cb      	b.n	80024ca <EndScreen+0x132>
 8002532:	bf00      	nop
 8002534:	080079b0 	.word	0x080079b0
 8002538:	080079bc 	.word	0x080079bc
 800253c:	080079cc 	.word	0x080079cc
 8002540:	10624dd3 	.word	0x10624dd3
 8002544:	080079dc 	.word	0x080079dc
 8002548:	080079f4 	.word	0x080079f4
 800254c:	08007a08 	.word	0x08007a08
 8002550:	08007a14 	.word	0x08007a14

08002554 <Debug_Mode>:
    }
}

void Debug_Mode(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	@ 0x28
 8002558:	af00      	add	r7, sp, #0
    bool gridDrawn = false;
 800255a:	2300      	movs	r3, #0
 800255c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool cleanMode = false;
 8002560:	2300      	movs	r3, #0
 8002562:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    bool wasTouching = false;
 8002566:	2300      	movs	r3, #0
 8002568:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    uint32_t lastInteraction = HAL_GetTick(); // Track last interaction
 800256c:	f001 f950 	bl	8003810 <HAL_GetTick>
 8002570:	6238      	str	r0, [r7, #32]
    Point prev_p = {-1, -1};                  // Start invalid
 8002572:	4a65      	ldr	r2, [pc, #404]	@ (8002708 <Debug_Mode+0x1b4>)
 8002574:	f107 030c 	add.w	r3, r7, #12
 8002578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800257c:	e883 0003 	stmia.w	r3, {r0, r1}

    STMPE811_TouchData touch;
    touch.orientation = STMPE811_Orientation_Portrait_1;
 8002580:	2300      	movs	r3, #0
 8002582:	72bb      	strb	r3, [r7, #10]

    while (1)
    {
        STMPE811_State_t state = STMPE811_ReadTouch(&touch);
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fdd2 	bl	8003130 <STMPE811_ReadTouch>
 800258c:	4603      	mov	r3, r0
 800258e:	75fb      	strb	r3, [r7, #23]

        if (state == STMPE811_State_Pressed)
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d102      	bne.n	800259c <Debug_Mode+0x48>
        {
            lastInteraction = HAL_GetTick(); // Reset timeout on touch
 8002596:	f001 f93b 	bl	8003810 <HAL_GetTick>
 800259a:	6238      	str	r0, [r7, #32]
        }

        // Exit debug mode after 10 seconds of no interaction
        if (HAL_GetTick() - lastInteraction >= 5000)
 800259c:	f001 f938 	bl	8003810 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d904      	bls.n	80025b8 <Debug_Mode+0x64>
        {
            LCD_Clear(0, LCD_COLOR_BLACK);
 80025ae:	2100      	movs	r1, #0
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7fe fa47 	bl	8000a44 <LCD_Clear>
            return;
 80025b6:	e0a4      	b.n	8002702 <Debug_Mode+0x1ae>
        }

        // Draw grid once on entry
        if (!gridDrawn && !cleanMode)
 80025b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025bc:	f083 0301 	eor.w	r3, r3, #1
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <Debug_Mode+0x8a>
 80025c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80025ca:	f083 0301 	eor.w	r3, r3, #1
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d004      	beq.n	80025de <Debug_Mode+0x8a>
        {
            DrawDebugGrid();
 80025d4:	f000 f89a 	bl	800270c <DrawDebugGrid>
            gridDrawn = true;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        // On first touch, enter clean mode
        if (!cleanMode && state == STMPE811_State_Pressed)
 80025de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80025e2:	f083 0301 	eor.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d009      	beq.n	8002600 <Debug_Mode+0xac>
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <Debug_Mode+0xac>
        {
            cleanMode = true;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            LCD_Clear(0, LCD_COLOR_BLACK);
 80025f8:	2100      	movs	r1, #0
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7fe fa22 	bl	8000a44 <LCD_Clear>
        }

        if (cleanMode)
 8002600:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002604:	2b00      	cmp	r3, #0
 8002606:	d078      	beq.n	80026fa <Debug_Mode+0x1a6>
        {
            if (state == STMPE811_State_Pressed)
 8002608:	7dfb      	ldrb	r3, [r7, #23]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d15e      	bne.n	80026cc <Debug_Mode+0x178>
            {
                wasTouching = true;
 800260e:	2301      	movs	r3, #1
 8002610:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

                // Erase prev crosshair
                if (prev_p.x >= 0 && prev_p.y >= 0)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	db2b      	blt.n	8002672 <Debug_Mode+0x11e>
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	db28      	blt.n	8002672 <Debug_Mode+0x11e>
                {
                    for (uint16_t y = 0; y < LCD_PIXEL_HEIGHT; y++)
 8002620:	2300      	movs	r3, #0
 8002622:	83fb      	strh	r3, [r7, #30]
 8002624:	e009      	b.n	800263a <Debug_Mode+0xe6>
                    {
                        LCD_Draw_Pixel(prev_p.x, y, LCD_COLOR_BLACK);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	b29b      	uxth	r3, r3
 800262a:	8bf9      	ldrh	r1, [r7, #30]
 800262c:	2200      	movs	r2, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe f974 	bl	800091c <LCD_Draw_Pixel>
                    for (uint16_t y = 0; y < LCD_PIXEL_HEIGHT; y++)
 8002634:	8bfb      	ldrh	r3, [r7, #30]
 8002636:	3301      	adds	r3, #1
 8002638:	83fb      	strh	r3, [r7, #30]
 800263a:	8bfb      	ldrh	r3, [r7, #30]
 800263c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002640:	d3f1      	bcc.n	8002626 <Debug_Mode+0xd2>
                    }
                    for (uint16_t x = 0; x < LCD_PIXEL_WIDTH; x++)
 8002642:	2300      	movs	r3, #0
 8002644:	83bb      	strh	r3, [r7, #28]
 8002646:	e009      	b.n	800265c <Debug_Mode+0x108>
                    {
                        LCD_Draw_Pixel(x, prev_p.y, LCD_COLOR_BLACK);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	b299      	uxth	r1, r3
 800264c:	8bbb      	ldrh	r3, [r7, #28]
 800264e:	2200      	movs	r2, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f7fe f963 	bl	800091c <LCD_Draw_Pixel>
                    for (uint16_t x = 0; x < LCD_PIXEL_WIDTH; x++)
 8002656:	8bbb      	ldrh	r3, [r7, #28]
 8002658:	3301      	adds	r3, #1
 800265a:	83bb      	strh	r3, [r7, #28]
 800265c:	8bbb      	ldrh	r3, [r7, #28]
 800265e:	2bef      	cmp	r3, #239	@ 0xef
 8002660:	d9f2      	bls.n	8002648 <Debug_Mode+0xf4>
                    }
                    LCD_Draw_Circle_Fill(prev_p.x, prev_p.y, 4, LCD_COLOR_BLACK);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	b298      	uxth	r0, r3
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	b299      	uxth	r1, r3
 800266a:	2300      	movs	r3, #0
 800266c:	2204      	movs	r2, #4
 800266e:	f7fe f995 	bl	800099c <LCD_Draw_Circle_Fill>
                }

                // Draw new crosshair
                for (uint16_t y = 0; y < LCD_PIXEL_HEIGHT; y++)
 8002672:	2300      	movs	r3, #0
 8002674:	837b      	strh	r3, [r7, #26]
 8002676:	e009      	b.n	800268c <Debug_Mode+0x138>
                {
                    LCD_Draw_Pixel(touch.x, y, LCD_COLOR_GREEN);
 8002678:	88bb      	ldrh	r3, [r7, #4]
 800267a:	8b79      	ldrh	r1, [r7, #26]
 800267c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe f94b 	bl	800091c <LCD_Draw_Pixel>
                for (uint16_t y = 0; y < LCD_PIXEL_HEIGHT; y++)
 8002686:	8b7b      	ldrh	r3, [r7, #26]
 8002688:	3301      	adds	r3, #1
 800268a:	837b      	strh	r3, [r7, #26]
 800268c:	8b7b      	ldrh	r3, [r7, #26]
 800268e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002692:	d3f1      	bcc.n	8002678 <Debug_Mode+0x124>
                }
                for (uint16_t x = 0; x < LCD_PIXEL_WIDTH; x++)
 8002694:	2300      	movs	r3, #0
 8002696:	833b      	strh	r3, [r7, #24]
 8002698:	e009      	b.n	80026ae <Debug_Mode+0x15a>
                {
                    LCD_Draw_Pixel(x, touch.y, LCD_COLOR_GREEN);
 800269a:	88f9      	ldrh	r1, [r7, #6]
 800269c:	8b3b      	ldrh	r3, [r7, #24]
 800269e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe f93a 	bl	800091c <LCD_Draw_Pixel>
                for (uint16_t x = 0; x < LCD_PIXEL_WIDTH; x++)
 80026a8:	8b3b      	ldrh	r3, [r7, #24]
 80026aa:	3301      	adds	r3, #1
 80026ac:	833b      	strh	r3, [r7, #24]
 80026ae:	8b3b      	ldrh	r3, [r7, #24]
 80026b0:	2bef      	cmp	r3, #239	@ 0xef
 80026b2:	d9f2      	bls.n	800269a <Debug_Mode+0x146>
                }
                LCD_Draw_Circle_Fill(touch.x, touch.y, 4, LCD_COLOR_RED);
 80026b4:	88b8      	ldrh	r0, [r7, #4]
 80026b6:	88f9      	ldrh	r1, [r7, #6]
 80026b8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80026bc:	2204      	movs	r2, #4
 80026be:	f7fe f96d 	bl	800099c <LCD_Draw_Circle_Fill>

                // Save pos
                prev_p.x = touch.x;
 80026c2:	88bb      	ldrh	r3, [r7, #4]
 80026c4:	60fb      	str	r3, [r7, #12]
                prev_p.y = touch.y;
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	e016      	b.n	80026fa <Debug_Mode+0x1a6>
            }
            else if (wasTouching)
 80026cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d012      	beq.n	80026fa <Debug_Mode+0x1a6>
            {
                // If touch is released, then just reset back to debug grid
                cleanMode = false;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                gridDrawn = false;
 80026da:	2300      	movs	r3, #0
 80026dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                wasTouching = false;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                LCD_Clear(0, LCD_COLOR_BLACK);
 80026e6:	2100      	movs	r1, #0
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7fe f9ab 	bl	8000a44 <LCD_Clear>

                prev_p.x = -1;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
 80026f2:	60fb      	str	r3, [r7, #12]
                prev_p.y = -1;
 80026f4:	f04f 33ff 	mov.w	r3, #4294967295
 80026f8:	613b      	str	r3, [r7, #16]
            }
        }

        HAL_Delay(25); // Frame pacing
 80026fa:	2019      	movs	r0, #25
 80026fc:	f001 f894 	bl	8003828 <HAL_Delay>
    {
 8002700:	e740      	b.n	8002584 <Debug_Mode+0x30>
    }
}
 8002702:	3728      	adds	r7, #40	@ 0x28
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	08007a20 	.word	0x08007a20

0800270c <DrawDebugGrid>:

void DrawDebugGrid(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08c      	sub	sp, #48	@ 0x30
 8002710:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_BLACK);
 8002712:	2100      	movs	r1, #0
 8002714:	2000      	movs	r0, #0
 8002716:	f7fe f995 	bl	8000a44 <LCD_Clear>
    LCD_SetFont(&Font16x24);
 800271a:	4866      	ldr	r0, [pc, #408]	@ (80028b4 <DrawDebugGrid+0x1a8>)
 800271c:	f7fe f9c4 	bl	8000aa8 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_RED);
 8002720:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8002724:	f7fe f9b0 	bl	8000a88 <LCD_SetTextColor>

    // Center mark
    LCD_Draw_Circle_Fill(LCD_PIXEL_WIDTH / 2, LCD_PIXEL_HEIGHT / 2, 4, LCD_COLOR_GREEN);
 8002728:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800272c:	2204      	movs	r2, #4
 800272e:	21a0      	movs	r1, #160	@ 0xa0
 8002730:	2078      	movs	r0, #120	@ 0x78
 8002732:	f7fe f933 	bl	800099c <LCD_Draw_Circle_Fill>

    // Grid lines
    for (int x = 0; x < LCD_PIXEL_WIDTH; x += 20)
 8002736:	2300      	movs	r3, #0
 8002738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800273a:	e015      	b.n	8002768 <DrawDebugGrid+0x5c>
    {
        for (int y = 0; y < LCD_PIXEL_HEIGHT; y++)
 800273c:	2300      	movs	r3, #0
 800273e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002740:	e00b      	b.n	800275a <DrawDebugGrid+0x4e>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_GREY);
 8002742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002744:	b29b      	uxth	r3, r3
 8002746:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002748:	b291      	uxth	r1, r2
 800274a:	f24f 72de 	movw	r2, #63454	@ 0xf7de
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe f8e4 	bl	800091c <LCD_Draw_Pixel>
        for (int y = 0; y < LCD_PIXEL_HEIGHT; y++)
 8002754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002756:	3301      	adds	r3, #1
 8002758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800275a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002760:	dbef      	blt.n	8002742 <DrawDebugGrid+0x36>
    for (int x = 0; x < LCD_PIXEL_WIDTH; x += 20)
 8002762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002764:	3314      	adds	r3, #20
 8002766:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276a:	2bef      	cmp	r3, #239	@ 0xef
 800276c:	dde6      	ble.n	800273c <DrawDebugGrid+0x30>
        }
    }

    for (int y = 0; y < LCD_PIXEL_HEIGHT; y += 20)
 800276e:	2300      	movs	r3, #0
 8002770:	627b      	str	r3, [r7, #36]	@ 0x24
 8002772:	e014      	b.n	800279e <DrawDebugGrid+0x92>
    {
        for (int x = 0; x < LCD_PIXEL_WIDTH; x++)
 8002774:	2300      	movs	r3, #0
 8002776:	623b      	str	r3, [r7, #32]
 8002778:	e00b      	b.n	8002792 <DrawDebugGrid+0x86>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_GREY);
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	b29b      	uxth	r3, r3
 800277e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002780:	b291      	uxth	r1, r2
 8002782:	f24f 72de 	movw	r2, #63454	@ 0xf7de
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe f8c8 	bl	800091c <LCD_Draw_Pixel>
        for (int x = 0; x < LCD_PIXEL_WIDTH; x++)
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	3301      	adds	r3, #1
 8002790:	623b      	str	r3, [r7, #32]
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	2bef      	cmp	r3, #239	@ 0xef
 8002796:	ddf0      	ble.n	800277a <DrawDebugGrid+0x6e>
    for (int y = 0; y < LCD_PIXEL_HEIGHT; y += 20)
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	3314      	adds	r3, #20
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80027a4:	dbe6      	blt.n	8002774 <DrawDebugGrid+0x68>
        }
    }
    // Boxes behind coordinates
    for (int y = 0; y < 80; y++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e013      	b.n	80027d4 <DrawDebugGrid+0xc8>
    {
        for (int x = 0; x < 40; x++)
 80027ac:	2300      	movs	r3, #0
 80027ae:	61bb      	str	r3, [r7, #24]
 80027b0:	e00a      	b.n	80027c8 <DrawDebugGrid+0xbc>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_BLACK);
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	b291      	uxth	r1, r2
 80027ba:	2200      	movs	r2, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe f8ad 	bl	800091c <LCD_Draw_Pixel>
        for (int x = 0; x < 40; x++)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	3301      	adds	r3, #1
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2b27      	cmp	r3, #39	@ 0x27
 80027cc:	ddf1      	ble.n	80027b2 <DrawDebugGrid+0xa6>
    for (int y = 0; y < 80; y++)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3301      	adds	r3, #1
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	2b4f      	cmp	r3, #79	@ 0x4f
 80027d8:	dde8      	ble.n	80027ac <DrawDebugGrid+0xa0>
        }
    }

    for (int y = 221; y < 320; y++)
 80027da:	23dd      	movs	r3, #221	@ 0xdd
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	e013      	b.n	8002808 <DrawDebugGrid+0xfc>
    {
        for (int x = 0; x < 40; x++)
 80027e0:	2300      	movs	r3, #0
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	e00a      	b.n	80027fc <DrawDebugGrid+0xf0>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_BLACK);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	b291      	uxth	r1, r2
 80027ee:	2200      	movs	r2, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe f893 	bl	800091c <LCD_Draw_Pixel>
        for (int x = 0; x < 40; x++)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	3301      	adds	r3, #1
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	2b27      	cmp	r3, #39	@ 0x27
 8002800:	ddf1      	ble.n	80027e6 <DrawDebugGrid+0xda>
    for (int y = 221; y < 320; y++)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	3301      	adds	r3, #1
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800280e:	dbe7      	blt.n	80027e0 <DrawDebugGrid+0xd4>
        }
    }
    for (int y = 0; y < 100; y++)
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	e013      	b.n	800283e <DrawDebugGrid+0x132>
    {
        for (int x = 201; x < 240; x++)
 8002816:	23c9      	movs	r3, #201	@ 0xc9
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	e00a      	b.n	8002832 <DrawDebugGrid+0x126>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_BLACK);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	b29b      	uxth	r3, r3
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	b291      	uxth	r1, r2
 8002824:	2200      	movs	r2, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe f878 	bl	800091c <LCD_Draw_Pixel>
        for (int x = 201; x < 240; x++)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	3301      	adds	r3, #1
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2bef      	cmp	r3, #239	@ 0xef
 8002836:	ddf1      	ble.n	800281c <DrawDebugGrid+0x110>
    for (int y = 0; y < 100; y++)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3301      	adds	r3, #1
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b63      	cmp	r3, #99	@ 0x63
 8002842:	dde8      	ble.n	8002816 <DrawDebugGrid+0x10a>
        }
    }
    for (int y = 201; y < 320; y++)
 8002844:	23c9      	movs	r3, #201	@ 0xc9
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	e013      	b.n	8002872 <DrawDebugGrid+0x166>
    {
        for (int x = 201; x < 240; x++)
 800284a:	23c9      	movs	r3, #201	@ 0xc9
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	e00a      	b.n	8002866 <DrawDebugGrid+0x15a>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_BLACK);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	b291      	uxth	r1, r2
 8002858:	2200      	movs	r2, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe f85e 	bl	800091c <LCD_Draw_Pixel>
        for (int x = 201; x < 240; x++)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	3301      	adds	r3, #1
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2bef      	cmp	r3, #239	@ 0xef
 800286a:	ddf1      	ble.n	8002850 <DrawDebugGrid+0x144>
    for (int y = 201; y < 320; y++)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3301      	adds	r3, #1
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002878:	dbe7      	blt.n	800284a <DrawDebugGrid+0x13e>
        }
    }
    LCD_DisplayString(5, 7, (uint8_t *)"(0,0)", LEFT_MODE);
 800287a:	2300      	movs	r3, #0
 800287c:	4a0e      	ldr	r2, [pc, #56]	@ (80028b8 <DrawDebugGrid+0x1ac>)
 800287e:	2107      	movs	r1, #7
 8002880:	2005      	movs	r0, #5
 8002882:	f7fe f995 	bl	8000bb0 <LCD_DisplayString>
    LCD_DisplayString(225, 7, (uint8_t *)"(320,0)", LEFT_MODE);
 8002886:	2300      	movs	r3, #0
 8002888:	4a0c      	ldr	r2, [pc, #48]	@ (80028bc <DrawDebugGrid+0x1b0>)
 800288a:	2107      	movs	r1, #7
 800288c:	20e1      	movs	r0, #225	@ 0xe1
 800288e:	f7fe f98f 	bl	8000bb0 <LCD_DisplayString>
    LCD_DisplayString(2, 210, (uint8_t *)"(0,240)", LEFT_MODE);
 8002892:	2300      	movs	r3, #0
 8002894:	4a0a      	ldr	r2, [pc, #40]	@ (80028c0 <DrawDebugGrid+0x1b4>)
 8002896:	21d2      	movs	r1, #210	@ 0xd2
 8002898:	2002      	movs	r0, #2
 800289a:	f7fe f989 	bl	8000bb0 <LCD_DisplayString>
    LCD_DisplayString(202, 210, (uint8_t *)"(320,240)", LEFT_MODE);
 800289e:	2300      	movs	r3, #0
 80028a0:	4a08      	ldr	r2, [pc, #32]	@ (80028c4 <DrawDebugGrid+0x1b8>)
 80028a2:	21d2      	movs	r1, #210	@ 0xd2
 80028a4:	20ca      	movs	r0, #202	@ 0xca
 80028a6:	f7fe f983 	bl	8000bb0 <LCD_DisplayString>
}
 80028aa:	bf00      	nop
 80028ac:	3730      	adds	r7, #48	@ 0x30
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000004 	.word	0x20000004
 80028b8:	08007a28 	.word	0x08007a28
 80028bc:	08007a30 	.word	0x08007a30
 80028c0:	08007a38 	.word	0x08007a38
 80028c4:	08007a40 	.word	0x08007a40

080028c8 <DrawDebugBug>:

void DrawDebugBug(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
    // Head
    for (int y = -5; y <= 5; y++)
 80028ce:	f06f 0304 	mvn.w	r3, #4
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	e023      	b.n	800291e <DrawDebugBug+0x56>
    {
        for (int x = -5; x <= 5; x++)
 80028d6:	f06f 0304 	mvn.w	r3, #4
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	e019      	b.n	8002912 <DrawDebugBug+0x4a>
        {
            if (x * x + y * y <= 25)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	fb03 f203 	mul.w	r2, r3, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fb03 f303 	mul.w	r3, r3, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	2b19      	cmp	r3, #25
 80028ee:	dc0d      	bgt.n	800290c <DrawDebugBug+0x44>
            {
                LCD_Draw_Pixel(208 + y, 300 - x, LCD_COLOR_GREEN);
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	33d0      	adds	r3, #208	@ 0xd0
 80028f6:	b298      	uxth	r0, r3
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 8002900:	b29b      	uxth	r3, r3
 8002902:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002906:	4619      	mov	r1, r3
 8002908:	f7fe f808 	bl	800091c <LCD_Draw_Pixel>
        for (int x = -5; x <= 5; x++)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	3301      	adds	r3, #1
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2b05      	cmp	r3, #5
 8002916:	dde2      	ble.n	80028de <DrawDebugBug+0x16>
    for (int y = -5; y <= 5; y++)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	3301      	adds	r3, #1
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b05      	cmp	r3, #5
 8002922:	ddd8      	ble.n	80028d6 <DrawDebugBug+0xe>
            }
        }
    }

    // Eyes
    LCD_Draw_Pixel(210, 298, LCD_COLOR_MAGENTA); // Top eye
 8002924:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002928:	f44f 7195 	mov.w	r1, #298	@ 0x12a
 800292c:	20d2      	movs	r0, #210	@ 0xd2
 800292e:	f7fd fff5 	bl	800091c <LCD_Draw_Pixel>
    LCD_Draw_Pixel(210, 302, LCD_COLOR_MAGENTA); // Bottom eye
 8002932:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002936:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 800293a:	20d2      	movs	r0, #210	@ 0xd2
 800293c:	f7fd ffee 	bl	800091c <LCD_Draw_Pixel>

    // Body
    for (int y = -10; y <= 10; y++)
 8002940:	f06f 0309 	mvn.w	r3, #9
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	e023      	b.n	8002990 <DrawDebugBug+0xc8>
    {
        for (int x = -10; x <= 10; x++)
 8002948:	f06f 0309 	mvn.w	r3, #9
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	e019      	b.n	8002984 <DrawDebugBug+0xbc>
        {
            if (x * x + y * y <= 100)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	fb03 f203 	mul.w	r2, r3, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	fb03 f303 	mul.w	r3, r3, r3
 800295c:	4413      	add	r3, r2
 800295e:	2b64      	cmp	r3, #100	@ 0x64
 8002960:	dc0d      	bgt.n	800297e <DrawDebugBug+0xb6>
            {
                LCD_Draw_Pixel(220 + y, 300 - x, LCD_COLOR_GREEN);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	b29b      	uxth	r3, r3
 8002966:	33dc      	adds	r3, #220	@ 0xdc
 8002968:	b298      	uxth	r0, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	b29b      	uxth	r3, r3
 800296e:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 8002972:	b29b      	uxth	r3, r3
 8002974:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002978:	4619      	mov	r1, r3
 800297a:	f7fd ffcf 	bl	800091c <LCD_Draw_Pixel>
        for (int x = -10; x <= 10; x++)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	3301      	adds	r3, #1
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b0a      	cmp	r3, #10
 8002988:	dde2      	ble.n	8002950 <DrawDebugBug+0x88>
    for (int y = -10; y <= 10; y++)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3301      	adds	r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b0a      	cmp	r3, #10
 8002994:	ddd8      	ble.n	8002948 <DrawDebugBug+0x80>
            }
        }
    }

    // Legs, 3 on each side
    for (int i = -1; i <= 1; i++)
 8002996:	f04f 33ff 	mov.w	r3, #4294967295
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	e062      	b.n	8002a64 <DrawDebugBug+0x19c>
    {
        LCD_Draw_Pixel(220 + i * 6, 287, LCD_COLOR_WHITE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	0052      	lsls	r2, r2, #1
 80029a6:	4413      	add	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	33dc      	adds	r3, #220	@ 0xdc
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029b4:	f240 111f 	movw	r1, #287	@ 0x11f
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd ffaf 	bl	800091c <LCD_Draw_Pixel>
        LCD_Draw_Pixel(220 + i * 6, 286, LCD_COLOR_WHITE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	0052      	lsls	r2, r2, #1
 80029c6:	4413      	add	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	33dc      	adds	r3, #220	@ 0xdc
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029d4:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd ff9f 	bl	800091c <LCD_Draw_Pixel>
        LCD_Draw_Pixel(220 + i * 6, 285, LCD_COLOR_WHITE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	0052      	lsls	r2, r2, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	33dc      	adds	r3, #220	@ 0xdc
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029f4:	f240 111d 	movw	r1, #285	@ 0x11d
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fd ff8f 	bl	800091c <LCD_Draw_Pixel>

        LCD_Draw_Pixel(220 + i * 6, 313, LCD_COLOR_WHITE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	0052      	lsls	r2, r2, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	33dc      	adds	r3, #220	@ 0xdc
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a14:	f240 1139 	movw	r1, #313	@ 0x139
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd ff7f 	bl	800091c <LCD_Draw_Pixel>
        LCD_Draw_Pixel(220 + i * 6, 314, LCD_COLOR_WHITE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	0052      	lsls	r2, r2, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	33dc      	adds	r3, #220	@ 0xdc
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a34:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fd ff6f 	bl	800091c <LCD_Draw_Pixel>
        LCD_Draw_Pixel(220 + i * 6, 315, LCD_COLOR_WHITE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	0052      	lsls	r2, r2, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	33dc      	adds	r3, #220	@ 0xdc
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a54:	f240 113b 	movw	r1, #315	@ 0x13b
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fd ff5f 	bl	800091c <LCD_Draw_Pixel>
    for (int i = -1; i <= 1; i++)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3301      	adds	r3, #1
 8002a62:	607b      	str	r3, [r7, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	dd99      	ble.n	800299e <DrawDebugBug+0xd6>
    }

    // Antennae or sumthin, idk dude
    LCD_Draw_Pixel(207, 297, LCD_COLOR_LIGHTGRAY);
 8002a6a:	f24d 32d3 	movw	r2, #54227	@ 0xd3d3
 8002a6e:	f240 1129 	movw	r1, #297	@ 0x129
 8002a72:	20cf      	movs	r0, #207	@ 0xcf
 8002a74:	f7fd ff52 	bl	800091c <LCD_Draw_Pixel>
    LCD_Draw_Pixel(207, 303, LCD_COLOR_LIGHTGRAY);
 8002a78:	f24d 32d3 	movw	r2, #54227	@ 0xd3d3
 8002a7c:	f240 112f 	movw	r1, #303	@ 0x12f
 8002a80:	20cf      	movs	r0, #207	@ 0xcf
 8002a82:	f7fd ff4b 	bl	800091c <LCD_Draw_Pixel>
}
 8002a86:	bf00      	nop
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	4b10      	ldr	r3, [pc, #64]	@ (8002adc <HAL_MspInit+0x4c>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8002adc <HAL_MspInit+0x4c>)
 8002aa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002adc <HAL_MspInit+0x4c>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <HAL_MspInit+0x4c>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	4a08      	ldr	r2, [pc, #32]	@ (8002adc <HAL_MspInit+0x4c>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_MspInit+0x4c>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ace:	2007      	movs	r0, #7
 8002ad0:	f000 ff9e 	bl	8003a10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40023800 	.word	0x40023800

08002ae0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	@ 0x28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a29      	ldr	r2, [pc, #164]	@ (8002ba4 <HAL_I2C_MspInit+0xc4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d14b      	bne.n	8002b9a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	4b28      	ldr	r3, [pc, #160]	@ (8002ba8 <HAL_I2C_MspInit+0xc8>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0a:	4a27      	ldr	r2, [pc, #156]	@ (8002ba8 <HAL_I2C_MspInit+0xc8>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b12:	4b25      	ldr	r3, [pc, #148]	@ (8002ba8 <HAL_I2C_MspInit+0xc8>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	4b21      	ldr	r3, [pc, #132]	@ (8002ba8 <HAL_I2C_MspInit+0xc8>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b26:	4a20      	ldr	r2, [pc, #128]	@ (8002ba8 <HAL_I2C_MspInit+0xc8>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba8 <HAL_I2C_MspInit+0xc8>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002b3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b40:	2312      	movs	r3, #18
 8002b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	4619      	mov	r1, r3
 8002b56:	4815      	ldr	r0, [pc, #84]	@ (8002bac <HAL_I2C_MspInit+0xcc>)
 8002b58:	f000 ff9c 	bl	8003a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002b5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b62:	2312      	movs	r3, #18
 8002b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b6e:	2304      	movs	r3, #4
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002b72:	f107 0314 	add.w	r3, r7, #20
 8002b76:	4619      	mov	r1, r3
 8002b78:	480d      	ldr	r0, [pc, #52]	@ (8002bb0 <HAL_I2C_MspInit+0xd0>)
 8002b7a:	f000 ff8b 	bl	8003a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <HAL_I2C_MspInit+0xc8>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	4a08      	ldr	r2, [pc, #32]	@ (8002ba8 <HAL_I2C_MspInit+0xc8>)
 8002b88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <HAL_I2C_MspInit+0xc8>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002b9a:	bf00      	nop
 8002b9c:	3728      	adds	r7, #40	@ 0x28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40005c00 	.word	0x40005c00
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40020800 	.word	0x40020800
 8002bb0:	40020000 	.word	0x40020000

08002bb4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b09a      	sub	sp, #104	@ 0x68
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bd0:	2230      	movs	r2, #48	@ 0x30
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f004 fa41 	bl	800705c <memset>
  if(hltdc->Instance==LTDC)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a81      	ldr	r2, [pc, #516]	@ (8002de4 <HAL_LTDC_MspInit+0x230>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	f040 80fb 	bne.w	8002ddc <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002be6:	2308      	movs	r3, #8
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8002bea:	23c8      	movs	r3, #200	@ 0xc8
 8002bec:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002bf2:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f003 fa15 	bl	800602c <HAL_RCCEx_PeriphCLKConfig>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002c08:	f7ff fa60 	bl	80020cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	623b      	str	r3, [r7, #32]
 8002c10:	4b75      	ldr	r3, [pc, #468]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c14:	4a74      	ldr	r2, [pc, #464]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002c16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c1c:	4b72      	ldr	r3, [pc, #456]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c24:	623b      	str	r3, [r7, #32]
 8002c26:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	4b6e      	ldr	r3, [pc, #440]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c30:	4a6d      	ldr	r2, [pc, #436]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002c32:	f043 0320 	orr.w	r3, r3, #32
 8002c36:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c38:	4b6b      	ldr	r3, [pc, #428]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c44:	2300      	movs	r3, #0
 8002c46:	61bb      	str	r3, [r7, #24]
 8002c48:	4b67      	ldr	r3, [pc, #412]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4c:	4a66      	ldr	r2, [pc, #408]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c54:	4b64      	ldr	r3, [pc, #400]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	4b60      	ldr	r3, [pc, #384]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c68:	4a5f      	ldr	r2, [pc, #380]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002c6a:	f043 0302 	orr.w	r3, r3, #2
 8002c6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c70:	4b5d      	ldr	r3, [pc, #372]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	4b59      	ldr	r3, [pc, #356]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c84:	4a58      	ldr	r2, [pc, #352]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c8c:	4b56      	ldr	r3, [pc, #344]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	4b52      	ldr	r3, [pc, #328]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca0:	4a51      	ldr	r2, [pc, #324]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002ca2:	f043 0304 	orr.w	r3, r3, #4
 8002ca6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca8:	4b4f      	ldr	r3, [pc, #316]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbc:	4a4a      	ldr	r2, [pc, #296]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002cbe:	f043 0308 	orr.w	r3, r3, #8
 8002cc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc4:	4b48      	ldr	r3, [pc, #288]	@ (8002de8 <HAL_LTDC_MspInit+0x234>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002cd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cd4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ce2:	230e      	movs	r3, #14
 8002ce4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002ce6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002cea:	4619      	mov	r1, r3
 8002cec:	483f      	ldr	r0, [pc, #252]	@ (8002dec <HAL_LTDC_MspInit+0x238>)
 8002cee:	f000 fed1 	bl	8003a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002cf2:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002cf6:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d00:	2300      	movs	r3, #0
 8002d02:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d04:	230e      	movs	r3, #14
 8002d06:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4838      	ldr	r0, [pc, #224]	@ (8002df0 <HAL_LTDC_MspInit+0x23c>)
 8002d10:	f000 fec0 	bl	8003a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002d14:	2303      	movs	r3, #3
 8002d16:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	2300      	movs	r3, #0
 8002d22:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002d24:	2309      	movs	r3, #9
 8002d26:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4831      	ldr	r0, [pc, #196]	@ (8002df4 <HAL_LTDC_MspInit+0x240>)
 8002d30:	f000 feb0 	bl	8003a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002d34:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002d38:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d42:	2300      	movs	r3, #0
 8002d44:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d46:	230e      	movs	r3, #14
 8002d48:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d4a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4828      	ldr	r0, [pc, #160]	@ (8002df4 <HAL_LTDC_MspInit+0x240>)
 8002d52:	f000 fe9f 	bl	8003a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002d56:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002d5a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d64:	2300      	movs	r3, #0
 8002d66:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d68:	230e      	movs	r3, #14
 8002d6a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d70:	4619      	mov	r1, r3
 8002d72:	4821      	ldr	r0, [pc, #132]	@ (8002df8 <HAL_LTDC_MspInit+0x244>)
 8002d74:	f000 fe8e 	bl	8003a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002d78:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002d7c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d86:	2300      	movs	r3, #0
 8002d88:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d8a:	230e      	movs	r3, #14
 8002d8c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d92:	4619      	mov	r1, r3
 8002d94:	4819      	ldr	r0, [pc, #100]	@ (8002dfc <HAL_LTDC_MspInit+0x248>)
 8002d96:	f000 fe7d 	bl	8003a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002d9a:	2348      	movs	r3, #72	@ 0x48
 8002d9c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da6:	2300      	movs	r3, #0
 8002da8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002daa:	230e      	movs	r3, #14
 8002dac:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002db2:	4619      	mov	r1, r3
 8002db4:	4812      	ldr	r0, [pc, #72]	@ (8002e00 <HAL_LTDC_MspInit+0x24c>)
 8002db6:	f000 fe6d 	bl	8003a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002dba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002dbe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002dcc:	2309      	movs	r3, #9
 8002dce:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dd0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4808      	ldr	r0, [pc, #32]	@ (8002df8 <HAL_LTDC_MspInit+0x244>)
 8002dd8:	f000 fe5c 	bl	8003a94 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002ddc:	bf00      	nop
 8002dde:	3768      	adds	r7, #104	@ 0x68
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40016800 	.word	0x40016800
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40021400 	.word	0x40021400
 8002df0:	40020000 	.word	0x40020000
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40021800 	.word	0x40021800
 8002dfc:	40020800 	.word	0x40020800
 8002e00:	40020c00 	.word	0x40020c00

08002e04 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0b      	ldr	r2, [pc, #44]	@ (8002e40 <HAL_RNG_MspInit+0x3c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d10d      	bne.n	8002e32 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e44 <HAL_RNG_MspInit+0x40>)
 8002e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e1e:	4a09      	ldr	r2, [pc, #36]	@ (8002e44 <HAL_RNG_MspInit+0x40>)
 8002e20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e24:	6353      	str	r3, [r2, #52]	@ 0x34
 8002e26:	4b07      	ldr	r3, [pc, #28]	@ (8002e44 <HAL_RNG_MspInit+0x40>)
 8002e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	50060800 	.word	0x50060800
 8002e44:	40023800 	.word	0x40023800

08002e48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	@ 0x28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a19      	ldr	r2, [pc, #100]	@ (8002ecc <HAL_SPI_MspInit+0x84>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d12c      	bne.n	8002ec4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	4b18      	ldr	r3, [pc, #96]	@ (8002ed0 <HAL_SPI_MspInit+0x88>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e72:	4a17      	ldr	r2, [pc, #92]	@ (8002ed0 <HAL_SPI_MspInit+0x88>)
 8002e74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e7a:	4b15      	ldr	r3, [pc, #84]	@ (8002ed0 <HAL_SPI_MspInit+0x88>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	4b11      	ldr	r3, [pc, #68]	@ (8002ed0 <HAL_SPI_MspInit+0x88>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	4a10      	ldr	r2, [pc, #64]	@ (8002ed0 <HAL_SPI_MspInit+0x88>)
 8002e90:	f043 0320 	orr.w	r3, r3, #32
 8002e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e96:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed0 <HAL_SPI_MspInit+0x88>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002ea2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002eb4:	2305      	movs	r3, #5
 8002eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4805      	ldr	r0, [pc, #20]	@ (8002ed4 <HAL_SPI_MspInit+0x8c>)
 8002ec0:	f000 fde8 	bl	8003a94 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002ec4:	bf00      	nop
 8002ec6:	3728      	adds	r7, #40	@ 0x28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40015000 	.word	0x40015000
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40021400 	.word	0x40021400

08002ed8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a08      	ldr	r2, [pc, #32]	@ (8002f08 <HAL_SPI_MspDeInit+0x30>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d10a      	bne.n	8002f00 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002eea:	4b08      	ldr	r3, [pc, #32]	@ (8002f0c <HAL_SPI_MspDeInit+0x34>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	4a07      	ldr	r2, [pc, #28]	@ (8002f0c <HAL_SPI_MspDeInit+0x34>)
 8002ef0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002ef4:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002ef6:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002efa:	4805      	ldr	r0, [pc, #20]	@ (8002f10 <HAL_SPI_MspDeInit+0x38>)
 8002efc:	f000 ff76 	bl	8003dec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40015000 	.word	0x40015000
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40021400 	.word	0x40021400

08002f14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f24:	d10d      	bne.n	8002f42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <HAL_TIM_Base_MspInit+0x3c>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	4a08      	ldr	r2, [pc, #32]	@ (8002f50 <HAL_TIM_Base_MspInit+0x3c>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f36:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <HAL_TIM_Base_MspInit+0x3c>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800

08002f54 <EXTI0_IRQHandler>:

/* USER CODE END 0 */

/* External variables --------------------------------------------------------*/
void EXTI0_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);   // hands control to HAL
 8002f58:	2001      	movs	r0, #1
 8002f5a:	f001 f885 	bl	8004068 <HAL_GPIO_EXTI_IRQHandler>
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f66:	bf00      	nop
 8002f68:	e7fd      	b.n	8002f66 <NMI_Handler+0x4>

08002f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f6e:	bf00      	nop
 8002f70:	e7fd      	b.n	8002f6e <HardFault_Handler+0x4>

08002f72 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f76:	bf00      	nop
 8002f78:	e7fd      	b.n	8002f76 <MemManage_Handler+0x4>

08002f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f7e:	bf00      	nop
 8002f80:	e7fd      	b.n	8002f7e <BusFault_Handler+0x4>

08002f82 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f86:	bf00      	nop
 8002f88:	e7fd      	b.n	8002f86 <UsageFault_Handler+0x4>

08002f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb8:	f000 fc16 	bl	80037e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002fc6:	f000 f9cd 	bl	8003364 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002fca:	f000 f98d 	bl	80032e8 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002fce:	2202      	movs	r2, #2
 8002fd0:	2103      	movs	r1, #3
 8002fd2:	2082      	movs	r0, #130	@ 0x82
 8002fd4:	f000 fa1a 	bl	800340c <I2C3_Write>
    HAL_Delay(5);
 8002fd8:	2005      	movs	r0, #5
 8002fda:	f000 fc25 	bl	8003828 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2103      	movs	r1, #3
 8002fe2:	2082      	movs	r0, #130	@ 0x82
 8002fe4:	f000 fa12 	bl	800340c <I2C3_Write>
    HAL_Delay(2);
 8002fe8:	2002      	movs	r0, #2
 8002fea:	f000 fc1d 	bl	8003828 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002fee:	1cba      	adds	r2, r7, #2
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	2082      	movs	r0, #130	@ 0x82
 8002ff6:	f000 fa59 	bl	80034ac <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002ffa:	887b      	ldrh	r3, [r7, #2]
 8002ffc:	021b      	lsls	r3, r3, #8
 8002ffe:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003000:	887b      	ldrh	r3, [r7, #2]
 8003002:	0a1b      	lsrs	r3, r3, #8
 8003004:	b29a      	uxth	r2, r3
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	4313      	orrs	r3, r2
 800300a:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	f640 0211 	movw	r2, #2065	@ 0x811
 8003012:	4293      	cmp	r3, r2
 8003014:	d001      	beq.n	800301a <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8003016:	2303      	movs	r3, #3
 8003018:	e075      	b.n	8003106 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800301a:	2202      	movs	r2, #2
 800301c:	2103      	movs	r1, #3
 800301e:	2082      	movs	r0, #130	@ 0x82
 8003020:	f000 f9f4 	bl	800340c <I2C3_Write>
    HAL_Delay(5);
 8003024:	2005      	movs	r0, #5
 8003026:	f000 fbff 	bl	8003828 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800302a:	2200      	movs	r2, #0
 800302c:	2103      	movs	r1, #3
 800302e:	2082      	movs	r0, #130	@ 0x82
 8003030:	f000 f9ec 	bl	800340c <I2C3_Write>
    HAL_Delay(2);
 8003034:	2002      	movs	r0, #2
 8003036:	f000 fbf7 	bl	8003828 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800303a:	2004      	movs	r0, #4
 800303c:	f000 f867 	bl	800310e <STMPE811_Read>
 8003040:	4603      	mov	r3, r0
 8003042:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003044:	797b      	ldrb	r3, [r7, #5]
 8003046:	f023 0301 	bic.w	r3, r3, #1
 800304a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800304c:	797b      	ldrb	r3, [r7, #5]
 800304e:	461a      	mov	r2, r3
 8003050:	2104      	movs	r1, #4
 8003052:	2082      	movs	r0, #130	@ 0x82
 8003054:	f000 f9da 	bl	800340c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003058:	2004      	movs	r0, #4
 800305a:	f000 f858 	bl	800310e <STMPE811_Read>
 800305e:	4603      	mov	r3, r0
 8003060:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8003062:	797b      	ldrb	r3, [r7, #5]
 8003064:	f023 0302 	bic.w	r3, r3, #2
 8003068:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800306a:	797b      	ldrb	r3, [r7, #5]
 800306c:	461a      	mov	r2, r3
 800306e:	2104      	movs	r1, #4
 8003070:	2082      	movs	r0, #130	@ 0x82
 8003072:	f000 f9cb 	bl	800340c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8003076:	2249      	movs	r2, #73	@ 0x49
 8003078:	2120      	movs	r1, #32
 800307a:	2082      	movs	r0, #130	@ 0x82
 800307c:	f000 f9c6 	bl	800340c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8003080:	2002      	movs	r0, #2
 8003082:	f000 fbd1 	bl	8003828 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8003086:	2201      	movs	r2, #1
 8003088:	2121      	movs	r1, #33	@ 0x21
 800308a:	2082      	movs	r0, #130	@ 0x82
 800308c:	f000 f9be 	bl	800340c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8003090:	2017      	movs	r0, #23
 8003092:	f000 f83c 	bl	800310e <STMPE811_Read>
 8003096:	4603      	mov	r3, r0
 8003098:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 800309a:	797b      	ldrb	r3, [r7, #5]
 800309c:	f043 031e 	orr.w	r3, r3, #30
 80030a0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80030a2:	797b      	ldrb	r3, [r7, #5]
 80030a4:	461a      	mov	r2, r3
 80030a6:	2117      	movs	r1, #23
 80030a8:	2082      	movs	r0, #130	@ 0x82
 80030aa:	f000 f9af 	bl	800340c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80030ae:	229a      	movs	r2, #154	@ 0x9a
 80030b0:	2141      	movs	r1, #65	@ 0x41
 80030b2:	2082      	movs	r0, #130	@ 0x82
 80030b4:	f000 f9aa 	bl	800340c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80030b8:	2201      	movs	r2, #1
 80030ba:	214a      	movs	r1, #74	@ 0x4a
 80030bc:	2082      	movs	r0, #130	@ 0x82
 80030be:	f000 f9a5 	bl	800340c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80030c2:	2201      	movs	r2, #1
 80030c4:	214b      	movs	r1, #75	@ 0x4b
 80030c6:	2082      	movs	r0, #130	@ 0x82
 80030c8:	f000 f9a0 	bl	800340c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80030cc:	2200      	movs	r2, #0
 80030ce:	214b      	movs	r1, #75	@ 0x4b
 80030d0:	2082      	movs	r0, #130	@ 0x82
 80030d2:	f000 f99b 	bl	800340c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80030d6:	2201      	movs	r2, #1
 80030d8:	2156      	movs	r1, #86	@ 0x56
 80030da:	2082      	movs	r0, #130	@ 0x82
 80030dc:	f000 f996 	bl	800340c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80030e0:	2201      	movs	r2, #1
 80030e2:	2158      	movs	r1, #88	@ 0x58
 80030e4:	2082      	movs	r0, #130	@ 0x82
 80030e6:	f000 f991 	bl	800340c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80030ea:	2203      	movs	r2, #3
 80030ec:	2140      	movs	r1, #64	@ 0x40
 80030ee:	2082      	movs	r0, #130	@ 0x82
 80030f0:	f000 f98c 	bl	800340c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80030f4:	22ff      	movs	r2, #255	@ 0xff
 80030f6:	210b      	movs	r1, #11
 80030f8:	2082      	movs	r0, #130	@ 0x82
 80030fa:	f000 f987 	bl	800340c <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80030fe:	20c8      	movs	r0, #200	@ 0xc8
 8003100:	f000 fb92 	bl	8003828 <HAL_Delay>

    return STMPE811_State_Ok;
 8003104:	2302      	movs	r3, #2

}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <STMPE811_Read>:




uint8_t STMPE811_Read(uint8_t reg)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	4603      	mov	r3, r0
 8003116:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8003118:	f107 020f 	add.w	r2, r7, #15
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	4619      	mov	r1, r3
 8003120:	2082      	movs	r0, #130	@ 0x82
 8003122:	f000 f99d 	bl	8003460 <I2C3_Read>

    return readData;
 8003126:	7bfb      	ldrb	r3, [r7, #15]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	791a      	ldrb	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8003140:	2040      	movs	r0, #64	@ 0x40
 8003142:	f7ff ffe4 	bl	800310e <STMPE811_Read>
 8003146:	4603      	mov	r3, r0
 8003148:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 800314a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800314e:	2b00      	cmp	r3, #0
 8003150:	db0e      	blt.n	8003170 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003158:	2201      	movs	r2, #1
 800315a:	214b      	movs	r1, #75	@ 0x4b
 800315c:	2082      	movs	r0, #130	@ 0x82
 800315e:	f000 f955 	bl	800340c <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003162:	2200      	movs	r2, #0
 8003164:	214b      	movs	r1, #75	@ 0x4b
 8003166:	2082      	movs	r0, #130	@ 0x82
 8003168:	f000 f950 	bl	800340c <I2C3_Write>

        return STMPE811_State_Released;
 800316c:	2301      	movs	r3, #1
 800316e:	e0a7      	b.n	80032c0 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	799b      	ldrb	r3, [r3, #6]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d117      	bne.n	80031a8 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f000 f9b7 	bl	80034f0 <TM_STMPE811_ReadX>
 8003182:	4603      	mov	r3, r0
 8003184:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003188:	b29a      	uxth	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	885b      	ldrh	r3, [r3, #2]
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fa0a 	bl	80035ac <TM_STMPE811_ReadY>
 8003198:	4603      	mov	r3, r0
 800319a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800319e:	3301      	adds	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	805a      	strh	r2, [r3, #2]
 80031a6:	e048      	b.n	800323a <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	799b      	ldrb	r3, [r3, #6]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d112      	bne.n	80031d6 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 f99b 	bl	80034f0 <TM_STMPE811_ReadX>
 80031ba:	4603      	mov	r3, r0
 80031bc:	461a      	mov	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	885b      	ldrh	r3, [r3, #2]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f9f0 	bl	80035ac <TM_STMPE811_ReadY>
 80031cc:	4603      	mov	r3, r0
 80031ce:	461a      	mov	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	805a      	strh	r2, [r3, #2]
 80031d4:	e031      	b.n	800323a <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	799b      	ldrb	r3, [r3, #6]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d115      	bne.n	800320a <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	885b      	ldrh	r3, [r3, #2]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f984 	bl	80034f0 <TM_STMPE811_ReadX>
 80031e8:	4603      	mov	r3, r0
 80031ea:	461a      	mov	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 f9d9 	bl	80035ac <TM_STMPE811_ReadY>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003200:	3301      	adds	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	801a      	strh	r2, [r3, #0]
 8003208:	e017      	b.n	800323a <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	799b      	ldrb	r3, [r3, #6]
 800320e:	2b03      	cmp	r3, #3
 8003210:	d113      	bne.n	800323a <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f000 f96a 	bl	80034f0 <TM_STMPE811_ReadX>
 800321c:	4603      	mov	r3, r0
 800321e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003222:	b29a      	uxth	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 f9bd 	bl	80035ac <TM_STMPE811_ReadY>
 8003232:	4603      	mov	r3, r0
 8003234:	461a      	mov	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800323a:	2201      	movs	r2, #1
 800323c:	214b      	movs	r1, #75	@ 0x4b
 800323e:	2082      	movs	r0, #130	@ 0x82
 8003240:	f000 f8e4 	bl	800340c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003244:	2200      	movs	r2, #0
 8003246:	214b      	movs	r1, #75	@ 0x4b
 8003248:	2082      	movs	r0, #130	@ 0x82
 800324a:	f000 f8df 	bl	800340c <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	799b      	ldrb	r3, [r3, #6]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <STMPE811_ReadTouch+0x12e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	799b      	ldrb	r3, [r3, #6]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d115      	bne.n	800328a <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d027      	beq.n	80032b6 <STMPE811_ReadTouch+0x186>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	2bee      	cmp	r3, #238	@ 0xee
 800326c:	d823      	bhi.n	80032b6 <STMPE811_ReadTouch+0x186>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	885b      	ldrh	r3, [r3, #2]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01f      	beq.n	80032b6 <STMPE811_ReadTouch+0x186>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	885b      	ldrh	r3, [r3, #2]
 800327a:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800327e:	d81a      	bhi.n	80032b6 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8003286:	2300      	movs	r3, #0
 8003288:	e01a      	b.n	80032c0 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d012      	beq.n	80032b8 <STMPE811_ReadTouch+0x188>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800329a:	d80d      	bhi.n	80032b8 <STMPE811_ReadTouch+0x188>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	885b      	ldrh	r3, [r3, #2]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d009      	beq.n	80032b8 <STMPE811_ReadTouch+0x188>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	885b      	ldrh	r3, [r3, #2]
 80032a8:	2bee      	cmp	r3, #238	@ 0xee
 80032aa:	d805      	bhi.n	80032b8 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e004      	b.n	80032c0 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80032b6:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 80032be:	2301      	movs	r3, #1
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80032cc:	4b05      	ldr	r3, [pc, #20]	@ (80032e4 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 80032d4:	bf00      	nop
 80032d6:	e7fd      	b.n	80032d4 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	20025bfc 	.word	0x20025bfc

080032e8 <I2C3_Init>:

static void I2C3_Init()
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	4b18      	ldr	r3, [pc, #96]	@ (8003354 <I2C3_Init+0x6c>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	4a17      	ldr	r2, [pc, #92]	@ (8003354 <I2C3_Init+0x6c>)
 80032f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80032fe:	4b15      	ldr	r3, [pc, #84]	@ (8003354 <I2C3_Init+0x6c>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800330a:	4b13      	ldr	r3, [pc, #76]	@ (8003358 <I2C3_Init+0x70>)
 800330c:	4a13      	ldr	r2, [pc, #76]	@ (800335c <I2C3_Init+0x74>)
 800330e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8003310:	4b11      	ldr	r3, [pc, #68]	@ (8003358 <I2C3_Init+0x70>)
 8003312:	4a13      	ldr	r2, [pc, #76]	@ (8003360 <I2C3_Init+0x78>)
 8003314:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003316:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <I2C3_Init+0x70>)
 8003318:	2200      	movs	r2, #0
 800331a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 800331c:	4b0e      	ldr	r3, [pc, #56]	@ (8003358 <I2C3_Init+0x70>)
 800331e:	2200      	movs	r2, #0
 8003320:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003322:	4b0d      	ldr	r3, [pc, #52]	@ (8003358 <I2C3_Init+0x70>)
 8003324:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003328:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800332a:	4b0b      	ldr	r3, [pc, #44]	@ (8003358 <I2C3_Init+0x70>)
 800332c:	2200      	movs	r2, #0
 800332e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003330:	4b09      	ldr	r3, [pc, #36]	@ (8003358 <I2C3_Init+0x70>)
 8003332:	2200      	movs	r2, #0
 8003334:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8003336:	4808      	ldr	r0, [pc, #32]	@ (8003358 <I2C3_Init+0x70>)
 8003338:	f000 feae 	bl	8004098 <HAL_I2C_Init>
 800333c:	4603      	mov	r3, r0
 800333e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8003346:	bf00      	nop
 8003348:	e7fd      	b.n	8003346 <I2C3_Init+0x5e>
    }
    return;
 800334a:	bf00      	nop
}
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
 8003358:	20025ba8 	.word	0x20025ba8
 800335c:	40005c00 	.word	0x40005c00
 8003360:	000186a0 	.word	0x000186a0

08003364 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336a:	f107 030c 	add.w	r3, r7, #12
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	609a      	str	r2, [r3, #8]
 8003376:	60da      	str	r2, [r3, #12]
 8003378:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	4b20      	ldr	r3, [pc, #128]	@ (8003400 <I2C3_MspInit+0x9c>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	4a1f      	ldr	r2, [pc, #124]	@ (8003400 <I2C3_MspInit+0x9c>)
 8003384:	f043 0304 	orr.w	r3, r3, #4
 8003388:	6313      	str	r3, [r2, #48]	@ 0x30
 800338a:	4b1d      	ldr	r3, [pc, #116]	@ (8003400 <I2C3_MspInit+0x9c>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	4b19      	ldr	r3, [pc, #100]	@ (8003400 <I2C3_MspInit+0x9c>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	4a18      	ldr	r2, [pc, #96]	@ (8003400 <I2C3_MspInit+0x9c>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033a6:	4b16      	ldr	r3, [pc, #88]	@ (8003400 <I2C3_MspInit+0x9c>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	607b      	str	r3, [r7, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80033b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033b8:	2312      	movs	r3, #18
 80033ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80033c4:	2304      	movs	r3, #4
 80033c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80033c8:	f107 030c 	add.w	r3, r7, #12
 80033cc:	4619      	mov	r1, r3
 80033ce:	480d      	ldr	r0, [pc, #52]	@ (8003404 <I2C3_MspInit+0xa0>)
 80033d0:	f000 fb60 	bl	8003a94 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80033d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033da:	2312      	movs	r3, #18
 80033dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80033e6:	2304      	movs	r3, #4
 80033e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80033ea:	f107 030c 	add.w	r3, r7, #12
 80033ee:	4619      	mov	r1, r3
 80033f0:	4805      	ldr	r0, [pc, #20]	@ (8003408 <I2C3_MspInit+0xa4>)
 80033f2:	f000 fb4f 	bl	8003a94 <HAL_GPIO_Init>
    
}
 80033f6:	bf00      	nop
 80033f8:	3720      	adds	r7, #32
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800
 8003404:	40020800 	.word	0x40020800
 8003408:	40020000 	.word	0x40020000

0800340c <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af04      	add	r7, sp, #16
 8003412:	4603      	mov	r3, r0
 8003414:	80fb      	strh	r3, [r7, #6]
 8003416:	460b      	mov	r3, r1
 8003418:	717b      	strb	r3, [r7, #5]
 800341a:	4613      	mov	r3, r2
 800341c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800341e:	793b      	ldrb	r3, [r7, #4]
 8003420:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003422:	797b      	ldrb	r3, [r7, #5]
 8003424:	b29a      	uxth	r2, r3
 8003426:	88f9      	ldrh	r1, [r7, #6]
 8003428:	4b0a      	ldr	r3, [pc, #40]	@ (8003454 <I2C3_Write+0x48>)
 800342a:	9302      	str	r3, [sp, #8]
 800342c:	2301      	movs	r3, #1
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	f107 030f 	add.w	r3, r7, #15
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	2301      	movs	r3, #1
 8003438:	4807      	ldr	r0, [pc, #28]	@ (8003458 <I2C3_Write+0x4c>)
 800343a:	f000 ff71 	bl	8004320 <HAL_I2C_Mem_Write>
 800343e:	4603      	mov	r3, r0
 8003440:	461a      	mov	r2, r3
 8003442:	4b06      	ldr	r3, [pc, #24]	@ (800345c <I2C3_Write+0x50>)
 8003444:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003446:	f7ff ff3f 	bl	80032c8 <verifyHAL_I2C_IS_OKAY>
}
 800344a:	bf00      	nop
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	0003d090 	.word	0x0003d090
 8003458:	20025ba8 	.word	0x20025ba8
 800345c:	20025bfc 	.word	0x20025bfc

08003460 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af04      	add	r7, sp, #16
 8003466:	4603      	mov	r3, r0
 8003468:	603a      	str	r2, [r7, #0]
 800346a:	71fb      	strb	r3, [r7, #7]
 800346c:	460b      	mov	r3, r1
 800346e:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	b299      	uxth	r1, r3
 8003474:	79bb      	ldrb	r3, [r7, #6]
 8003476:	b29a      	uxth	r2, r3
 8003478:	4b09      	ldr	r3, [pc, #36]	@ (80034a0 <I2C3_Read+0x40>)
 800347a:	9302      	str	r3, [sp, #8]
 800347c:	2301      	movs	r3, #1
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	2301      	movs	r3, #1
 8003486:	4807      	ldr	r0, [pc, #28]	@ (80034a4 <I2C3_Read+0x44>)
 8003488:	f001 f844 	bl	8004514 <HAL_I2C_Mem_Read>
 800348c:	4603      	mov	r3, r0
 800348e:	461a      	mov	r2, r3
 8003490:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <I2C3_Read+0x48>)
 8003492:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003494:	f7ff ff18 	bl	80032c8 <verifyHAL_I2C_IS_OKAY>
}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	0003d090 	.word	0x0003d090
 80034a4:	20025ba8 	.word	0x20025ba8
 80034a8:	20025bfc 	.word	0x20025bfc

080034ac <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af04      	add	r7, sp, #16
 80034b2:	603a      	str	r2, [r7, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	4603      	mov	r3, r0
 80034b8:	71fb      	strb	r3, [r7, #7]
 80034ba:	460b      	mov	r3, r1
 80034bc:	71bb      	strb	r3, [r7, #6]
 80034be:	4613      	mov	r3, r2
 80034c0:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	b299      	uxth	r1, r3
 80034c6:	79bb      	ldrb	r3, [r7, #6]
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	4b07      	ldr	r3, [pc, #28]	@ (80034e8 <I2C3_MulitByteRead+0x3c>)
 80034cc:	9302      	str	r3, [sp, #8]
 80034ce:	88bb      	ldrh	r3, [r7, #4]
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	2301      	movs	r3, #1
 80034d8:	4804      	ldr	r0, [pc, #16]	@ (80034ec <I2C3_MulitByteRead+0x40>)
 80034da:	f001 f81b 	bl	8004514 <HAL_I2C_Mem_Read>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	0003d090 	.word	0x0003d090
 80034ec:	20025ba8 	.word	0x20025ba8

080034f0 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 80034fa:	204d      	movs	r0, #77	@ 0x4d
 80034fc:	f7ff fe07 	bl	800310e <STMPE811_Read>
 8003500:	4603      	mov	r3, r0
 8003502:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003504:	204e      	movs	r0, #78	@ 0x4e
 8003506:	f7ff fe02 	bl	800310e <STMPE811_Read>
 800350a:	4603      	mov	r3, r0
 800350c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800350e:	7a7b      	ldrb	r3, [r7, #9]
 8003510:	021b      	lsls	r3, r3, #8
 8003512:	b21a      	sxth	r2, r3
 8003514:	7a3b      	ldrb	r3, [r7, #8]
 8003516:	b21b      	sxth	r3, r3
 8003518:	4313      	orrs	r3, r2
 800351a:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800351c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003520:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003524:	4293      	cmp	r3, r2
 8003526:	dc06      	bgt.n	8003536 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8003528:	89fb      	ldrh	r3, [r7, #14]
 800352a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800352e:	330c      	adds	r3, #12
 8003530:	b29b      	uxth	r3, r3
 8003532:	81fb      	strh	r3, [r7, #14]
 8003534:	e005      	b.n	8003542 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8003536:	89fb      	ldrh	r3, [r7, #14]
 8003538:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800353c:	3308      	adds	r3, #8
 800353e:	b29b      	uxth	r3, r3
 8003540:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8003542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003546:	4a18      	ldr	r2, [pc, #96]	@ (80035a8 <TM_STMPE811_ReadX+0xb8>)
 8003548:	fb82 1203 	smull	r1, r2, r2, r3
 800354c:	441a      	add	r2, r3
 800354e:	10d2      	asrs	r2, r2, #3
 8003550:	17db      	asrs	r3, r3, #31
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003556:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800355a:	2bef      	cmp	r3, #239	@ 0xef
 800355c:	dd02      	ble.n	8003564 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800355e:	23ef      	movs	r3, #239	@ 0xef
 8003560:	81fb      	strh	r3, [r7, #14]
 8003562:	e005      	b.n	8003570 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8003564:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003568:	2b00      	cmp	r3, #0
 800356a:	da01      	bge.n	8003570 <TM_STMPE811_ReadX+0x80>
        val = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003570:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	429a      	cmp	r2, r3
 8003578:	dd05      	ble.n	8003586 <TM_STMPE811_ReadX+0x96>
 800357a:	89fa      	ldrh	r2, [r7, #14]
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	b29b      	uxth	r3, r3
 8003582:	b21b      	sxth	r3, r3
 8003584:	e004      	b.n	8003590 <TM_STMPE811_ReadX+0xa0>
 8003586:	89fb      	ldrh	r3, [r7, #14]
 8003588:	88fa      	ldrh	r2, [r7, #6]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	b29b      	uxth	r3, r3
 800358e:	b21b      	sxth	r3, r3
 8003590:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003592:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003596:	2b04      	cmp	r3, #4
 8003598:	dd01      	ble.n	800359e <TM_STMPE811_ReadX+0xae>
        return val;
 800359a:	89fb      	ldrh	r3, [r7, #14]
 800359c:	e000      	b.n	80035a0 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800359e:	88fb      	ldrh	r3, [r7, #6]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	88888889 	.word	0x88888889

080035ac <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80035b6:	204f      	movs	r0, #79	@ 0x4f
 80035b8:	f7ff fda9 	bl	800310e <STMPE811_Read>
 80035bc:	4603      	mov	r3, r0
 80035be:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80035c0:	2050      	movs	r0, #80	@ 0x50
 80035c2:	f7ff fda4 	bl	800310e <STMPE811_Read>
 80035c6:	4603      	mov	r3, r0
 80035c8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80035ca:	7a7b      	ldrb	r3, [r7, #9]
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	b21a      	sxth	r2, r3
 80035d0:	7a3b      	ldrb	r3, [r7, #8]
 80035d2:	b21b      	sxth	r3, r3
 80035d4:	4313      	orrs	r3, r2
 80035d6:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80035d8:	89fb      	ldrh	r3, [r7, #14]
 80035da:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80035de:	b29b      	uxth	r3, r3
 80035e0:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 80035e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035e6:	4a19      	ldr	r2, [pc, #100]	@ (800364c <TM_STMPE811_ReadY+0xa0>)
 80035e8:	fb82 1203 	smull	r1, r2, r2, r3
 80035ec:	1052      	asrs	r2, r2, #1
 80035ee:	17db      	asrs	r3, r3, #31
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 80035f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	dc02      	bgt.n	8003602 <TM_STMPE811_ReadY+0x56>
        val = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	81fb      	strh	r3, [r7, #14]
 8003600:	e007      	b.n	8003612 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003606:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800360a:	db02      	blt.n	8003612 <TM_STMPE811_ReadY+0x66>
        val = 319;
 800360c:	f240 133f 	movw	r3, #319	@ 0x13f
 8003610:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003612:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	429a      	cmp	r2, r3
 800361a:	dd05      	ble.n	8003628 <TM_STMPE811_ReadY+0x7c>
 800361c:	89fa      	ldrh	r2, [r7, #14]
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	b29b      	uxth	r3, r3
 8003624:	b21b      	sxth	r3, r3
 8003626:	e004      	b.n	8003632 <TM_STMPE811_ReadY+0x86>
 8003628:	89fb      	ldrh	r3, [r7, #14]
 800362a:	88fa      	ldrh	r2, [r7, #6]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	b29b      	uxth	r3, r3
 8003630:	b21b      	sxth	r3, r3
 8003632:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003634:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003638:	2b04      	cmp	r3, #4
 800363a:	dd01      	ble.n	8003640 <TM_STMPE811_ReadY+0x94>
        return val;
 800363c:	89fb      	ldrh	r3, [r7, #14]
 800363e:	e000      	b.n	8003642 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8003640:	88fb      	ldrh	r3, [r7, #6]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	2e8ba2e9 	.word	0x2e8ba2e9

08003650 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003668:	4a14      	ldr	r2, [pc, #80]	@ (80036bc <_sbrk+0x5c>)
 800366a:	4b15      	ldr	r3, [pc, #84]	@ (80036c0 <_sbrk+0x60>)
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003674:	4b13      	ldr	r3, [pc, #76]	@ (80036c4 <_sbrk+0x64>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d102      	bne.n	8003682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800367c:	4b11      	ldr	r3, [pc, #68]	@ (80036c4 <_sbrk+0x64>)
 800367e:	4a12      	ldr	r2, [pc, #72]	@ (80036c8 <_sbrk+0x68>)
 8003680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003682:	4b10      	ldr	r3, [pc, #64]	@ (80036c4 <_sbrk+0x64>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	429a      	cmp	r2, r3
 800368e:	d207      	bcs.n	80036a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003690:	f003 fcec 	bl	800706c <__errno>
 8003694:	4603      	mov	r3, r0
 8003696:	220c      	movs	r2, #12
 8003698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800369a:	f04f 33ff 	mov.w	r3, #4294967295
 800369e:	e009      	b.n	80036b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036a0:	4b08      	ldr	r3, [pc, #32]	@ (80036c4 <_sbrk+0x64>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036a6:	4b07      	ldr	r3, [pc, #28]	@ (80036c4 <_sbrk+0x64>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4413      	add	r3, r2
 80036ae:	4a05      	ldr	r2, [pc, #20]	@ (80036c4 <_sbrk+0x64>)
 80036b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036b2:	68fb      	ldr	r3, [r7, #12]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20030000 	.word	0x20030000
 80036c0:	00000400 	.word	0x00000400
 80036c4:	20025c00 	.word	0x20025c00
 80036c8:	20025d50 	.word	0x20025d50

080036cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036d0:	4b06      	ldr	r3, [pc, #24]	@ (80036ec <SystemInit+0x20>)
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d6:	4a05      	ldr	r2, [pc, #20]	@ (80036ec <SystemInit+0x20>)
 80036d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036e0:	bf00      	nop
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80036f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003728 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036f4:	f7ff ffea 	bl	80036cc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036f8:	480c      	ldr	r0, [pc, #48]	@ (800372c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036fa:	490d      	ldr	r1, [pc, #52]	@ (8003730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003700:	e002      	b.n	8003708 <LoopCopyDataInit>

08003702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003706:	3304      	adds	r3, #4

08003708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800370a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800370c:	d3f9      	bcc.n	8003702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800370e:	4a0a      	ldr	r2, [pc, #40]	@ (8003738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003710:	4c0a      	ldr	r4, [pc, #40]	@ (800373c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003714:	e001      	b.n	800371a <LoopFillZerobss>

08003716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003718:	3204      	adds	r2, #4

0800371a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800371a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800371c:	d3fb      	bcc.n	8003716 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800371e:	f003 fcab 	bl	8007078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003722:	f7fe f918 	bl	8001956 <main>
  bx  lr    
 8003726:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003728:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800372c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003730:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003734:	08008c78 	.word	0x08008c78
  ldr r2, =_sbss
 8003738:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800373c:	20025d50 	.word	0x20025d50

08003740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003740:	e7fe      	b.n	8003740 <ADC_IRQHandler>
	...

08003744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003748:	4b0e      	ldr	r3, [pc, #56]	@ (8003784 <HAL_Init+0x40>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a0d      	ldr	r2, [pc, #52]	@ (8003784 <HAL_Init+0x40>)
 800374e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003752:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003754:	4b0b      	ldr	r3, [pc, #44]	@ (8003784 <HAL_Init+0x40>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0a      	ldr	r2, [pc, #40]	@ (8003784 <HAL_Init+0x40>)
 800375a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800375e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003760:	4b08      	ldr	r3, [pc, #32]	@ (8003784 <HAL_Init+0x40>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a07      	ldr	r2, [pc, #28]	@ (8003784 <HAL_Init+0x40>)
 8003766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800376a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800376c:	2003      	movs	r0, #3
 800376e:	f000 f94f 	bl	8003a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003772:	2000      	movs	r0, #0
 8003774:	f000 f808 	bl	8003788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003778:	f7ff f98a 	bl	8002a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40023c00 	.word	0x40023c00

08003788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003790:	4b12      	ldr	r3, [pc, #72]	@ (80037dc <HAL_InitTick+0x54>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4b12      	ldr	r3, [pc, #72]	@ (80037e0 <HAL_InitTick+0x58>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	4619      	mov	r1, r3
 800379a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800379e:	fbb3 f3f1 	udiv	r3, r3, r1
 80037a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f967 	bl	8003a7a <HAL_SYSTICK_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e00e      	b.n	80037d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b0f      	cmp	r3, #15
 80037ba:	d80a      	bhi.n	80037d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037bc:	2200      	movs	r2, #0
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295
 80037c4:	f000 f92f 	bl	8003a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037c8:	4a06      	ldr	r2, [pc, #24]	@ (80037e4 <HAL_InitTick+0x5c>)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e000      	b.n	80037d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20000014 	.word	0x20000014
 80037e0:	2000001c 	.word	0x2000001c
 80037e4:	20000018 	.word	0x20000018

080037e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037ec:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <HAL_IncTick+0x20>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	4b06      	ldr	r3, [pc, #24]	@ (800380c <HAL_IncTick+0x24>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4413      	add	r3, r2
 80037f8:	4a04      	ldr	r2, [pc, #16]	@ (800380c <HAL_IncTick+0x24>)
 80037fa:	6013      	str	r3, [r2, #0]
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	2000001c 	.word	0x2000001c
 800380c:	20025c04 	.word	0x20025c04

08003810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return uwTick;
 8003814:	4b03      	ldr	r3, [pc, #12]	@ (8003824 <HAL_GetTick+0x14>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20025c04 	.word	0x20025c04

08003828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003830:	f7ff ffee 	bl	8003810 <HAL_GetTick>
 8003834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003840:	d005      	beq.n	800384e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003842:	4b0a      	ldr	r3, [pc, #40]	@ (800386c <HAL_Delay+0x44>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4413      	add	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800384e:	bf00      	nop
 8003850:	f7ff ffde 	bl	8003810 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	429a      	cmp	r2, r3
 800385e:	d8f7      	bhi.n	8003850 <HAL_Delay+0x28>
  {
  }
}
 8003860:	bf00      	nop
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	2000001c 	.word	0x2000001c

08003870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003880:	4b0c      	ldr	r3, [pc, #48]	@ (80038b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800388c:	4013      	ands	r3, r2
 800388e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003898:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800389c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038a2:	4a04      	ldr	r2, [pc, #16]	@ (80038b4 <__NVIC_SetPriorityGrouping+0x44>)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	60d3      	str	r3, [r2, #12]
}
 80038a8:	bf00      	nop
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038bc:	4b04      	ldr	r3, [pc, #16]	@ (80038d0 <__NVIC_GetPriorityGrouping+0x18>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	0a1b      	lsrs	r3, r3, #8
 80038c2:	f003 0307 	and.w	r3, r3, #7
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	db0b      	blt.n	80038fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	f003 021f 	and.w	r2, r3, #31
 80038ec:	4907      	ldr	r1, [pc, #28]	@ (800390c <__NVIC_EnableIRQ+0x38>)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	2001      	movs	r0, #1
 80038f6:	fa00 f202 	lsl.w	r2, r0, r2
 80038fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	e000e100 	.word	0xe000e100

08003910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	6039      	str	r1, [r7, #0]
 800391a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800391c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003920:	2b00      	cmp	r3, #0
 8003922:	db0a      	blt.n	800393a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	b2da      	uxtb	r2, r3
 8003928:	490c      	ldr	r1, [pc, #48]	@ (800395c <__NVIC_SetPriority+0x4c>)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	0112      	lsls	r2, r2, #4
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	440b      	add	r3, r1
 8003934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003938:	e00a      	b.n	8003950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4908      	ldr	r1, [pc, #32]	@ (8003960 <__NVIC_SetPriority+0x50>)
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	3b04      	subs	r3, #4
 8003948:	0112      	lsls	r2, r2, #4
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	440b      	add	r3, r1
 800394e:	761a      	strb	r2, [r3, #24]
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	e000e100 	.word	0xe000e100
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003964:	b480      	push	{r7}
 8003966:	b089      	sub	sp, #36	@ 0x24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f1c3 0307 	rsb	r3, r3, #7
 800397e:	2b04      	cmp	r3, #4
 8003980:	bf28      	it	cs
 8003982:	2304      	movcs	r3, #4
 8003984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3304      	adds	r3, #4
 800398a:	2b06      	cmp	r3, #6
 800398c:	d902      	bls.n	8003994 <NVIC_EncodePriority+0x30>
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3b03      	subs	r3, #3
 8003992:	e000      	b.n	8003996 <NVIC_EncodePriority+0x32>
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003998:	f04f 32ff 	mov.w	r2, #4294967295
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43da      	mvns	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	401a      	ands	r2, r3
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039ac:	f04f 31ff 	mov.w	r1, #4294967295
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	fa01 f303 	lsl.w	r3, r1, r3
 80039b6:	43d9      	mvns	r1, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039bc:	4313      	orrs	r3, r2
         );
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3724      	adds	r7, #36	@ 0x24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039dc:	d301      	bcc.n	80039e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039de:	2301      	movs	r3, #1
 80039e0:	e00f      	b.n	8003a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039e2:	4a0a      	ldr	r2, [pc, #40]	@ (8003a0c <SysTick_Config+0x40>)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ea:	210f      	movs	r1, #15
 80039ec:	f04f 30ff 	mov.w	r0, #4294967295
 80039f0:	f7ff ff8e 	bl	8003910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039f4:	4b05      	ldr	r3, [pc, #20]	@ (8003a0c <SysTick_Config+0x40>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039fa:	4b04      	ldr	r3, [pc, #16]	@ (8003a0c <SysTick_Config+0x40>)
 80039fc:	2207      	movs	r2, #7
 80039fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	e000e010 	.word	0xe000e010

08003a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff ff29 	bl	8003870 <__NVIC_SetPriorityGrouping>
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b086      	sub	sp, #24
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a38:	f7ff ff3e 	bl	80038b8 <__NVIC_GetPriorityGrouping>
 8003a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	6978      	ldr	r0, [r7, #20]
 8003a44:	f7ff ff8e 	bl	8003964 <NVIC_EncodePriority>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ff5d 	bl	8003910 <__NVIC_SetPriority>
}
 8003a56:	bf00      	nop
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	4603      	mov	r3, r0
 8003a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff ff31 	bl	80038d4 <__NVIC_EnableIRQ>
}
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff ffa2 	bl	80039cc <SysTick_Config>
 8003a88:	4603      	mov	r3, r0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b089      	sub	sp, #36	@ 0x24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	e177      	b.n	8003da0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	f040 8166 	bne.w	8003d9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d005      	beq.n	8003ae6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d130      	bne.n	8003b48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	2203      	movs	r2, #3
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4013      	ands	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	f003 0201 	and.w	r2, r3, #1
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d017      	beq.n	8003b84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	2203      	movs	r2, #3
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d123      	bne.n	8003bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	08da      	lsrs	r2, r3, #3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3208      	adds	r2, #8
 8003b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	220f      	movs	r2, #15
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	08da      	lsrs	r2, r3, #3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3208      	adds	r2, #8
 8003bd2:	69b9      	ldr	r1, [r7, #24]
 8003bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	2203      	movs	r2, #3
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 0203 	and.w	r2, r3, #3
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80c0 	beq.w	8003d9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	4b66      	ldr	r3, [pc, #408]	@ (8003db8 <HAL_GPIO_Init+0x324>)
 8003c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c22:	4a65      	ldr	r2, [pc, #404]	@ (8003db8 <HAL_GPIO_Init+0x324>)
 8003c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c2a:	4b63      	ldr	r3, [pc, #396]	@ (8003db8 <HAL_GPIO_Init+0x324>)
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c36:	4a61      	ldr	r2, [pc, #388]	@ (8003dbc <HAL_GPIO_Init+0x328>)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	089b      	lsrs	r3, r3, #2
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	220f      	movs	r2, #15
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4013      	ands	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a58      	ldr	r2, [pc, #352]	@ (8003dc0 <HAL_GPIO_Init+0x32c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d037      	beq.n	8003cd2 <HAL_GPIO_Init+0x23e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a57      	ldr	r2, [pc, #348]	@ (8003dc4 <HAL_GPIO_Init+0x330>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d031      	beq.n	8003cce <HAL_GPIO_Init+0x23a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a56      	ldr	r2, [pc, #344]	@ (8003dc8 <HAL_GPIO_Init+0x334>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d02b      	beq.n	8003cca <HAL_GPIO_Init+0x236>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a55      	ldr	r2, [pc, #340]	@ (8003dcc <HAL_GPIO_Init+0x338>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d025      	beq.n	8003cc6 <HAL_GPIO_Init+0x232>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a54      	ldr	r2, [pc, #336]	@ (8003dd0 <HAL_GPIO_Init+0x33c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01f      	beq.n	8003cc2 <HAL_GPIO_Init+0x22e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a53      	ldr	r2, [pc, #332]	@ (8003dd4 <HAL_GPIO_Init+0x340>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d019      	beq.n	8003cbe <HAL_GPIO_Init+0x22a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a52      	ldr	r2, [pc, #328]	@ (8003dd8 <HAL_GPIO_Init+0x344>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_GPIO_Init+0x226>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a51      	ldr	r2, [pc, #324]	@ (8003ddc <HAL_GPIO_Init+0x348>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00d      	beq.n	8003cb6 <HAL_GPIO_Init+0x222>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a50      	ldr	r2, [pc, #320]	@ (8003de0 <HAL_GPIO_Init+0x34c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <HAL_GPIO_Init+0x21e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a4f      	ldr	r2, [pc, #316]	@ (8003de4 <HAL_GPIO_Init+0x350>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d101      	bne.n	8003cae <HAL_GPIO_Init+0x21a>
 8003caa:	2309      	movs	r3, #9
 8003cac:	e012      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cae:	230a      	movs	r3, #10
 8003cb0:	e010      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	e00e      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cb6:	2307      	movs	r3, #7
 8003cb8:	e00c      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cba:	2306      	movs	r3, #6
 8003cbc:	e00a      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cbe:	2305      	movs	r3, #5
 8003cc0:	e008      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	e006      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e004      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e002      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	f002 0203 	and.w	r2, r2, #3
 8003cda:	0092      	lsls	r2, r2, #2
 8003cdc:	4093      	lsls	r3, r2
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ce4:	4935      	ldr	r1, [pc, #212]	@ (8003dbc <HAL_GPIO_Init+0x328>)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	3302      	adds	r3, #2
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8003de8 <HAL_GPIO_Init+0x354>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d16:	4a34      	ldr	r2, [pc, #208]	@ (8003de8 <HAL_GPIO_Init+0x354>)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d1c:	4b32      	ldr	r3, [pc, #200]	@ (8003de8 <HAL_GPIO_Init+0x354>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d40:	4a29      	ldr	r2, [pc, #164]	@ (8003de8 <HAL_GPIO_Init+0x354>)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d46:	4b28      	ldr	r3, [pc, #160]	@ (8003de8 <HAL_GPIO_Init+0x354>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8003de8 <HAL_GPIO_Init+0x354>)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d70:	4b1d      	ldr	r3, [pc, #116]	@ (8003de8 <HAL_GPIO_Init+0x354>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d94:	4a14      	ldr	r2, [pc, #80]	@ (8003de8 <HAL_GPIO_Init+0x354>)
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	2b0f      	cmp	r3, #15
 8003da4:	f67f ae84 	bls.w	8003ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	3724      	adds	r7, #36	@ 0x24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40013800 	.word	0x40013800
 8003dc0:	40020000 	.word	0x40020000
 8003dc4:	40020400 	.word	0x40020400
 8003dc8:	40020800 	.word	0x40020800
 8003dcc:	40020c00 	.word	0x40020c00
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40021400 	.word	0x40021400
 8003dd8:	40021800 	.word	0x40021800
 8003ddc:	40021c00 	.word	0x40021c00
 8003de0:	40022000 	.word	0x40022000
 8003de4:	40022400 	.word	0x40022400
 8003de8:	40013c00 	.word	0x40013c00

08003dec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	e0d9      	b.n	8003fbc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e08:	2201      	movs	r2, #1
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	4013      	ands	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	f040 80c9 	bne.w	8003fb6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003e24:	4a6b      	ldr	r2, [pc, #428]	@ (8003fd4 <HAL_GPIO_DeInit+0x1e8>)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	089b      	lsrs	r3, r3, #2
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e30:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	220f      	movs	r2, #15
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	4013      	ands	r3, r2
 8003e44:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a63      	ldr	r2, [pc, #396]	@ (8003fd8 <HAL_GPIO_DeInit+0x1ec>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d037      	beq.n	8003ebe <HAL_GPIO_DeInit+0xd2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a62      	ldr	r2, [pc, #392]	@ (8003fdc <HAL_GPIO_DeInit+0x1f0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d031      	beq.n	8003eba <HAL_GPIO_DeInit+0xce>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a61      	ldr	r2, [pc, #388]	@ (8003fe0 <HAL_GPIO_DeInit+0x1f4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d02b      	beq.n	8003eb6 <HAL_GPIO_DeInit+0xca>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a60      	ldr	r2, [pc, #384]	@ (8003fe4 <HAL_GPIO_DeInit+0x1f8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d025      	beq.n	8003eb2 <HAL_GPIO_DeInit+0xc6>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a5f      	ldr	r2, [pc, #380]	@ (8003fe8 <HAL_GPIO_DeInit+0x1fc>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01f      	beq.n	8003eae <HAL_GPIO_DeInit+0xc2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a5e      	ldr	r2, [pc, #376]	@ (8003fec <HAL_GPIO_DeInit+0x200>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d019      	beq.n	8003eaa <HAL_GPIO_DeInit+0xbe>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a5d      	ldr	r2, [pc, #372]	@ (8003ff0 <HAL_GPIO_DeInit+0x204>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <HAL_GPIO_DeInit+0xba>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a5c      	ldr	r2, [pc, #368]	@ (8003ff4 <HAL_GPIO_DeInit+0x208>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00d      	beq.n	8003ea2 <HAL_GPIO_DeInit+0xb6>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a5b      	ldr	r2, [pc, #364]	@ (8003ff8 <HAL_GPIO_DeInit+0x20c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d007      	beq.n	8003e9e <HAL_GPIO_DeInit+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a5a      	ldr	r2, [pc, #360]	@ (8003ffc <HAL_GPIO_DeInit+0x210>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d101      	bne.n	8003e9a <HAL_GPIO_DeInit+0xae>
 8003e96:	2309      	movs	r3, #9
 8003e98:	e012      	b.n	8003ec0 <HAL_GPIO_DeInit+0xd4>
 8003e9a:	230a      	movs	r3, #10
 8003e9c:	e010      	b.n	8003ec0 <HAL_GPIO_DeInit+0xd4>
 8003e9e:	2308      	movs	r3, #8
 8003ea0:	e00e      	b.n	8003ec0 <HAL_GPIO_DeInit+0xd4>
 8003ea2:	2307      	movs	r3, #7
 8003ea4:	e00c      	b.n	8003ec0 <HAL_GPIO_DeInit+0xd4>
 8003ea6:	2306      	movs	r3, #6
 8003ea8:	e00a      	b.n	8003ec0 <HAL_GPIO_DeInit+0xd4>
 8003eaa:	2305      	movs	r3, #5
 8003eac:	e008      	b.n	8003ec0 <HAL_GPIO_DeInit+0xd4>
 8003eae:	2304      	movs	r3, #4
 8003eb0:	e006      	b.n	8003ec0 <HAL_GPIO_DeInit+0xd4>
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e004      	b.n	8003ec0 <HAL_GPIO_DeInit+0xd4>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e002      	b.n	8003ec0 <HAL_GPIO_DeInit+0xd4>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <HAL_GPIO_DeInit+0xd4>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	f002 0203 	and.w	r2, r2, #3
 8003ec6:	0092      	lsls	r2, r2, #2
 8003ec8:	4093      	lsls	r3, r2
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d132      	bne.n	8003f36 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8004000 <HAL_GPIO_DeInit+0x214>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	4949      	ldr	r1, [pc, #292]	@ (8004000 <HAL_GPIO_DeInit+0x214>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003ede:	4b48      	ldr	r3, [pc, #288]	@ (8004000 <HAL_GPIO_DeInit+0x214>)
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	4946      	ldr	r1, [pc, #280]	@ (8004000 <HAL_GPIO_DeInit+0x214>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003eec:	4b44      	ldr	r3, [pc, #272]	@ (8004000 <HAL_GPIO_DeInit+0x214>)
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	4942      	ldr	r1, [pc, #264]	@ (8004000 <HAL_GPIO_DeInit+0x214>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003efa:	4b41      	ldr	r3, [pc, #260]	@ (8004000 <HAL_GPIO_DeInit+0x214>)
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	43db      	mvns	r3, r3
 8003f02:	493f      	ldr	r1, [pc, #252]	@ (8004000 <HAL_GPIO_DeInit+0x214>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	220f      	movs	r2, #15
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003f18:	4a2e      	ldr	r2, [pc, #184]	@ (8003fd4 <HAL_GPIO_DeInit+0x1e8>)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	089b      	lsrs	r3, r3, #2
 8003f1e:	3302      	adds	r3, #2
 8003f20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	43da      	mvns	r2, r3
 8003f28:	482a      	ldr	r0, [pc, #168]	@ (8003fd4 <HAL_GPIO_DeInit+0x1e8>)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	400a      	ands	r2, r1
 8003f30:	3302      	adds	r3, #2
 8003f32:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	2103      	movs	r1, #3
 8003f40:	fa01 f303 	lsl.w	r3, r1, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	401a      	ands	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	08da      	lsrs	r2, r3, #3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3208      	adds	r2, #8
 8003f54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	220f      	movs	r2, #15
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	08d2      	lsrs	r2, r2, #3
 8003f6c:	4019      	ands	r1, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3208      	adds	r2, #8
 8003f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	2103      	movs	r1, #3
 8003f80:	fa01 f303 	lsl.w	r3, r1, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	401a      	ands	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	2101      	movs	r1, #1
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	fa01 f303 	lsl.w	r3, r1, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	401a      	ands	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	2103      	movs	r1, #3
 8003faa:	fa01 f303 	lsl.w	r3, r1, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	401a      	ands	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2b0f      	cmp	r3, #15
 8003fc0:	f67f af22 	bls.w	8003e08 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40013800 	.word	0x40013800
 8003fd8:	40020000 	.word	0x40020000
 8003fdc:	40020400 	.word	0x40020400
 8003fe0:	40020800 	.word	0x40020800
 8003fe4:	40020c00 	.word	0x40020c00
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40021400 	.word	0x40021400
 8003ff0:	40021800 	.word	0x40021800
 8003ff4:	40021c00 	.word	0x40021c00
 8003ff8:	40022000 	.word	0x40022000
 8003ffc:	40022400 	.word	0x40022400
 8004000:	40013c00 	.word	0x40013c00

08004004 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	887b      	ldrh	r3, [r7, #2]
 8004016:	4013      	ands	r3, r2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800401c:	2301      	movs	r3, #1
 800401e:	73fb      	strb	r3, [r7, #15]
 8004020:	e001      	b.n	8004026 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004022:	2300      	movs	r3, #0
 8004024:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004026:	7bfb      	ldrb	r3, [r7, #15]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	807b      	strh	r3, [r7, #2]
 8004040:	4613      	mov	r3, r2
 8004042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004044:	787b      	ldrb	r3, [r7, #1]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800404a:	887a      	ldrh	r2, [r7, #2]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004050:	e003      	b.n	800405a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004052:	887b      	ldrh	r3, [r7, #2]
 8004054:	041a      	lsls	r2, r3, #16
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	619a      	str	r2, [r3, #24]
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004072:	4b08      	ldr	r3, [pc, #32]	@ (8004094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	4013      	ands	r3, r2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d006      	beq.n	800408c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800407e:	4a05      	ldr	r2, [pc, #20]	@ (8004094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004080:	88fb      	ldrh	r3, [r7, #6]
 8004082:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004084:	88fb      	ldrh	r3, [r7, #6]
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc fdf0 	bl	8000c6c <HAL_GPIO_EXTI_Callback>
  }
}
 800408c:	bf00      	nop
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40013c00 	.word	0x40013c00

08004098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e12b      	b.n	8004302 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fe fd0e 	bl	8002ae0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2224      	movs	r2, #36	@ 0x24
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0201 	bic.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040fc:	f001 ff82 	bl	8006004 <HAL_RCC_GetPCLK1Freq>
 8004100:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4a81      	ldr	r2, [pc, #516]	@ (800430c <HAL_I2C_Init+0x274>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d807      	bhi.n	800411c <HAL_I2C_Init+0x84>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4a80      	ldr	r2, [pc, #512]	@ (8004310 <HAL_I2C_Init+0x278>)
 8004110:	4293      	cmp	r3, r2
 8004112:	bf94      	ite	ls
 8004114:	2301      	movls	r3, #1
 8004116:	2300      	movhi	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	e006      	b.n	800412a <HAL_I2C_Init+0x92>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4a7d      	ldr	r2, [pc, #500]	@ (8004314 <HAL_I2C_Init+0x27c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	bf94      	ite	ls
 8004124:	2301      	movls	r3, #1
 8004126:	2300      	movhi	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e0e7      	b.n	8004302 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4a78      	ldr	r2, [pc, #480]	@ (8004318 <HAL_I2C_Init+0x280>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	0c9b      	lsrs	r3, r3, #18
 800413c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	4a6a      	ldr	r2, [pc, #424]	@ (800430c <HAL_I2C_Init+0x274>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d802      	bhi.n	800416c <HAL_I2C_Init+0xd4>
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	3301      	adds	r3, #1
 800416a:	e009      	b.n	8004180 <HAL_I2C_Init+0xe8>
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	4a69      	ldr	r2, [pc, #420]	@ (800431c <HAL_I2C_Init+0x284>)
 8004178:	fba2 2303 	umull	r2, r3, r2, r3
 800417c:	099b      	lsrs	r3, r3, #6
 800417e:	3301      	adds	r3, #1
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	430b      	orrs	r3, r1
 8004186:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004192:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	495c      	ldr	r1, [pc, #368]	@ (800430c <HAL_I2C_Init+0x274>)
 800419c:	428b      	cmp	r3, r1
 800419e:	d819      	bhi.n	80041d4 <HAL_I2C_Init+0x13c>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	1e59      	subs	r1, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80041ae:	1c59      	adds	r1, r3, #1
 80041b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80041b4:	400b      	ands	r3, r1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_I2C_Init+0x138>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1e59      	subs	r1, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80041c8:	3301      	adds	r3, #1
 80041ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ce:	e051      	b.n	8004274 <HAL_I2C_Init+0x1dc>
 80041d0:	2304      	movs	r3, #4
 80041d2:	e04f      	b.n	8004274 <HAL_I2C_Init+0x1dc>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d111      	bne.n	8004200 <HAL_I2C_Init+0x168>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	1e58      	subs	r0, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	440b      	add	r3, r1
 80041ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ee:	3301      	adds	r3, #1
 80041f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bf0c      	ite	eq
 80041f8:	2301      	moveq	r3, #1
 80041fa:	2300      	movne	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	e012      	b.n	8004226 <HAL_I2C_Init+0x18e>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	1e58      	subs	r0, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6859      	ldr	r1, [r3, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	0099      	lsls	r1, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	fbb0 f3f3 	udiv	r3, r0, r3
 8004216:	3301      	adds	r3, #1
 8004218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800421c:	2b00      	cmp	r3, #0
 800421e:	bf0c      	ite	eq
 8004220:	2301      	moveq	r3, #1
 8004222:	2300      	movne	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_I2C_Init+0x196>
 800422a:	2301      	movs	r3, #1
 800422c:	e022      	b.n	8004274 <HAL_I2C_Init+0x1dc>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10e      	bne.n	8004254 <HAL_I2C_Init+0x1bc>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1e58      	subs	r0, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6859      	ldr	r1, [r3, #4]
 800423e:	460b      	mov	r3, r1
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	440b      	add	r3, r1
 8004244:	fbb0 f3f3 	udiv	r3, r0, r3
 8004248:	3301      	adds	r3, #1
 800424a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800424e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004252:	e00f      	b.n	8004274 <HAL_I2C_Init+0x1dc>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	1e58      	subs	r0, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6859      	ldr	r1, [r3, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	0099      	lsls	r1, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	fbb0 f3f3 	udiv	r3, r0, r3
 800426a:	3301      	adds	r3, #1
 800426c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004270:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	6809      	ldr	r1, [r1, #0]
 8004278:	4313      	orrs	r3, r2
 800427a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69da      	ldr	r2, [r3, #28]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80042a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6911      	ldr	r1, [r2, #16]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68d2      	ldr	r2, [r2, #12]
 80042ae:	4311      	orrs	r1, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	430b      	orrs	r3, r1
 80042b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	000186a0 	.word	0x000186a0
 8004310:	001e847f 	.word	0x001e847f
 8004314:	003d08ff 	.word	0x003d08ff
 8004318:	431bde83 	.word	0x431bde83
 800431c:	10624dd3 	.word	0x10624dd3

08004320 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af02      	add	r7, sp, #8
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	4608      	mov	r0, r1
 800432a:	4611      	mov	r1, r2
 800432c:	461a      	mov	r2, r3
 800432e:	4603      	mov	r3, r0
 8004330:	817b      	strh	r3, [r7, #10]
 8004332:	460b      	mov	r3, r1
 8004334:	813b      	strh	r3, [r7, #8]
 8004336:	4613      	mov	r3, r2
 8004338:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800433a:	f7ff fa69 	bl	8003810 <HAL_GetTick>
 800433e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b20      	cmp	r3, #32
 800434a:	f040 80d9 	bne.w	8004500 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	2319      	movs	r3, #25
 8004354:	2201      	movs	r2, #1
 8004356:	496d      	ldr	r1, [pc, #436]	@ (800450c <HAL_I2C_Mem_Write+0x1ec>)
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fc8b 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004364:	2302      	movs	r3, #2
 8004366:	e0cc      	b.n	8004502 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_I2C_Mem_Write+0x56>
 8004372:	2302      	movs	r3, #2
 8004374:	e0c5      	b.n	8004502 <HAL_I2C_Mem_Write+0x1e2>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d007      	beq.n	800439c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2221      	movs	r2, #33	@ 0x21
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2240      	movs	r2, #64	@ 0x40
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a3a      	ldr	r2, [r7, #32]
 80043c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80043cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4a4d      	ldr	r2, [pc, #308]	@ (8004510 <HAL_I2C_Mem_Write+0x1f0>)
 80043dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043de:	88f8      	ldrh	r0, [r7, #6]
 80043e0:	893a      	ldrh	r2, [r7, #8]
 80043e2:	8979      	ldrh	r1, [r7, #10]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	9301      	str	r3, [sp, #4]
 80043e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	4603      	mov	r3, r0
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 fac2 	bl	8004978 <I2C_RequestMemoryWrite>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d052      	beq.n	80044a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e081      	b.n	8004502 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 fd50 	bl	8004ea8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00d      	beq.n	800442a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	2b04      	cmp	r3, #4
 8004414:	d107      	bne.n	8004426 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004424:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e06b      	b.n	8004502 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442e:	781a      	ldrb	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b04      	cmp	r3, #4
 8004466:	d11b      	bne.n	80044a0 <HAL_I2C_Mem_Write+0x180>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446c:	2b00      	cmp	r3, #0
 800446e:	d017      	beq.n	80044a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	781a      	ldrb	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800448a:	3b01      	subs	r3, #1
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1aa      	bne.n	80043fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fd43 	bl	8004f38 <I2C_WaitOnBTFFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00d      	beq.n	80044d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d107      	bne.n	80044d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e016      	b.n	8004502 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	e000      	b.n	8004502 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004500:	2302      	movs	r3, #2
  }
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	00100002 	.word	0x00100002
 8004510:	ffff0000 	.word	0xffff0000

08004514 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08c      	sub	sp, #48	@ 0x30
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	4608      	mov	r0, r1
 800451e:	4611      	mov	r1, r2
 8004520:	461a      	mov	r2, r3
 8004522:	4603      	mov	r3, r0
 8004524:	817b      	strh	r3, [r7, #10]
 8004526:	460b      	mov	r3, r1
 8004528:	813b      	strh	r3, [r7, #8]
 800452a:	4613      	mov	r3, r2
 800452c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800452e:	f7ff f96f 	bl	8003810 <HAL_GetTick>
 8004532:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b20      	cmp	r3, #32
 800453e:	f040 8214 	bne.w	800496a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	2319      	movs	r3, #25
 8004548:	2201      	movs	r2, #1
 800454a:	497b      	ldr	r1, [pc, #492]	@ (8004738 <HAL_I2C_Mem_Read+0x224>)
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fb91 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004558:	2302      	movs	r3, #2
 800455a:	e207      	b.n	800496c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_I2C_Mem_Read+0x56>
 8004566:	2302      	movs	r3, #2
 8004568:	e200      	b.n	800496c <HAL_I2C_Mem_Read+0x458>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b01      	cmp	r3, #1
 800457e:	d007      	beq.n	8004590 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800459e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2222      	movs	r2, #34	@ 0x22
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2240      	movs	r2, #64	@ 0x40
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80045c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4a5b      	ldr	r2, [pc, #364]	@ (800473c <HAL_I2C_Mem_Read+0x228>)
 80045d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045d2:	88f8      	ldrh	r0, [r7, #6]
 80045d4:	893a      	ldrh	r2, [r7, #8]
 80045d6:	8979      	ldrh	r1, [r7, #10]
 80045d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	4603      	mov	r3, r0
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fa5e 	bl	8004aa4 <I2C_RequestMemoryRead>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e1bc      	b.n	800496c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d113      	bne.n	8004622 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fa:	2300      	movs	r3, #0
 80045fc:	623b      	str	r3, [r7, #32]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	623b      	str	r3, [r7, #32]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	623b      	str	r3, [r7, #32]
 800460e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	e190      	b.n	8004944 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004626:	2b01      	cmp	r3, #1
 8004628:	d11b      	bne.n	8004662 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004638:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	61fb      	str	r3, [r7, #28]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	e170      	b.n	8004944 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004666:	2b02      	cmp	r3, #2
 8004668:	d11b      	bne.n	80046a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004678:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004688:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	e150      	b.n	8004944 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80046b8:	e144      	b.n	8004944 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046be:	2b03      	cmp	r3, #3
 80046c0:	f200 80f1 	bhi.w	80048a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d123      	bne.n	8004714 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fc79 	bl	8004fc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e145      	b.n	800496c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004712:	e117      	b.n	8004944 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004718:	2b02      	cmp	r3, #2
 800471a:	d14e      	bne.n	80047ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800471c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004722:	2200      	movs	r2, #0
 8004724:	4906      	ldr	r1, [pc, #24]	@ (8004740 <HAL_I2C_Mem_Read+0x22c>)
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 faa4 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d008      	beq.n	8004744 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e11a      	b.n	800496c <HAL_I2C_Mem_Read+0x458>
 8004736:	bf00      	nop
 8004738:	00100002 	.word	0x00100002
 800473c:	ffff0000 	.word	0xffff0000
 8004740:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004752:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047b8:	e0c4      	b.n	8004944 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c0:	2200      	movs	r2, #0
 80047c2:	496c      	ldr	r1, [pc, #432]	@ (8004974 <HAL_I2C_Mem_Read+0x460>)
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 fa55 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0cb      	b.n	800496c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481c:	2200      	movs	r2, #0
 800481e:	4955      	ldr	r1, [pc, #340]	@ (8004974 <HAL_I2C_Mem_Read+0x460>)
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fa27 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e09d      	b.n	800496c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800483e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048a4:	e04e      	b.n	8004944 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fb8c 	bl	8004fc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e058      	b.n	800496c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d124      	bne.n	8004944 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d107      	bne.n	8004912 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004910:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004948:	2b00      	cmp	r3, #0
 800494a:	f47f aeb6 	bne.w	80046ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	e000      	b.n	800496c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800496a:	2302      	movs	r3, #2
  }
}
 800496c:	4618      	mov	r0, r3
 800496e:	3728      	adds	r7, #40	@ 0x28
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	00010004 	.word	0x00010004

08004978 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	4608      	mov	r0, r1
 8004982:	4611      	mov	r1, r2
 8004984:	461a      	mov	r2, r3
 8004986:	4603      	mov	r3, r0
 8004988:	817b      	strh	r3, [r7, #10]
 800498a:	460b      	mov	r3, r1
 800498c:	813b      	strh	r3, [r7, #8]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f960 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00d      	beq.n	80049d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049c8:	d103      	bne.n	80049d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e05f      	b.n	8004a96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049d6:	897b      	ldrh	r3, [r7, #10]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	6a3a      	ldr	r2, [r7, #32]
 80049ea:	492d      	ldr	r1, [pc, #180]	@ (8004aa0 <I2C_RequestMemoryWrite+0x128>)
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f9bb 	bl	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e04c      	b.n	8004a96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a14:	6a39      	ldr	r1, [r7, #32]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 fa46 	bl	8004ea8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00d      	beq.n	8004a3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d107      	bne.n	8004a3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e02b      	b.n	8004a96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a3e:	88fb      	ldrh	r3, [r7, #6]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d105      	bne.n	8004a50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a44:	893b      	ldrh	r3, [r7, #8]
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	611a      	str	r2, [r3, #16]
 8004a4e:	e021      	b.n	8004a94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a50:	893b      	ldrh	r3, [r7, #8]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a60:	6a39      	ldr	r1, [r7, #32]
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fa20 	bl	8004ea8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00d      	beq.n	8004a8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d107      	bne.n	8004a86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e005      	b.n	8004a96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a8a:	893b      	ldrh	r3, [r7, #8]
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	00010002 	.word	0x00010002

08004aa4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	4608      	mov	r0, r1
 8004aae:	4611      	mov	r1, r2
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	817b      	strh	r3, [r7, #10]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	813b      	strh	r3, [r7, #8]
 8004aba:	4613      	mov	r3, r2
 8004abc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004acc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004adc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 f8c2 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00d      	beq.n	8004b12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b04:	d103      	bne.n	8004b0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e0aa      	b.n	8004c68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b12:	897b      	ldrh	r3, [r7, #10]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	461a      	mov	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b24:	6a3a      	ldr	r2, [r7, #32]
 8004b26:	4952      	ldr	r1, [pc, #328]	@ (8004c70 <I2C_RequestMemoryRead+0x1cc>)
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f91d 	bl	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e097      	b.n	8004c68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b38:	2300      	movs	r3, #0
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b50:	6a39      	ldr	r1, [r7, #32]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f9a8 	bl	8004ea8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00d      	beq.n	8004b7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d107      	bne.n	8004b76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e076      	b.n	8004c68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d105      	bne.n	8004b8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b80:	893b      	ldrh	r3, [r7, #8]
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	611a      	str	r2, [r3, #16]
 8004b8a:	e021      	b.n	8004bd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b8c:	893b      	ldrh	r3, [r7, #8]
 8004b8e:	0a1b      	lsrs	r3, r3, #8
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b9c:	6a39      	ldr	r1, [r7, #32]
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f982 	bl	8004ea8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00d      	beq.n	8004bc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d107      	bne.n	8004bc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e050      	b.n	8004c68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bc6:	893b      	ldrh	r3, [r7, #8]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd2:	6a39      	ldr	r1, [r7, #32]
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f967 	bl	8004ea8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00d      	beq.n	8004bfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d107      	bne.n	8004bf8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bf6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e035      	b.n	8004c68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f82b 	bl	8004c74 <I2C_WaitOnFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00d      	beq.n	8004c40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c32:	d103      	bne.n	8004c3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e013      	b.n	8004c68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c40:	897b      	ldrh	r3, [r7, #10]
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c52:	6a3a      	ldr	r2, [r7, #32]
 8004c54:	4906      	ldr	r1, [pc, #24]	@ (8004c70 <I2C_RequestMemoryRead+0x1cc>)
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 f886 	bl	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	00010002 	.word	0x00010002

08004c74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	4613      	mov	r3, r2
 8004c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c84:	e048      	b.n	8004d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d044      	beq.n	8004d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8e:	f7fe fdbf 	bl	8003810 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d302      	bcc.n	8004ca4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d139      	bne.n	8004d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	0c1b      	lsrs	r3, r3, #16
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d10d      	bne.n	8004cca <I2C_WaitOnFlagUntilTimeout+0x56>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	43da      	mvns	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4013      	ands	r3, r2
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	bf0c      	ite	eq
 8004cc0:	2301      	moveq	r3, #1
 8004cc2:	2300      	movne	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	e00c      	b.n	8004ce4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	43da      	mvns	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bf0c      	ite	eq
 8004cdc:	2301      	moveq	r3, #1
 8004cde:	2300      	movne	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d116      	bne.n	8004d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d04:	f043 0220 	orr.w	r2, r3, #32
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e023      	b.n	8004d60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	0c1b      	lsrs	r3, r3, #16
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d10d      	bne.n	8004d3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	43da      	mvns	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf0c      	ite	eq
 8004d34:	2301      	moveq	r3, #1
 8004d36:	2300      	movne	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	e00c      	b.n	8004d58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	43da      	mvns	r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d093      	beq.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d76:	e071      	b.n	8004e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d86:	d123      	bne.n	8004dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004da0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbc:	f043 0204 	orr.w	r2, r3, #4
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e067      	b.n	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd6:	d041      	beq.n	8004e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd8:	f7fe fd1a 	bl	8003810 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d302      	bcc.n	8004dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d136      	bne.n	8004e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d10c      	bne.n	8004e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	43da      	mvns	r2, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	4013      	ands	r3, r2
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bf14      	ite	ne
 8004e0a:	2301      	movne	r3, #1
 8004e0c:	2300      	moveq	r3, #0
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	e00b      	b.n	8004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	43da      	mvns	r2, r3
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bf14      	ite	ne
 8004e24:	2301      	movne	r3, #1
 8004e26:	2300      	moveq	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d016      	beq.n	8004e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e48:	f043 0220 	orr.w	r2, r3, #32
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e021      	b.n	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	0c1b      	lsrs	r3, r3, #16
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d10c      	bne.n	8004e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	43da      	mvns	r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4013      	ands	r3, r2
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf14      	ite	ne
 8004e78:	2301      	movne	r3, #1
 8004e7a:	2300      	moveq	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	e00b      	b.n	8004e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	43da      	mvns	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bf14      	ite	ne
 8004e92:	2301      	movne	r3, #1
 8004e94:	2300      	moveq	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f47f af6d 	bne.w	8004d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eb4:	e034      	b.n	8004f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 f8e3 	bl	8005082 <I2C_IsAcknowledgeFailed>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e034      	b.n	8004f30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d028      	beq.n	8004f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ece:	f7fe fc9f 	bl	8003810 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d302      	bcc.n	8004ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d11d      	bne.n	8004f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eee:	2b80      	cmp	r3, #128	@ 0x80
 8004ef0:	d016      	beq.n	8004f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0c:	f043 0220 	orr.w	r2, r3, #32
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e007      	b.n	8004f30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2a:	2b80      	cmp	r3, #128	@ 0x80
 8004f2c:	d1c3      	bne.n	8004eb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f44:	e034      	b.n	8004fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 f89b 	bl	8005082 <I2C_IsAcknowledgeFailed>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e034      	b.n	8004fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5c:	d028      	beq.n	8004fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f5e:	f7fe fc57 	bl	8003810 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d302      	bcc.n	8004f74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d11d      	bne.n	8004fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d016      	beq.n	8004fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9c:	f043 0220 	orr.w	r2, r3, #32
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e007      	b.n	8004fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d1c3      	bne.n	8004f46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fd4:	e049      	b.n	800506a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f003 0310 	and.w	r3, r3, #16
 8004fe0:	2b10      	cmp	r3, #16
 8004fe2:	d119      	bne.n	8005018 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0210 	mvn.w	r2, #16
 8004fec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e030      	b.n	800507a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005018:	f7fe fbfa 	bl	8003810 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	429a      	cmp	r2, r3
 8005026:	d302      	bcc.n	800502e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d11d      	bne.n	800506a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005038:	2b40      	cmp	r3, #64	@ 0x40
 800503a:	d016      	beq.n	800506a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005056:	f043 0220 	orr.w	r2, r3, #32
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e007      	b.n	800507a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005074:	2b40      	cmp	r3, #64	@ 0x40
 8005076:	d1ae      	bne.n	8004fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005098:	d11b      	bne.n	80050d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	f043 0204 	orr.w	r2, r3, #4
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d129      	bne.n	800514a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2224      	movs	r2, #36	@ 0x24
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0201 	bic.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 0210 	bic.w	r2, r2, #16
 800511c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0201 	orr.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	e000      	b.n	800514c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800514a:	2302      	movs	r3, #2
  }
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b20      	cmp	r3, #32
 8005170:	d12a      	bne.n	80051c8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2224      	movs	r2, #36	@ 0x24
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0201 	bic.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005190:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005192:	89fb      	ldrh	r3, [r7, #14]
 8005194:	f023 030f 	bic.w	r3, r3, #15
 8005198:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	b29a      	uxth	r2, r3
 800519e:	89fb      	ldrh	r3, [r7, #14]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	89fa      	ldrh	r2, [r7, #14]
 80051aa:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e000      	b.n	80051ca <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80051c8:	2302      	movs	r3, #2
  }
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e0bf      	b.n	800536a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fd fcd8 	bl	8002bb4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800521a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6999      	ldr	r1, [r3, #24]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005230:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6899      	ldr	r1, [r3, #8]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	4b4a      	ldr	r3, [pc, #296]	@ (8005374 <HAL_LTDC_Init+0x19c>)
 800524c:	400b      	ands	r3, r1
 800524e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	041b      	lsls	r3, r3, #16
 8005256:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6899      	ldr	r1, [r3, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68d9      	ldr	r1, [r3, #12]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4b3e      	ldr	r3, [pc, #248]	@ (8005374 <HAL_LTDC_Init+0x19c>)
 800527a:	400b      	ands	r3, r1
 800527c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	041b      	lsls	r3, r3, #16
 8005284:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68d9      	ldr	r1, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1a      	ldr	r2, [r3, #32]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6919      	ldr	r1, [r3, #16]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	4b33      	ldr	r3, [pc, #204]	@ (8005374 <HAL_LTDC_Init+0x19c>)
 80052a8:	400b      	ands	r3, r1
 80052aa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	041b      	lsls	r3, r3, #16
 80052b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6919      	ldr	r1, [r3, #16]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6959      	ldr	r1, [r3, #20]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b27      	ldr	r3, [pc, #156]	@ (8005374 <HAL_LTDC_Init+0x19c>)
 80052d6:	400b      	ands	r3, r1
 80052d8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052de:	041b      	lsls	r3, r3, #16
 80052e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6959      	ldr	r1, [r3, #20]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052fe:	021b      	lsls	r3, r3, #8
 8005300:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005308:	041b      	lsls	r3, r3, #16
 800530a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800531a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0206 	orr.w	r2, r2, #6
 8005346:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	f000f800 	.word	0xf000f800

08005378 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005378:	b5b0      	push	{r4, r5, r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_LTDC_ConfigLayer+0x1a>
 800538e:	2302      	movs	r3, #2
 8005390:	e02c      	b.n	80053ec <HAL_LTDC_ConfigLayer+0x74>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2202      	movs	r2, #2
 800539e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2134      	movs	r1, #52	@ 0x34
 80053a8:	fb01 f303 	mul.w	r3, r1, r3
 80053ac:	4413      	add	r3, r2
 80053ae:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	4614      	mov	r4, r2
 80053b6:	461d      	mov	r5, r3
 80053b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053c4:	682b      	ldr	r3, [r5, #0]
 80053c6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f811 	bl	80053f4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2201      	movs	r2, #1
 80053d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bdb0      	pop	{r4, r5, r7, pc}

080053f4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b089      	sub	sp, #36	@ 0x24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	0c1b      	lsrs	r3, r3, #16
 800540c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005410:	4413      	add	r3, r2
 8005412:	041b      	lsls	r3, r3, #16
 8005414:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	01db      	lsls	r3, r3, #7
 8005420:	4413      	add	r3, r2
 8005422:	3384      	adds	r3, #132	@ 0x84
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	4611      	mov	r1, r2
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	01d2      	lsls	r2, r2, #7
 8005430:	440a      	add	r2, r1
 8005432:	3284      	adds	r2, #132	@ 0x84
 8005434:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005438:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	0c1b      	lsrs	r3, r3, #16
 8005446:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800544a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800544c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4619      	mov	r1, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	01db      	lsls	r3, r3, #7
 8005458:	440b      	add	r3, r1
 800545a:	3384      	adds	r3, #132	@ 0x84
 800545c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005462:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005472:	4413      	add	r3, r2
 8005474:	041b      	lsls	r3, r3, #16
 8005476:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	01db      	lsls	r3, r3, #7
 8005482:	4413      	add	r3, r2
 8005484:	3384      	adds	r3, #132	@ 0x84
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	4611      	mov	r1, r2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	01d2      	lsls	r2, r2, #7
 8005492:	440a      	add	r2, r1
 8005494:	3284      	adds	r2, #132	@ 0x84
 8005496:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800549a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054aa:	4413      	add	r3, r2
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4619      	mov	r1, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	01db      	lsls	r3, r3, #7
 80054b8:	440b      	add	r3, r1
 80054ba:	3384      	adds	r3, #132	@ 0x84
 80054bc:	4619      	mov	r1, r3
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	01db      	lsls	r3, r3, #7
 80054ce:	4413      	add	r3, r2
 80054d0:	3384      	adds	r3, #132	@ 0x84
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	4611      	mov	r1, r2
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	01d2      	lsls	r2, r2, #7
 80054de:	440a      	add	r2, r1
 80054e0:	3284      	adds	r2, #132	@ 0x84
 80054e2:	f023 0307 	bic.w	r3, r3, #7
 80054e6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	461a      	mov	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	01db      	lsls	r3, r3, #7
 80054f2:	4413      	add	r3, r2
 80054f4:	3384      	adds	r3, #132	@ 0x84
 80054f6:	461a      	mov	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800550e:	041b      	lsls	r3, r3, #16
 8005510:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	061b      	lsls	r3, r3, #24
 8005518:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	01db      	lsls	r3, r3, #7
 8005524:	4413      	add	r3, r2
 8005526:	3384      	adds	r3, #132	@ 0x84
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	01db      	lsls	r3, r3, #7
 8005534:	4413      	add	r3, r2
 8005536:	3384      	adds	r3, #132	@ 0x84
 8005538:	461a      	mov	r2, r3
 800553a:	2300      	movs	r3, #0
 800553c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005544:	461a      	mov	r2, r3
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	431a      	orrs	r2, r3
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	431a      	orrs	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4619      	mov	r1, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	01db      	lsls	r3, r3, #7
 8005558:	440b      	add	r3, r1
 800555a:	3384      	adds	r3, #132	@ 0x84
 800555c:	4619      	mov	r1, r3
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	461a      	mov	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	01db      	lsls	r3, r3, #7
 800556e:	4413      	add	r3, r2
 8005570:	3384      	adds	r3, #132	@ 0x84
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	6812      	ldr	r2, [r2, #0]
 8005578:	4611      	mov	r1, r2
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	01d2      	lsls	r2, r2, #7
 800557e:	440a      	add	r2, r1
 8005580:	3284      	adds	r2, #132	@ 0x84
 8005582:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005586:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	01db      	lsls	r3, r3, #7
 8005592:	4413      	add	r3, r2
 8005594:	3384      	adds	r3, #132	@ 0x84
 8005596:	461a      	mov	r2, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	01db      	lsls	r3, r3, #7
 80055a8:	4413      	add	r3, r2
 80055aa:	3384      	adds	r3, #132	@ 0x84
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	6812      	ldr	r2, [r2, #0]
 80055b2:	4611      	mov	r1, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	01d2      	lsls	r2, r2, #7
 80055b8:	440a      	add	r2, r1
 80055ba:	3284      	adds	r2, #132	@ 0x84
 80055bc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80055c0:	f023 0307 	bic.w	r3, r3, #7
 80055c4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	69da      	ldr	r2, [r3, #28]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	68f9      	ldr	r1, [r7, #12]
 80055d0:	6809      	ldr	r1, [r1, #0]
 80055d2:	4608      	mov	r0, r1
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	01c9      	lsls	r1, r1, #7
 80055d8:	4401      	add	r1, r0
 80055da:	3184      	adds	r1, #132	@ 0x84
 80055dc:	4313      	orrs	r3, r2
 80055de:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	01db      	lsls	r3, r3, #7
 80055ea:	4413      	add	r3, r2
 80055ec:	3384      	adds	r3, #132	@ 0x84
 80055ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	01db      	lsls	r3, r3, #7
 80055fa:	4413      	add	r3, r2
 80055fc:	3384      	adds	r3, #132	@ 0x84
 80055fe:	461a      	mov	r2, r3
 8005600:	2300      	movs	r3, #0
 8005602:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	01db      	lsls	r3, r3, #7
 800560e:	4413      	add	r3, r2
 8005610:	3384      	adds	r3, #132	@ 0x84
 8005612:	461a      	mov	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d102      	bne.n	8005628 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005622:	2304      	movs	r3, #4
 8005624:	61fb      	str	r3, [r7, #28]
 8005626:	e01b      	b.n	8005660 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d102      	bne.n	8005636 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005630:	2303      	movs	r3, #3
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	e014      	b.n	8005660 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b04      	cmp	r3, #4
 800563c:	d00b      	beq.n	8005656 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005642:	2b02      	cmp	r3, #2
 8005644:	d007      	beq.n	8005656 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800564a:	2b03      	cmp	r3, #3
 800564c:	d003      	beq.n	8005656 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005652:	2b07      	cmp	r3, #7
 8005654:	d102      	bne.n	800565c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005656:	2302      	movs	r3, #2
 8005658:	61fb      	str	r3, [r7, #28]
 800565a:	e001      	b.n	8005660 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800565c:	2301      	movs	r3, #1
 800565e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	01db      	lsls	r3, r3, #7
 800566a:	4413      	add	r3, r2
 800566c:	3384      	adds	r3, #132	@ 0x84
 800566e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	6812      	ldr	r2, [r2, #0]
 8005674:	4611      	mov	r1, r2
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	01d2      	lsls	r2, r2, #7
 800567a:	440a      	add	r2, r1
 800567c:	3284      	adds	r2, #132	@ 0x84
 800567e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005682:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	fb02 f303 	mul.w	r3, r2, r3
 800568e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	6859      	ldr	r1, [r3, #4]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	1acb      	subs	r3, r1, r3
 800569a:	69f9      	ldr	r1, [r7, #28]
 800569c:	fb01 f303 	mul.w	r3, r1, r3
 80056a0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80056a2:	68f9      	ldr	r1, [r7, #12]
 80056a4:	6809      	ldr	r1, [r1, #0]
 80056a6:	4608      	mov	r0, r1
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	01c9      	lsls	r1, r1, #7
 80056ac:	4401      	add	r1, r0
 80056ae:	3184      	adds	r1, #132	@ 0x84
 80056b0:	4313      	orrs	r3, r2
 80056b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	01db      	lsls	r3, r3, #7
 80056be:	4413      	add	r3, r2
 80056c0:	3384      	adds	r3, #132	@ 0x84
 80056c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	6812      	ldr	r2, [r2, #0]
 80056c8:	4611      	mov	r1, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	01d2      	lsls	r2, r2, #7
 80056ce:	440a      	add	r2, r1
 80056d0:	3284      	adds	r2, #132	@ 0x84
 80056d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80056d6:	f023 0307 	bic.w	r3, r3, #7
 80056da:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	01db      	lsls	r3, r3, #7
 80056e6:	4413      	add	r3, r2
 80056e8:	3384      	adds	r3, #132	@ 0x84
 80056ea:	461a      	mov	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	01db      	lsls	r3, r3, #7
 80056fc:	4413      	add	r3, r2
 80056fe:	3384      	adds	r3, #132	@ 0x84
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	4611      	mov	r1, r2
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	01d2      	lsls	r2, r2, #7
 800570c:	440a      	add	r2, r1
 800570e:	3284      	adds	r2, #132	@ 0x84
 8005710:	f043 0301 	orr.w	r3, r3, #1
 8005714:	6013      	str	r3, [r2, #0]
}
 8005716:	bf00      	nop
 8005718:	3724      	adds	r7, #36	@ 0x24
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e267      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d075      	beq.n	800582e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005742:	4b88      	ldr	r3, [pc, #544]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 030c 	and.w	r3, r3, #12
 800574a:	2b04      	cmp	r3, #4
 800574c:	d00c      	beq.n	8005768 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800574e:	4b85      	ldr	r3, [pc, #532]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005756:	2b08      	cmp	r3, #8
 8005758:	d112      	bne.n	8005780 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800575a:	4b82      	ldr	r3, [pc, #520]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005762:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005766:	d10b      	bne.n	8005780 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005768:	4b7e      	ldr	r3, [pc, #504]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d05b      	beq.n	800582c <HAL_RCC_OscConfig+0x108>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d157      	bne.n	800582c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e242      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005788:	d106      	bne.n	8005798 <HAL_RCC_OscConfig+0x74>
 800578a:	4b76      	ldr	r3, [pc, #472]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a75      	ldr	r2, [pc, #468]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 8005790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	e01d      	b.n	80057d4 <HAL_RCC_OscConfig+0xb0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057a0:	d10c      	bne.n	80057bc <HAL_RCC_OscConfig+0x98>
 80057a2:	4b70      	ldr	r3, [pc, #448]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a6f      	ldr	r2, [pc, #444]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 80057a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	4b6d      	ldr	r3, [pc, #436]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a6c      	ldr	r2, [pc, #432]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 80057b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	e00b      	b.n	80057d4 <HAL_RCC_OscConfig+0xb0>
 80057bc:	4b69      	ldr	r3, [pc, #420]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a68      	ldr	r2, [pc, #416]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 80057c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	4b66      	ldr	r3, [pc, #408]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a65      	ldr	r2, [pc, #404]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 80057ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d013      	beq.n	8005804 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057dc:	f7fe f818 	bl	8003810 <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057e4:	f7fe f814 	bl	8003810 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b64      	cmp	r3, #100	@ 0x64
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e207      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0f0      	beq.n	80057e4 <HAL_RCC_OscConfig+0xc0>
 8005802:	e014      	b.n	800582e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005804:	f7fe f804 	bl	8003810 <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800580c:	f7fe f800 	bl	8003810 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b64      	cmp	r3, #100	@ 0x64
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e1f3      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800581e:	4b51      	ldr	r3, [pc, #324]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1f0      	bne.n	800580c <HAL_RCC_OscConfig+0xe8>
 800582a:	e000      	b.n	800582e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800582c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d063      	beq.n	8005902 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800583a:	4b4a      	ldr	r3, [pc, #296]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 030c 	and.w	r3, r3, #12
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00b      	beq.n	800585e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005846:	4b47      	ldr	r3, [pc, #284]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800584e:	2b08      	cmp	r3, #8
 8005850:	d11c      	bne.n	800588c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005852:	4b44      	ldr	r3, [pc, #272]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d116      	bne.n	800588c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800585e:	4b41      	ldr	r3, [pc, #260]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <HAL_RCC_OscConfig+0x152>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d001      	beq.n	8005876 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e1c7      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005876:	4b3b      	ldr	r3, [pc, #236]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	4937      	ldr	r1, [pc, #220]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 8005886:	4313      	orrs	r3, r2
 8005888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800588a:	e03a      	b.n	8005902 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d020      	beq.n	80058d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005894:	4b34      	ldr	r3, [pc, #208]	@ (8005968 <HAL_RCC_OscConfig+0x244>)
 8005896:	2201      	movs	r2, #1
 8005898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589a:	f7fd ffb9 	bl	8003810 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058a2:	f7fd ffb5 	bl	8003810 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e1a8      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c0:	4b28      	ldr	r3, [pc, #160]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	4925      	ldr	r1, [pc, #148]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	600b      	str	r3, [r1, #0]
 80058d4:	e015      	b.n	8005902 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058d6:	4b24      	ldr	r3, [pc, #144]	@ (8005968 <HAL_RCC_OscConfig+0x244>)
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058dc:	f7fd ff98 	bl	8003810 <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058e4:	f7fd ff94 	bl	8003810 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e187      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f0      	bne.n	80058e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b00      	cmp	r3, #0
 800590c:	d036      	beq.n	800597c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d016      	beq.n	8005944 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005916:	4b15      	ldr	r3, [pc, #84]	@ (800596c <HAL_RCC_OscConfig+0x248>)
 8005918:	2201      	movs	r2, #1
 800591a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800591c:	f7fd ff78 	bl	8003810 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005924:	f7fd ff74 	bl	8003810 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e167      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005936:	4b0b      	ldr	r3, [pc, #44]	@ (8005964 <HAL_RCC_OscConfig+0x240>)
 8005938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0f0      	beq.n	8005924 <HAL_RCC_OscConfig+0x200>
 8005942:	e01b      	b.n	800597c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005944:	4b09      	ldr	r3, [pc, #36]	@ (800596c <HAL_RCC_OscConfig+0x248>)
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800594a:	f7fd ff61 	bl	8003810 <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005950:	e00e      	b.n	8005970 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005952:	f7fd ff5d 	bl	8003810 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d907      	bls.n	8005970 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e150      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
 8005964:	40023800 	.word	0x40023800
 8005968:	42470000 	.word	0x42470000
 800596c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005970:	4b88      	ldr	r3, [pc, #544]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1ea      	bne.n	8005952 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 8097 	beq.w	8005ab8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800598a:	2300      	movs	r3, #0
 800598c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800598e:	4b81      	ldr	r3, [pc, #516]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10f      	bne.n	80059ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800599a:	2300      	movs	r3, #0
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	4b7d      	ldr	r3, [pc, #500]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 80059a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a2:	4a7c      	ldr	r2, [pc, #496]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 80059a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80059aa:	4b7a      	ldr	r3, [pc, #488]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 80059ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059b2:	60bb      	str	r3, [r7, #8]
 80059b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059b6:	2301      	movs	r3, #1
 80059b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ba:	4b77      	ldr	r3, [pc, #476]	@ (8005b98 <HAL_RCC_OscConfig+0x474>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d118      	bne.n	80059f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059c6:	4b74      	ldr	r3, [pc, #464]	@ (8005b98 <HAL_RCC_OscConfig+0x474>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a73      	ldr	r2, [pc, #460]	@ (8005b98 <HAL_RCC_OscConfig+0x474>)
 80059cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059d2:	f7fd ff1d 	bl	8003810 <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059da:	f7fd ff19 	bl	8003810 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e10c      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ec:	4b6a      	ldr	r3, [pc, #424]	@ (8005b98 <HAL_RCC_OscConfig+0x474>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0f0      	beq.n	80059da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d106      	bne.n	8005a0e <HAL_RCC_OscConfig+0x2ea>
 8005a00:	4b64      	ldr	r3, [pc, #400]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a04:	4a63      	ldr	r2, [pc, #396]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a06:	f043 0301 	orr.w	r3, r3, #1
 8005a0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a0c:	e01c      	b.n	8005a48 <HAL_RCC_OscConfig+0x324>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b05      	cmp	r3, #5
 8005a14:	d10c      	bne.n	8005a30 <HAL_RCC_OscConfig+0x30c>
 8005a16:	4b5f      	ldr	r3, [pc, #380]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1a:	4a5e      	ldr	r2, [pc, #376]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a1c:	f043 0304 	orr.w	r3, r3, #4
 8005a20:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a22:	4b5c      	ldr	r3, [pc, #368]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a26:	4a5b      	ldr	r2, [pc, #364]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a28:	f043 0301 	orr.w	r3, r3, #1
 8005a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a2e:	e00b      	b.n	8005a48 <HAL_RCC_OscConfig+0x324>
 8005a30:	4b58      	ldr	r3, [pc, #352]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a34:	4a57      	ldr	r2, [pc, #348]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a36:	f023 0301 	bic.w	r3, r3, #1
 8005a3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a3c:	4b55      	ldr	r3, [pc, #340]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a40:	4a54      	ldr	r2, [pc, #336]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a42:	f023 0304 	bic.w	r3, r3, #4
 8005a46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d015      	beq.n	8005a7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a50:	f7fd fede 	bl	8003810 <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a56:	e00a      	b.n	8005a6e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a58:	f7fd feda 	bl	8003810 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e0cb      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a6e:	4b49      	ldr	r3, [pc, #292]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0ee      	beq.n	8005a58 <HAL_RCC_OscConfig+0x334>
 8005a7a:	e014      	b.n	8005aa6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a7c:	f7fd fec8 	bl	8003810 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a82:	e00a      	b.n	8005a9a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a84:	f7fd fec4 	bl	8003810 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e0b5      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1ee      	bne.n	8005a84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d105      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aac:	4b39      	ldr	r3, [pc, #228]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab0:	4a38      	ldr	r2, [pc, #224]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005ab2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ab6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 80a1 	beq.w	8005c04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ac2:	4b34      	ldr	r3, [pc, #208]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 030c 	and.w	r3, r3, #12
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d05c      	beq.n	8005b88 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d141      	bne.n	8005b5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ad6:	4b31      	ldr	r3, [pc, #196]	@ (8005b9c <HAL_RCC_OscConfig+0x478>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005adc:	f7fd fe98 	bl	8003810 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae4:	f7fd fe94 	bl	8003810 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e087      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005af6:	4b27      	ldr	r3, [pc, #156]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f0      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69da      	ldr	r2, [r3, #28]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b10:	019b      	lsls	r3, r3, #6
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b18:	085b      	lsrs	r3, r3, #1
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	041b      	lsls	r3, r3, #16
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b24:	061b      	lsls	r3, r3, #24
 8005b26:	491b      	ldr	r1, [pc, #108]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8005b9c <HAL_RCC_OscConfig+0x478>)
 8005b2e:	2201      	movs	r2, #1
 8005b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b32:	f7fd fe6d 	bl	8003810 <HAL_GetTick>
 8005b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b38:	e008      	b.n	8005b4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b3a:	f7fd fe69 	bl	8003810 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d901      	bls.n	8005b4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e05c      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b4c:	4b11      	ldr	r3, [pc, #68]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d0f0      	beq.n	8005b3a <HAL_RCC_OscConfig+0x416>
 8005b58:	e054      	b.n	8005c04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b5a:	4b10      	ldr	r3, [pc, #64]	@ (8005b9c <HAL_RCC_OscConfig+0x478>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b60:	f7fd fe56 	bl	8003810 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b68:	f7fd fe52 	bl	8003810 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e045      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b7a:	4b06      	ldr	r3, [pc, #24]	@ (8005b94 <HAL_RCC_OscConfig+0x470>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1f0      	bne.n	8005b68 <HAL_RCC_OscConfig+0x444>
 8005b86:	e03d      	b.n	8005c04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d107      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e038      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
 8005b94:	40023800 	.word	0x40023800
 8005b98:	40007000 	.word	0x40007000
 8005b9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c10 <HAL_RCC_OscConfig+0x4ec>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d028      	beq.n	8005c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d121      	bne.n	8005c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d11a      	bne.n	8005c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005bd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d111      	bne.n	8005c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be6:	085b      	lsrs	r3, r3, #1
 8005be8:	3b01      	subs	r3, #1
 8005bea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d107      	bne.n	8005c00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d001      	beq.n	8005c04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e000      	b.n	8005c06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	40023800 	.word	0x40023800

08005c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e0cc      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c28:	4b68      	ldr	r3, [pc, #416]	@ (8005dcc <HAL_RCC_ClockConfig+0x1b8>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d90c      	bls.n	8005c50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c36:	4b65      	ldr	r3, [pc, #404]	@ (8005dcc <HAL_RCC_ClockConfig+0x1b8>)
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c3e:	4b63      	ldr	r3, [pc, #396]	@ (8005dcc <HAL_RCC_ClockConfig+0x1b8>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d001      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e0b8      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d020      	beq.n	8005c9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c68:	4b59      	ldr	r3, [pc, #356]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	4a58      	ldr	r2, [pc, #352]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0308 	and.w	r3, r3, #8
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c80:	4b53      	ldr	r3, [pc, #332]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	4a52      	ldr	r2, [pc, #328]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c8c:	4b50      	ldr	r3, [pc, #320]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	494d      	ldr	r1, [pc, #308]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d044      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d107      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb2:	4b47      	ldr	r3, [pc, #284]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d119      	bne.n	8005cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e07f      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d003      	beq.n	8005cd2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d107      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d109      	bne.n	8005cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e06f      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce2:	4b3b      	ldr	r3, [pc, #236]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e067      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cf2:	4b37      	ldr	r3, [pc, #220]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f023 0203 	bic.w	r2, r3, #3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	4934      	ldr	r1, [pc, #208]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d04:	f7fd fd84 	bl	8003810 <HAL_GetTick>
 8005d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d0a:	e00a      	b.n	8005d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d0c:	f7fd fd80 	bl	8003810 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e04f      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d22:	4b2b      	ldr	r3, [pc, #172]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 020c 	and.w	r2, r3, #12
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d1eb      	bne.n	8005d0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d34:	4b25      	ldr	r3, [pc, #148]	@ (8005dcc <HAL_RCC_ClockConfig+0x1b8>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 030f 	and.w	r3, r3, #15
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d20c      	bcs.n	8005d5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d42:	4b22      	ldr	r3, [pc, #136]	@ (8005dcc <HAL_RCC_ClockConfig+0x1b8>)
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d4a:	4b20      	ldr	r3, [pc, #128]	@ (8005dcc <HAL_RCC_ClockConfig+0x1b8>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d001      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e032      	b.n	8005dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d008      	beq.n	8005d7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d68:	4b19      	ldr	r3, [pc, #100]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	4916      	ldr	r1, [pc, #88]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0308 	and.w	r3, r3, #8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d009      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d86:	4b12      	ldr	r3, [pc, #72]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	490e      	ldr	r1, [pc, #56]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d9a:	f000 f821 	bl	8005de0 <HAL_RCC_GetSysClockFreq>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	091b      	lsrs	r3, r3, #4
 8005da6:	f003 030f 	and.w	r3, r3, #15
 8005daa:	490a      	ldr	r1, [pc, #40]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8005dac:	5ccb      	ldrb	r3, [r1, r3]
 8005dae:	fa22 f303 	lsr.w	r3, r2, r3
 8005db2:	4a09      	ldr	r2, [pc, #36]	@ (8005dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8005db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005db6:	4b09      	ldr	r3, [pc, #36]	@ (8005ddc <HAL_RCC_ClockConfig+0x1c8>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fd fce4 	bl	8003788 <HAL_InitTick>

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	40023c00 	.word	0x40023c00
 8005dd0:	40023800 	.word	0x40023800
 8005dd4:	08008c1c 	.word	0x08008c1c
 8005dd8:	20000014 	.word	0x20000014
 8005ddc:	20000018 	.word	0x20000018

08005de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005de4:	b094      	sub	sp, #80	@ 0x50
 8005de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005de8:	2300      	movs	r3, #0
 8005dea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005df8:	4b79      	ldr	r3, [pc, #484]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 030c 	and.w	r3, r3, #12
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d00d      	beq.n	8005e20 <HAL_RCC_GetSysClockFreq+0x40>
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	f200 80e1 	bhi.w	8005fcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <HAL_RCC_GetSysClockFreq+0x34>
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d003      	beq.n	8005e1a <HAL_RCC_GetSysClockFreq+0x3a>
 8005e12:	e0db      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e14:	4b73      	ldr	r3, [pc, #460]	@ (8005fe4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e18:	e0db      	b.n	8005fd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e1a:	4b73      	ldr	r3, [pc, #460]	@ (8005fe8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e1e:	e0d8      	b.n	8005fd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e20:	4b6f      	ldr	r3, [pc, #444]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e2a:	4b6d      	ldr	r3, [pc, #436]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d063      	beq.n	8005efe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e36:	4b6a      	ldr	r3, [pc, #424]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	099b      	lsrs	r3, r3, #6
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e48:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005e52:	4622      	mov	r2, r4
 8005e54:	462b      	mov	r3, r5
 8005e56:	f04f 0000 	mov.w	r0, #0
 8005e5a:	f04f 0100 	mov.w	r1, #0
 8005e5e:	0159      	lsls	r1, r3, #5
 8005e60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e64:	0150      	lsls	r0, r2, #5
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	1a51      	subs	r1, r2, r1
 8005e6e:	6139      	str	r1, [r7, #16]
 8005e70:	4629      	mov	r1, r5
 8005e72:	eb63 0301 	sbc.w	r3, r3, r1
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e84:	4659      	mov	r1, fp
 8005e86:	018b      	lsls	r3, r1, #6
 8005e88:	4651      	mov	r1, sl
 8005e8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e8e:	4651      	mov	r1, sl
 8005e90:	018a      	lsls	r2, r1, #6
 8005e92:	4651      	mov	r1, sl
 8005e94:	ebb2 0801 	subs.w	r8, r2, r1
 8005e98:	4659      	mov	r1, fp
 8005e9a:	eb63 0901 	sbc.w	r9, r3, r1
 8005e9e:	f04f 0200 	mov.w	r2, #0
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eb2:	4690      	mov	r8, r2
 8005eb4:	4699      	mov	r9, r3
 8005eb6:	4623      	mov	r3, r4
 8005eb8:	eb18 0303 	adds.w	r3, r8, r3
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	462b      	mov	r3, r5
 8005ec0:	eb49 0303 	adc.w	r3, r9, r3
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	f04f 0200 	mov.w	r2, #0
 8005eca:	f04f 0300 	mov.w	r3, #0
 8005ece:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	024b      	lsls	r3, r1, #9
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005edc:	4621      	mov	r1, r4
 8005ede:	024a      	lsls	r2, r1, #9
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005eec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ef0:	f7fa f9ce 	bl	8000290 <__aeabi_uldivmod>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4613      	mov	r3, r2
 8005efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005efc:	e058      	b.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005efe:	4b38      	ldr	r3, [pc, #224]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	099b      	lsrs	r3, r3, #6
 8005f04:	2200      	movs	r2, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	4611      	mov	r1, r2
 8005f0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f0e:	623b      	str	r3, [r7, #32]
 8005f10:	2300      	movs	r3, #0
 8005f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f18:	4642      	mov	r2, r8
 8005f1a:	464b      	mov	r3, r9
 8005f1c:	f04f 0000 	mov.w	r0, #0
 8005f20:	f04f 0100 	mov.w	r1, #0
 8005f24:	0159      	lsls	r1, r3, #5
 8005f26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f2a:	0150      	lsls	r0, r2, #5
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4641      	mov	r1, r8
 8005f32:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f36:	4649      	mov	r1, r9
 8005f38:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f3c:	f04f 0200 	mov.w	r2, #0
 8005f40:	f04f 0300 	mov.w	r3, #0
 8005f44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f50:	ebb2 040a 	subs.w	r4, r2, sl
 8005f54:	eb63 050b 	sbc.w	r5, r3, fp
 8005f58:	f04f 0200 	mov.w	r2, #0
 8005f5c:	f04f 0300 	mov.w	r3, #0
 8005f60:	00eb      	lsls	r3, r5, #3
 8005f62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f66:	00e2      	lsls	r2, r4, #3
 8005f68:	4614      	mov	r4, r2
 8005f6a:	461d      	mov	r5, r3
 8005f6c:	4643      	mov	r3, r8
 8005f6e:	18e3      	adds	r3, r4, r3
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	464b      	mov	r3, r9
 8005f74:	eb45 0303 	adc.w	r3, r5, r3
 8005f78:	607b      	str	r3, [r7, #4]
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	f04f 0300 	mov.w	r3, #0
 8005f82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f86:	4629      	mov	r1, r5
 8005f88:	028b      	lsls	r3, r1, #10
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f90:	4621      	mov	r1, r4
 8005f92:	028a      	lsls	r2, r1, #10
 8005f94:	4610      	mov	r0, r2
 8005f96:	4619      	mov	r1, r3
 8005f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	61bb      	str	r3, [r7, #24]
 8005f9e:	61fa      	str	r2, [r7, #28]
 8005fa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fa4:	f7fa f974 	bl	8000290 <__aeabi_uldivmod>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4613      	mov	r3, r2
 8005fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	0c1b      	lsrs	r3, r3, #16
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	3301      	adds	r3, #1
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005fc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fca:	e002      	b.n	8005fd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fcc:	4b05      	ldr	r3, [pc, #20]	@ (8005fe4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3750      	adds	r7, #80	@ 0x50
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fde:	bf00      	nop
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	00f42400 	.word	0x00f42400
 8005fe8:	007a1200 	.word	0x007a1200

08005fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ff0:	4b03      	ldr	r3, [pc, #12]	@ (8006000 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	20000014 	.word	0x20000014

08006004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006008:	f7ff fff0 	bl	8005fec <HAL_RCC_GetHCLKFreq>
 800600c:	4602      	mov	r2, r0
 800600e:	4b05      	ldr	r3, [pc, #20]	@ (8006024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	0a9b      	lsrs	r3, r3, #10
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	4903      	ldr	r1, [pc, #12]	@ (8006028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800601a:	5ccb      	ldrb	r3, [r1, r3]
 800601c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006020:	4618      	mov	r0, r3
 8006022:	bd80      	pop	{r7, pc}
 8006024:	40023800 	.word	0x40023800
 8006028:	08008c2c 	.word	0x08008c2c

0800602c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10b      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006050:	2b00      	cmp	r3, #0
 8006052:	d105      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800605c:	2b00      	cmp	r3, #0
 800605e:	d075      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006060:	4b91      	ldr	r3, [pc, #580]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006066:	f7fd fbd3 	bl	8003810 <HAL_GetTick>
 800606a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800606c:	e008      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800606e:	f7fd fbcf 	bl	8003810 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d901      	bls.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e189      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006080:	4b8a      	ldr	r3, [pc, #552]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f0      	bne.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d009      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	019a      	lsls	r2, r3, #6
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	071b      	lsls	r3, r3, #28
 80060a4:	4981      	ldr	r1, [pc, #516]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d01f      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060b8:	4b7c      	ldr	r3, [pc, #496]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060be:	0f1b      	lsrs	r3, r3, #28
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	019a      	lsls	r2, r3, #6
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	061b      	lsls	r3, r3, #24
 80060d2:	431a      	orrs	r2, r3
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	071b      	lsls	r3, r3, #28
 80060d8:	4974      	ldr	r1, [pc, #464]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80060e0:	4b72      	ldr	r3, [pc, #456]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060e6:	f023 021f 	bic.w	r2, r3, #31
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	496e      	ldr	r1, [pc, #440]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00d      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	019a      	lsls	r2, r3, #6
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	061b      	lsls	r3, r3, #24
 8006110:	431a      	orrs	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	071b      	lsls	r3, r3, #28
 8006118:	4964      	ldr	r1, [pc, #400]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800611a:	4313      	orrs	r3, r2
 800611c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006120:	4b61      	ldr	r3, [pc, #388]	@ (80062a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006122:	2201      	movs	r2, #1
 8006124:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006126:	f7fd fb73 	bl	8003810 <HAL_GetTick>
 800612a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800612c:	e008      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800612e:	f7fd fb6f 	bl	8003810 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e129      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006140:	4b5a      	ldr	r3, [pc, #360]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0f0      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b00      	cmp	r3, #0
 8006156:	d105      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006160:	2b00      	cmp	r3, #0
 8006162:	d079      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006164:	4b52      	ldr	r3, [pc, #328]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800616a:	f7fd fb51 	bl	8003810 <HAL_GetTick>
 800616e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006170:	e008      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006172:	f7fd fb4d 	bl	8003810 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d901      	bls.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e107      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006184:	4b49      	ldr	r3, [pc, #292]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800618c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006190:	d0ef      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b00      	cmp	r3, #0
 800619c:	d020      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800619e:	4b43      	ldr	r3, [pc, #268]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a4:	0f1b      	lsrs	r3, r3, #28
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	019a      	lsls	r2, r3, #6
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	061b      	lsls	r3, r3, #24
 80061b8:	431a      	orrs	r2, r3
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	071b      	lsls	r3, r3, #28
 80061be:	493b      	ldr	r1, [pc, #236]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80061c6:	4b39      	ldr	r3, [pc, #228]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061cc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	021b      	lsls	r3, r3, #8
 80061d8:	4934      	ldr	r1, [pc, #208]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0308 	and.w	r3, r3, #8
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01e      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80061ec:	4b2f      	ldr	r3, [pc, #188]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f2:	0e1b      	lsrs	r3, r3, #24
 80061f4:	f003 030f 	and.w	r3, r3, #15
 80061f8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	019a      	lsls	r2, r3, #6
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	061b      	lsls	r3, r3, #24
 8006204:	431a      	orrs	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	071b      	lsls	r3, r3, #28
 800620c:	4927      	ldr	r1, [pc, #156]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800620e:	4313      	orrs	r3, r2
 8006210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006214:	4b25      	ldr	r3, [pc, #148]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006216:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800621a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006222:	4922      	ldr	r1, [pc, #136]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006224:	4313      	orrs	r3, r2
 8006226:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800622a:	4b21      	ldr	r3, [pc, #132]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800622c:	2201      	movs	r2, #1
 800622e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006230:	f7fd faee 	bl	8003810 <HAL_GetTick>
 8006234:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006236:	e008      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006238:	f7fd faea 	bl	8003810 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e0a4      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800624a:	4b18      	ldr	r3, [pc, #96]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006252:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006256:	d1ef      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 808b 	beq.w	800637c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	4b10      	ldr	r3, [pc, #64]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800626c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626e:	4a0f      	ldr	r2, [pc, #60]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006274:	6413      	str	r3, [r2, #64]	@ 0x40
 8006276:	4b0d      	ldr	r3, [pc, #52]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006282:	4b0c      	ldr	r3, [pc, #48]	@ (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a0b      	ldr	r2, [pc, #44]	@ (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800628c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800628e:	f7fd fabf 	bl	8003810 <HAL_GetTick>
 8006292:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006294:	e010      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006296:	f7fd fabb 	bl	8003810 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d909      	bls.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e075      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80062a8:	42470068 	.word	0x42470068
 80062ac:	40023800 	.word	0x40023800
 80062b0:	42470070 	.word	0x42470070
 80062b4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80062b8:	4b38      	ldr	r3, [pc, #224]	@ (800639c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0e8      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062c4:	4b36      	ldr	r3, [pc, #216]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062cc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d02f      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d028      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062e2:	4b2f      	ldr	r3, [pc, #188]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062ec:	4b2d      	ldr	r3, [pc, #180]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80062ee:	2201      	movs	r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062f2:	4b2c      	ldr	r3, [pc, #176]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80062f8:	4a29      	ldr	r2, [pc, #164]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80062fe:	4b28      	ldr	r3, [pc, #160]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b01      	cmp	r3, #1
 8006308:	d114      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800630a:	f7fd fa81 	bl	8003810 <HAL_GetTick>
 800630e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006310:	e00a      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006312:	f7fd fa7d 	bl	8003810 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006320:	4293      	cmp	r3, r2
 8006322:	d901      	bls.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e035      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006328:	4b1d      	ldr	r3, [pc, #116]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800632a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0ee      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006338:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800633c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006340:	d10d      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006342:	4b17      	ldr	r3, [pc, #92]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006352:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006356:	4912      	ldr	r1, [pc, #72]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006358:	4313      	orrs	r3, r2
 800635a:	608b      	str	r3, [r1, #8]
 800635c:	e005      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800635e:	4b10      	ldr	r3, [pc, #64]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	4a0f      	ldr	r2, [pc, #60]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006364:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006368:	6093      	str	r3, [r2, #8]
 800636a:	4b0d      	ldr	r3, [pc, #52]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800636c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006376:	490a      	ldr	r1, [pc, #40]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006378:	4313      	orrs	r3, r2
 800637a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0310 	and.w	r3, r3, #16
 8006384:	2b00      	cmp	r3, #0
 8006386:	d004      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800638e:	4b06      	ldr	r3, [pc, #24]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006390:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3718      	adds	r7, #24
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	40007000 	.word	0x40007000
 80063a0:	40023800 	.word	0x40023800
 80063a4:	42470e40 	.word	0x42470e40
 80063a8:	424711e0 	.word	0x424711e0

080063ac <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e01c      	b.n	80063f8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	795b      	ldrb	r3, [r3, #5]
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d105      	bne.n	80063d4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7fc fd18 	bl	8002e04 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0204 	orr.w	r2, r2, #4
 80063e8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	791b      	ldrb	r3, [r3, #4]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_RNG_GenerateRandomNumber+0x1a>
 8006416:	2302      	movs	r3, #2
 8006418:	e044      	b.n	80064a4 <HAL_RNG_GenerateRandomNumber+0xa4>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	795b      	ldrb	r3, [r3, #5]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b01      	cmp	r3, #1
 8006428:	d133      	bne.n	8006492 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2202      	movs	r2, #2
 800642e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006430:	f7fd f9ee 	bl	8003810 <HAL_GetTick>
 8006434:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006436:	e018      	b.n	800646a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006438:	f7fd f9ea 	bl	8003810 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d911      	bls.n	800646a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b01      	cmp	r3, #1
 8006452:	d00a      	beq.n	800646a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2202      	movs	r2, #2
 800645e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e01c      	b.n	80064a4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b01      	cmp	r3, #1
 8006476:	d1df      	bne.n	8006438 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689a      	ldr	r2, [r3, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	715a      	strb	r2, [r3, #5]
 8006490:	e004      	b.n	800649c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2204      	movs	r2, #4
 8006496:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	711a      	strb	r2, [r3, #4]

  return status;
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e07b      	b.n	80065b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d108      	bne.n	80064d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064ce:	d009      	beq.n	80064e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	61da      	str	r2, [r3, #28]
 80064d6:	e005      	b.n	80064e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d106      	bne.n	8006504 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fc fca2 	bl	8002e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800651a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	431a      	orrs	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006568:	ea42 0103 	orr.w	r1, r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006570:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	0c1b      	lsrs	r3, r3, #16
 8006582:	f003 0104 	and.w	r1, r3, #4
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658a:	f003 0210 	and.w	r2, r3, #16
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e01a      	b.n	8006606 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065e6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7fc fc75 	bl	8002ed8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b088      	sub	sp, #32
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	603b      	str	r3, [r7, #0]
 800661a:	4613      	mov	r3, r2
 800661c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800661e:	f7fd f8f7 	bl	8003810 <HAL_GetTick>
 8006622:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006624:	88fb      	ldrh	r3, [r7, #6]
 8006626:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b01      	cmp	r3, #1
 8006632:	d001      	beq.n	8006638 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006634:	2302      	movs	r3, #2
 8006636:	e12a      	b.n	800688e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <HAL_SPI_Transmit+0x36>
 800663e:	88fb      	ldrh	r3, [r7, #6]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e122      	b.n	800688e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800664e:	2b01      	cmp	r3, #1
 8006650:	d101      	bne.n	8006656 <HAL_SPI_Transmit+0x48>
 8006652:	2302      	movs	r3, #2
 8006654:	e11b      	b.n	800688e <HAL_SPI_Transmit+0x280>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2203      	movs	r2, #3
 8006662:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	88fa      	ldrh	r2, [r7, #6]
 8006676:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	88fa      	ldrh	r2, [r7, #6]
 800667c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066a4:	d10f      	bne.n	80066c6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d0:	2b40      	cmp	r3, #64	@ 0x40
 80066d2:	d007      	beq.n	80066e4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066ec:	d152      	bne.n	8006794 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <HAL_SPI_Transmit+0xee>
 80066f6:	8b7b      	ldrh	r3, [r7, #26]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d145      	bne.n	8006788 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006700:	881a      	ldrh	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800670c:	1c9a      	adds	r2, r3, #2
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006716:	b29b      	uxth	r3, r3
 8006718:	3b01      	subs	r3, #1
 800671a:	b29a      	uxth	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006720:	e032      	b.n	8006788 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b02      	cmp	r3, #2
 800672e:	d112      	bne.n	8006756 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006734:	881a      	ldrh	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006740:	1c9a      	adds	r2, r3, #2
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800674a:	b29b      	uxth	r3, r3
 800674c:	3b01      	subs	r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006754:	e018      	b.n	8006788 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006756:	f7fd f85b 	bl	8003810 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d803      	bhi.n	800676e <HAL_SPI_Transmit+0x160>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676c:	d102      	bne.n	8006774 <HAL_SPI_Transmit+0x166>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d109      	bne.n	8006788 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e082      	b.n	800688e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800678c:	b29b      	uxth	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1c7      	bne.n	8006722 <HAL_SPI_Transmit+0x114>
 8006792:	e053      	b.n	800683c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <HAL_SPI_Transmit+0x194>
 800679c:	8b7b      	ldrh	r3, [r7, #26]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d147      	bne.n	8006832 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	330c      	adds	r3, #12
 80067ac:	7812      	ldrb	r2, [r2, #0]
 80067ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067be:	b29b      	uxth	r3, r3
 80067c0:	3b01      	subs	r3, #1
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80067c8:	e033      	b.n	8006832 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d113      	bne.n	8006800 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	330c      	adds	r3, #12
 80067e2:	7812      	ldrb	r2, [r2, #0]
 80067e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	3b01      	subs	r3, #1
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80067fe:	e018      	b.n	8006832 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006800:	f7fd f806 	bl	8003810 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	429a      	cmp	r2, r3
 800680e:	d803      	bhi.n	8006818 <HAL_SPI_Transmit+0x20a>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006816:	d102      	bne.n	800681e <HAL_SPI_Transmit+0x210>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d109      	bne.n	8006832 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e02d      	b.n	800688e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006836:	b29b      	uxth	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1c6      	bne.n	80067ca <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 f8bf 	bl	80069c4 <SPI_EndRxTxTransaction>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2220      	movs	r2, #32
 8006850:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10a      	bne.n	8006870 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800685a:	2300      	movs	r3, #0
 800685c:	617b      	str	r3, [r7, #20]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	617b      	str	r3, [r7, #20]
 800686e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e000      	b.n	800688e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800688c:	2300      	movs	r3, #0
  }
}
 800688e:	4618      	mov	r0, r3
 8006890:	3720      	adds	r7, #32
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068a4:	b2db      	uxtb	r3, r3
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
	...

080068b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	4613      	mov	r3, r2
 80068c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068c4:	f7fc ffa4 	bl	8003810 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068cc:	1a9b      	subs	r3, r3, r2
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	4413      	add	r3, r2
 80068d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068d4:	f7fc ff9c 	bl	8003810 <HAL_GetTick>
 80068d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068da:	4b39      	ldr	r3, [pc, #228]	@ (80069c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	015b      	lsls	r3, r3, #5
 80068e0:	0d1b      	lsrs	r3, r3, #20
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	fb02 f303 	mul.w	r3, r2, r3
 80068e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068ea:	e054      	b.n	8006996 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f2:	d050      	beq.n	8006996 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068f4:	f7fc ff8c 	bl	8003810 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	429a      	cmp	r2, r3
 8006902:	d902      	bls.n	800690a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d13d      	bne.n	8006986 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006918:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006922:	d111      	bne.n	8006948 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800692c:	d004      	beq.n	8006938 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006936:	d107      	bne.n	8006948 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006946:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006950:	d10f      	bne.n	8006972 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006970:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e017      	b.n	80069b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	3b01      	subs	r3, #1
 8006994:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	4013      	ands	r3, r2
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	bf0c      	ite	eq
 80069a6:	2301      	moveq	r3, #1
 80069a8:	2300      	movne	r3, #0
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	461a      	mov	r2, r3
 80069ae:	79fb      	ldrb	r3, [r7, #7]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d19b      	bne.n	80068ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3720      	adds	r7, #32
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000014 	.word	0x20000014

080069c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2201      	movs	r2, #1
 80069d8:	2102      	movs	r1, #2
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff ff6a 	bl	80068b4 <SPI_WaitFlagStateUntilTimeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d007      	beq.n	80069f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ea:	f043 0220 	orr.w	r2, r3, #32
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e032      	b.n	8006a5c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006a64 <SPI_EndRxTxTransaction+0xa0>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006a68 <SPI_EndRxTxTransaction+0xa4>)
 80069fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006a00:	0d5b      	lsrs	r3, r3, #21
 8006a02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a06:	fb02 f303 	mul.w	r3, r2, r3
 8006a0a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a14:	d112      	bne.n	8006a3c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2180      	movs	r1, #128	@ 0x80
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f7ff ff47 	bl	80068b4 <SPI_WaitFlagStateUntilTimeout>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d016      	beq.n	8006a5a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a30:	f043 0220 	orr.w	r2, r3, #32
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e00f      	b.n	8006a5c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a52:	2b80      	cmp	r3, #128	@ 0x80
 8006a54:	d0f2      	beq.n	8006a3c <SPI_EndRxTxTransaction+0x78>
 8006a56:	e000      	b.n	8006a5a <SPI_EndRxTxTransaction+0x96>
        break;
 8006a58:	bf00      	nop
  }

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	20000014 	.word	0x20000014
 8006a68:	165e9f81 	.word	0x165e9f81

08006a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e041      	b.n	8006b02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fc fa3e 	bl	8002f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	4610      	mov	r0, r2
 8006aac:	f000 f8f4 	bl	8006c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d101      	bne.n	8006b26 <HAL_TIM_ConfigClockSource+0x1c>
 8006b22:	2302      	movs	r3, #2
 8006b24:	e0b4      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x186>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2202      	movs	r2, #2
 8006b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b44:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b4c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b5e:	d03e      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0xd4>
 8006b60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b64:	f200 8087 	bhi.w	8006c76 <HAL_TIM_ConfigClockSource+0x16c>
 8006b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b6c:	f000 8086 	beq.w	8006c7c <HAL_TIM_ConfigClockSource+0x172>
 8006b70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b74:	d87f      	bhi.n	8006c76 <HAL_TIM_ConfigClockSource+0x16c>
 8006b76:	2b70      	cmp	r3, #112	@ 0x70
 8006b78:	d01a      	beq.n	8006bb0 <HAL_TIM_ConfigClockSource+0xa6>
 8006b7a:	2b70      	cmp	r3, #112	@ 0x70
 8006b7c:	d87b      	bhi.n	8006c76 <HAL_TIM_ConfigClockSource+0x16c>
 8006b7e:	2b60      	cmp	r3, #96	@ 0x60
 8006b80:	d050      	beq.n	8006c24 <HAL_TIM_ConfigClockSource+0x11a>
 8006b82:	2b60      	cmp	r3, #96	@ 0x60
 8006b84:	d877      	bhi.n	8006c76 <HAL_TIM_ConfigClockSource+0x16c>
 8006b86:	2b50      	cmp	r3, #80	@ 0x50
 8006b88:	d03c      	beq.n	8006c04 <HAL_TIM_ConfigClockSource+0xfa>
 8006b8a:	2b50      	cmp	r3, #80	@ 0x50
 8006b8c:	d873      	bhi.n	8006c76 <HAL_TIM_ConfigClockSource+0x16c>
 8006b8e:	2b40      	cmp	r3, #64	@ 0x40
 8006b90:	d058      	beq.n	8006c44 <HAL_TIM_ConfigClockSource+0x13a>
 8006b92:	2b40      	cmp	r3, #64	@ 0x40
 8006b94:	d86f      	bhi.n	8006c76 <HAL_TIM_ConfigClockSource+0x16c>
 8006b96:	2b30      	cmp	r3, #48	@ 0x30
 8006b98:	d064      	beq.n	8006c64 <HAL_TIM_ConfigClockSource+0x15a>
 8006b9a:	2b30      	cmp	r3, #48	@ 0x30
 8006b9c:	d86b      	bhi.n	8006c76 <HAL_TIM_ConfigClockSource+0x16c>
 8006b9e:	2b20      	cmp	r3, #32
 8006ba0:	d060      	beq.n	8006c64 <HAL_TIM_ConfigClockSource+0x15a>
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	d867      	bhi.n	8006c76 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d05c      	beq.n	8006c64 <HAL_TIM_ConfigClockSource+0x15a>
 8006baa:	2b10      	cmp	r3, #16
 8006bac:	d05a      	beq.n	8006c64 <HAL_TIM_ConfigClockSource+0x15a>
 8006bae:	e062      	b.n	8006c76 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bc0:	f000 f990 	bl	8006ee4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006bd2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	609a      	str	r2, [r3, #8]
      break;
 8006bdc:	e04f      	b.n	8006c7e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bee:	f000 f979 	bl	8006ee4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c00:	609a      	str	r2, [r3, #8]
      break;
 8006c02:	e03c      	b.n	8006c7e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c10:	461a      	mov	r2, r3
 8006c12:	f000 f8ed 	bl	8006df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2150      	movs	r1, #80	@ 0x50
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 f946 	bl	8006eae <TIM_ITRx_SetConfig>
      break;
 8006c22:	e02c      	b.n	8006c7e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c30:	461a      	mov	r2, r3
 8006c32:	f000 f90c 	bl	8006e4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2160      	movs	r1, #96	@ 0x60
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 f936 	bl	8006eae <TIM_ITRx_SetConfig>
      break;
 8006c42:	e01c      	b.n	8006c7e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c50:	461a      	mov	r2, r3
 8006c52:	f000 f8cd 	bl	8006df0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2140      	movs	r1, #64	@ 0x40
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 f926 	bl	8006eae <TIM_ITRx_SetConfig>
      break;
 8006c62:	e00c      	b.n	8006c7e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	f000 f91d 	bl	8006eae <TIM_ITRx_SetConfig>
      break;
 8006c74:	e003      	b.n	8006c7e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	73fb      	strb	r3, [r7, #15]
      break;
 8006c7a:	e000      	b.n	8006c7e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a46      	ldr	r2, [pc, #280]	@ (8006dc4 <TIM_Base_SetConfig+0x12c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d013      	beq.n	8006cd8 <TIM_Base_SetConfig+0x40>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cb6:	d00f      	beq.n	8006cd8 <TIM_Base_SetConfig+0x40>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a43      	ldr	r2, [pc, #268]	@ (8006dc8 <TIM_Base_SetConfig+0x130>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00b      	beq.n	8006cd8 <TIM_Base_SetConfig+0x40>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a42      	ldr	r2, [pc, #264]	@ (8006dcc <TIM_Base_SetConfig+0x134>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d007      	beq.n	8006cd8 <TIM_Base_SetConfig+0x40>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a41      	ldr	r2, [pc, #260]	@ (8006dd0 <TIM_Base_SetConfig+0x138>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d003      	beq.n	8006cd8 <TIM_Base_SetConfig+0x40>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a40      	ldr	r2, [pc, #256]	@ (8006dd4 <TIM_Base_SetConfig+0x13c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d108      	bne.n	8006cea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a35      	ldr	r2, [pc, #212]	@ (8006dc4 <TIM_Base_SetConfig+0x12c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d02b      	beq.n	8006d4a <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf8:	d027      	beq.n	8006d4a <TIM_Base_SetConfig+0xb2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a32      	ldr	r2, [pc, #200]	@ (8006dc8 <TIM_Base_SetConfig+0x130>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d023      	beq.n	8006d4a <TIM_Base_SetConfig+0xb2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a31      	ldr	r2, [pc, #196]	@ (8006dcc <TIM_Base_SetConfig+0x134>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d01f      	beq.n	8006d4a <TIM_Base_SetConfig+0xb2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a30      	ldr	r2, [pc, #192]	@ (8006dd0 <TIM_Base_SetConfig+0x138>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d01b      	beq.n	8006d4a <TIM_Base_SetConfig+0xb2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a2f      	ldr	r2, [pc, #188]	@ (8006dd4 <TIM_Base_SetConfig+0x13c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d017      	beq.n	8006d4a <TIM_Base_SetConfig+0xb2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a2e      	ldr	r2, [pc, #184]	@ (8006dd8 <TIM_Base_SetConfig+0x140>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d013      	beq.n	8006d4a <TIM_Base_SetConfig+0xb2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a2d      	ldr	r2, [pc, #180]	@ (8006ddc <TIM_Base_SetConfig+0x144>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00f      	beq.n	8006d4a <TIM_Base_SetConfig+0xb2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a2c      	ldr	r2, [pc, #176]	@ (8006de0 <TIM_Base_SetConfig+0x148>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00b      	beq.n	8006d4a <TIM_Base_SetConfig+0xb2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a2b      	ldr	r2, [pc, #172]	@ (8006de4 <TIM_Base_SetConfig+0x14c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d007      	beq.n	8006d4a <TIM_Base_SetConfig+0xb2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a2a      	ldr	r2, [pc, #168]	@ (8006de8 <TIM_Base_SetConfig+0x150>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d003      	beq.n	8006d4a <TIM_Base_SetConfig+0xb2>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a29      	ldr	r2, [pc, #164]	@ (8006dec <TIM_Base_SetConfig+0x154>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d108      	bne.n	8006d5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a10      	ldr	r2, [pc, #64]	@ (8006dc4 <TIM_Base_SetConfig+0x12c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d003      	beq.n	8006d90 <TIM_Base_SetConfig+0xf8>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a12      	ldr	r2, [pc, #72]	@ (8006dd4 <TIM_Base_SetConfig+0x13c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d103      	bne.n	8006d98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d105      	bne.n	8006db6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f023 0201 	bic.w	r2, r3, #1
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	611a      	str	r2, [r3, #16]
  }
}
 8006db6:	bf00      	nop
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40010000 	.word	0x40010000
 8006dc8:	40000400 	.word	0x40000400
 8006dcc:	40000800 	.word	0x40000800
 8006dd0:	40000c00 	.word	0x40000c00
 8006dd4:	40010400 	.word	0x40010400
 8006dd8:	40014000 	.word	0x40014000
 8006ddc:	40014400 	.word	0x40014400
 8006de0:	40014800 	.word	0x40014800
 8006de4:	40001800 	.word	0x40001800
 8006de8:	40001c00 	.word	0x40001c00
 8006dec:	40002000 	.word	0x40002000

08006df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b087      	sub	sp, #28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	f023 0201 	bic.w	r2, r3, #1
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	011b      	lsls	r3, r3, #4
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f023 030a 	bic.w	r3, r3, #10
 8006e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	621a      	str	r2, [r3, #32]
}
 8006e42:	bf00      	nop
 8006e44:	371c      	adds	r7, #28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b087      	sub	sp, #28
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	60f8      	str	r0, [r7, #12]
 8006e56:	60b9      	str	r1, [r7, #8]
 8006e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	f023 0210 	bic.w	r2, r3, #16
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	031b      	lsls	r3, r3, #12
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	621a      	str	r2, [r3, #32]
}
 8006ea2:	bf00      	nop
 8006ea4:	371c      	adds	r7, #28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b085      	sub	sp, #20
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	f043 0307 	orr.w	r3, r3, #7
 8006ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	609a      	str	r2, [r3, #8]
}
 8006ed8:	bf00      	nop
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	021a      	lsls	r2, r3, #8
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	431a      	orrs	r2, r3
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	609a      	str	r2, [r3, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	371c      	adds	r7, #28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e05a      	b.n	8006ff2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a21      	ldr	r2, [pc, #132]	@ (8007000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d022      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f88:	d01d      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8007004 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d018      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1b      	ldr	r2, [pc, #108]	@ (8007008 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d013      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800700c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00e      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a18      	ldr	r2, [pc, #96]	@ (8007010 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d009      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a17      	ldr	r2, [pc, #92]	@ (8007014 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d004      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a15      	ldr	r2, [pc, #84]	@ (8007018 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d10c      	bne.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40010000 	.word	0x40010000
 8007004:	40000400 	.word	0x40000400
 8007008:	40000800 	.word	0x40000800
 800700c:	40000c00 	.word	0x40000c00
 8007010:	40010400 	.word	0x40010400
 8007014:	40014000 	.word	0x40014000
 8007018:	40001800 	.word	0x40001800

0800701c <siprintf>:
 800701c:	b40e      	push	{r1, r2, r3}
 800701e:	b500      	push	{lr}
 8007020:	b09c      	sub	sp, #112	@ 0x70
 8007022:	ab1d      	add	r3, sp, #116	@ 0x74
 8007024:	9002      	str	r0, [sp, #8]
 8007026:	9006      	str	r0, [sp, #24]
 8007028:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800702c:	4809      	ldr	r0, [pc, #36]	@ (8007054 <siprintf+0x38>)
 800702e:	9107      	str	r1, [sp, #28]
 8007030:	9104      	str	r1, [sp, #16]
 8007032:	4909      	ldr	r1, [pc, #36]	@ (8007058 <siprintf+0x3c>)
 8007034:	f853 2b04 	ldr.w	r2, [r3], #4
 8007038:	9105      	str	r1, [sp, #20]
 800703a:	6800      	ldr	r0, [r0, #0]
 800703c:	9301      	str	r3, [sp, #4]
 800703e:	a902      	add	r1, sp, #8
 8007040:	f000 f994 	bl	800736c <_svfiprintf_r>
 8007044:	9b02      	ldr	r3, [sp, #8]
 8007046:	2200      	movs	r2, #0
 8007048:	701a      	strb	r2, [r3, #0]
 800704a:	b01c      	add	sp, #112	@ 0x70
 800704c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007050:	b003      	add	sp, #12
 8007052:	4770      	bx	lr
 8007054:	20000020 	.word	0x20000020
 8007058:	ffff0208 	.word	0xffff0208

0800705c <memset>:
 800705c:	4402      	add	r2, r0
 800705e:	4603      	mov	r3, r0
 8007060:	4293      	cmp	r3, r2
 8007062:	d100      	bne.n	8007066 <memset+0xa>
 8007064:	4770      	bx	lr
 8007066:	f803 1b01 	strb.w	r1, [r3], #1
 800706a:	e7f9      	b.n	8007060 <memset+0x4>

0800706c <__errno>:
 800706c:	4b01      	ldr	r3, [pc, #4]	@ (8007074 <__errno+0x8>)
 800706e:	6818      	ldr	r0, [r3, #0]
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20000020 	.word	0x20000020

08007078 <__libc_init_array>:
 8007078:	b570      	push	{r4, r5, r6, lr}
 800707a:	4d0d      	ldr	r5, [pc, #52]	@ (80070b0 <__libc_init_array+0x38>)
 800707c:	4c0d      	ldr	r4, [pc, #52]	@ (80070b4 <__libc_init_array+0x3c>)
 800707e:	1b64      	subs	r4, r4, r5
 8007080:	10a4      	asrs	r4, r4, #2
 8007082:	2600      	movs	r6, #0
 8007084:	42a6      	cmp	r6, r4
 8007086:	d109      	bne.n	800709c <__libc_init_array+0x24>
 8007088:	4d0b      	ldr	r5, [pc, #44]	@ (80070b8 <__libc_init_array+0x40>)
 800708a:	4c0c      	ldr	r4, [pc, #48]	@ (80070bc <__libc_init_array+0x44>)
 800708c:	f000 fc66 	bl	800795c <_init>
 8007090:	1b64      	subs	r4, r4, r5
 8007092:	10a4      	asrs	r4, r4, #2
 8007094:	2600      	movs	r6, #0
 8007096:	42a6      	cmp	r6, r4
 8007098:	d105      	bne.n	80070a6 <__libc_init_array+0x2e>
 800709a:	bd70      	pop	{r4, r5, r6, pc}
 800709c:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a0:	4798      	blx	r3
 80070a2:	3601      	adds	r6, #1
 80070a4:	e7ee      	b.n	8007084 <__libc_init_array+0xc>
 80070a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070aa:	4798      	blx	r3
 80070ac:	3601      	adds	r6, #1
 80070ae:	e7f2      	b.n	8007096 <__libc_init_array+0x1e>
 80070b0:	08008c70 	.word	0x08008c70
 80070b4:	08008c70 	.word	0x08008c70
 80070b8:	08008c70 	.word	0x08008c70
 80070bc:	08008c74 	.word	0x08008c74

080070c0 <__retarget_lock_acquire_recursive>:
 80070c0:	4770      	bx	lr

080070c2 <__retarget_lock_release_recursive>:
 80070c2:	4770      	bx	lr

080070c4 <_free_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	4605      	mov	r5, r0
 80070c8:	2900      	cmp	r1, #0
 80070ca:	d041      	beq.n	8007150 <_free_r+0x8c>
 80070cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070d0:	1f0c      	subs	r4, r1, #4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	bfb8      	it	lt
 80070d6:	18e4      	addlt	r4, r4, r3
 80070d8:	f000 f8e0 	bl	800729c <__malloc_lock>
 80070dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007154 <_free_r+0x90>)
 80070de:	6813      	ldr	r3, [r2, #0]
 80070e0:	b933      	cbnz	r3, 80070f0 <_free_r+0x2c>
 80070e2:	6063      	str	r3, [r4, #4]
 80070e4:	6014      	str	r4, [r2, #0]
 80070e6:	4628      	mov	r0, r5
 80070e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070ec:	f000 b8dc 	b.w	80072a8 <__malloc_unlock>
 80070f0:	42a3      	cmp	r3, r4
 80070f2:	d908      	bls.n	8007106 <_free_r+0x42>
 80070f4:	6820      	ldr	r0, [r4, #0]
 80070f6:	1821      	adds	r1, r4, r0
 80070f8:	428b      	cmp	r3, r1
 80070fa:	bf01      	itttt	eq
 80070fc:	6819      	ldreq	r1, [r3, #0]
 80070fe:	685b      	ldreq	r3, [r3, #4]
 8007100:	1809      	addeq	r1, r1, r0
 8007102:	6021      	streq	r1, [r4, #0]
 8007104:	e7ed      	b.n	80070e2 <_free_r+0x1e>
 8007106:	461a      	mov	r2, r3
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	b10b      	cbz	r3, 8007110 <_free_r+0x4c>
 800710c:	42a3      	cmp	r3, r4
 800710e:	d9fa      	bls.n	8007106 <_free_r+0x42>
 8007110:	6811      	ldr	r1, [r2, #0]
 8007112:	1850      	adds	r0, r2, r1
 8007114:	42a0      	cmp	r0, r4
 8007116:	d10b      	bne.n	8007130 <_free_r+0x6c>
 8007118:	6820      	ldr	r0, [r4, #0]
 800711a:	4401      	add	r1, r0
 800711c:	1850      	adds	r0, r2, r1
 800711e:	4283      	cmp	r3, r0
 8007120:	6011      	str	r1, [r2, #0]
 8007122:	d1e0      	bne.n	80070e6 <_free_r+0x22>
 8007124:	6818      	ldr	r0, [r3, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	6053      	str	r3, [r2, #4]
 800712a:	4408      	add	r0, r1
 800712c:	6010      	str	r0, [r2, #0]
 800712e:	e7da      	b.n	80070e6 <_free_r+0x22>
 8007130:	d902      	bls.n	8007138 <_free_r+0x74>
 8007132:	230c      	movs	r3, #12
 8007134:	602b      	str	r3, [r5, #0]
 8007136:	e7d6      	b.n	80070e6 <_free_r+0x22>
 8007138:	6820      	ldr	r0, [r4, #0]
 800713a:	1821      	adds	r1, r4, r0
 800713c:	428b      	cmp	r3, r1
 800713e:	bf04      	itt	eq
 8007140:	6819      	ldreq	r1, [r3, #0]
 8007142:	685b      	ldreq	r3, [r3, #4]
 8007144:	6063      	str	r3, [r4, #4]
 8007146:	bf04      	itt	eq
 8007148:	1809      	addeq	r1, r1, r0
 800714a:	6021      	streq	r1, [r4, #0]
 800714c:	6054      	str	r4, [r2, #4]
 800714e:	e7ca      	b.n	80070e6 <_free_r+0x22>
 8007150:	bd38      	pop	{r3, r4, r5, pc}
 8007152:	bf00      	nop
 8007154:	20025d4c 	.word	0x20025d4c

08007158 <sbrk_aligned>:
 8007158:	b570      	push	{r4, r5, r6, lr}
 800715a:	4e0f      	ldr	r6, [pc, #60]	@ (8007198 <sbrk_aligned+0x40>)
 800715c:	460c      	mov	r4, r1
 800715e:	6831      	ldr	r1, [r6, #0]
 8007160:	4605      	mov	r5, r0
 8007162:	b911      	cbnz	r1, 800716a <sbrk_aligned+0x12>
 8007164:	f000 fba6 	bl	80078b4 <_sbrk_r>
 8007168:	6030      	str	r0, [r6, #0]
 800716a:	4621      	mov	r1, r4
 800716c:	4628      	mov	r0, r5
 800716e:	f000 fba1 	bl	80078b4 <_sbrk_r>
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	d103      	bne.n	800717e <sbrk_aligned+0x26>
 8007176:	f04f 34ff 	mov.w	r4, #4294967295
 800717a:	4620      	mov	r0, r4
 800717c:	bd70      	pop	{r4, r5, r6, pc}
 800717e:	1cc4      	adds	r4, r0, #3
 8007180:	f024 0403 	bic.w	r4, r4, #3
 8007184:	42a0      	cmp	r0, r4
 8007186:	d0f8      	beq.n	800717a <sbrk_aligned+0x22>
 8007188:	1a21      	subs	r1, r4, r0
 800718a:	4628      	mov	r0, r5
 800718c:	f000 fb92 	bl	80078b4 <_sbrk_r>
 8007190:	3001      	adds	r0, #1
 8007192:	d1f2      	bne.n	800717a <sbrk_aligned+0x22>
 8007194:	e7ef      	b.n	8007176 <sbrk_aligned+0x1e>
 8007196:	bf00      	nop
 8007198:	20025d48 	.word	0x20025d48

0800719c <_malloc_r>:
 800719c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a0:	1ccd      	adds	r5, r1, #3
 80071a2:	f025 0503 	bic.w	r5, r5, #3
 80071a6:	3508      	adds	r5, #8
 80071a8:	2d0c      	cmp	r5, #12
 80071aa:	bf38      	it	cc
 80071ac:	250c      	movcc	r5, #12
 80071ae:	2d00      	cmp	r5, #0
 80071b0:	4606      	mov	r6, r0
 80071b2:	db01      	blt.n	80071b8 <_malloc_r+0x1c>
 80071b4:	42a9      	cmp	r1, r5
 80071b6:	d904      	bls.n	80071c2 <_malloc_r+0x26>
 80071b8:	230c      	movs	r3, #12
 80071ba:	6033      	str	r3, [r6, #0]
 80071bc:	2000      	movs	r0, #0
 80071be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007298 <_malloc_r+0xfc>
 80071c6:	f000 f869 	bl	800729c <__malloc_lock>
 80071ca:	f8d8 3000 	ldr.w	r3, [r8]
 80071ce:	461c      	mov	r4, r3
 80071d0:	bb44      	cbnz	r4, 8007224 <_malloc_r+0x88>
 80071d2:	4629      	mov	r1, r5
 80071d4:	4630      	mov	r0, r6
 80071d6:	f7ff ffbf 	bl	8007158 <sbrk_aligned>
 80071da:	1c43      	adds	r3, r0, #1
 80071dc:	4604      	mov	r4, r0
 80071de:	d158      	bne.n	8007292 <_malloc_r+0xf6>
 80071e0:	f8d8 4000 	ldr.w	r4, [r8]
 80071e4:	4627      	mov	r7, r4
 80071e6:	2f00      	cmp	r7, #0
 80071e8:	d143      	bne.n	8007272 <_malloc_r+0xd6>
 80071ea:	2c00      	cmp	r4, #0
 80071ec:	d04b      	beq.n	8007286 <_malloc_r+0xea>
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	4639      	mov	r1, r7
 80071f2:	4630      	mov	r0, r6
 80071f4:	eb04 0903 	add.w	r9, r4, r3
 80071f8:	f000 fb5c 	bl	80078b4 <_sbrk_r>
 80071fc:	4581      	cmp	r9, r0
 80071fe:	d142      	bne.n	8007286 <_malloc_r+0xea>
 8007200:	6821      	ldr	r1, [r4, #0]
 8007202:	1a6d      	subs	r5, r5, r1
 8007204:	4629      	mov	r1, r5
 8007206:	4630      	mov	r0, r6
 8007208:	f7ff ffa6 	bl	8007158 <sbrk_aligned>
 800720c:	3001      	adds	r0, #1
 800720e:	d03a      	beq.n	8007286 <_malloc_r+0xea>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	442b      	add	r3, r5
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	f8d8 3000 	ldr.w	r3, [r8]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	bb62      	cbnz	r2, 8007278 <_malloc_r+0xdc>
 800721e:	f8c8 7000 	str.w	r7, [r8]
 8007222:	e00f      	b.n	8007244 <_malloc_r+0xa8>
 8007224:	6822      	ldr	r2, [r4, #0]
 8007226:	1b52      	subs	r2, r2, r5
 8007228:	d420      	bmi.n	800726c <_malloc_r+0xd0>
 800722a:	2a0b      	cmp	r2, #11
 800722c:	d917      	bls.n	800725e <_malloc_r+0xc2>
 800722e:	1961      	adds	r1, r4, r5
 8007230:	42a3      	cmp	r3, r4
 8007232:	6025      	str	r5, [r4, #0]
 8007234:	bf18      	it	ne
 8007236:	6059      	strne	r1, [r3, #4]
 8007238:	6863      	ldr	r3, [r4, #4]
 800723a:	bf08      	it	eq
 800723c:	f8c8 1000 	streq.w	r1, [r8]
 8007240:	5162      	str	r2, [r4, r5]
 8007242:	604b      	str	r3, [r1, #4]
 8007244:	4630      	mov	r0, r6
 8007246:	f000 f82f 	bl	80072a8 <__malloc_unlock>
 800724a:	f104 000b 	add.w	r0, r4, #11
 800724e:	1d23      	adds	r3, r4, #4
 8007250:	f020 0007 	bic.w	r0, r0, #7
 8007254:	1ac2      	subs	r2, r0, r3
 8007256:	bf1c      	itt	ne
 8007258:	1a1b      	subne	r3, r3, r0
 800725a:	50a3      	strne	r3, [r4, r2]
 800725c:	e7af      	b.n	80071be <_malloc_r+0x22>
 800725e:	6862      	ldr	r2, [r4, #4]
 8007260:	42a3      	cmp	r3, r4
 8007262:	bf0c      	ite	eq
 8007264:	f8c8 2000 	streq.w	r2, [r8]
 8007268:	605a      	strne	r2, [r3, #4]
 800726a:	e7eb      	b.n	8007244 <_malloc_r+0xa8>
 800726c:	4623      	mov	r3, r4
 800726e:	6864      	ldr	r4, [r4, #4]
 8007270:	e7ae      	b.n	80071d0 <_malloc_r+0x34>
 8007272:	463c      	mov	r4, r7
 8007274:	687f      	ldr	r7, [r7, #4]
 8007276:	e7b6      	b.n	80071e6 <_malloc_r+0x4a>
 8007278:	461a      	mov	r2, r3
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	42a3      	cmp	r3, r4
 800727e:	d1fb      	bne.n	8007278 <_malloc_r+0xdc>
 8007280:	2300      	movs	r3, #0
 8007282:	6053      	str	r3, [r2, #4]
 8007284:	e7de      	b.n	8007244 <_malloc_r+0xa8>
 8007286:	230c      	movs	r3, #12
 8007288:	6033      	str	r3, [r6, #0]
 800728a:	4630      	mov	r0, r6
 800728c:	f000 f80c 	bl	80072a8 <__malloc_unlock>
 8007290:	e794      	b.n	80071bc <_malloc_r+0x20>
 8007292:	6005      	str	r5, [r0, #0]
 8007294:	e7d6      	b.n	8007244 <_malloc_r+0xa8>
 8007296:	bf00      	nop
 8007298:	20025d4c 	.word	0x20025d4c

0800729c <__malloc_lock>:
 800729c:	4801      	ldr	r0, [pc, #4]	@ (80072a4 <__malloc_lock+0x8>)
 800729e:	f7ff bf0f 	b.w	80070c0 <__retarget_lock_acquire_recursive>
 80072a2:	bf00      	nop
 80072a4:	20025d44 	.word	0x20025d44

080072a8 <__malloc_unlock>:
 80072a8:	4801      	ldr	r0, [pc, #4]	@ (80072b0 <__malloc_unlock+0x8>)
 80072aa:	f7ff bf0a 	b.w	80070c2 <__retarget_lock_release_recursive>
 80072ae:	bf00      	nop
 80072b0:	20025d44 	.word	0x20025d44

080072b4 <__ssputs_r>:
 80072b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b8:	688e      	ldr	r6, [r1, #8]
 80072ba:	461f      	mov	r7, r3
 80072bc:	42be      	cmp	r6, r7
 80072be:	680b      	ldr	r3, [r1, #0]
 80072c0:	4682      	mov	sl, r0
 80072c2:	460c      	mov	r4, r1
 80072c4:	4690      	mov	r8, r2
 80072c6:	d82d      	bhi.n	8007324 <__ssputs_r+0x70>
 80072c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80072d0:	d026      	beq.n	8007320 <__ssputs_r+0x6c>
 80072d2:	6965      	ldr	r5, [r4, #20]
 80072d4:	6909      	ldr	r1, [r1, #16]
 80072d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072da:	eba3 0901 	sub.w	r9, r3, r1
 80072de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072e2:	1c7b      	adds	r3, r7, #1
 80072e4:	444b      	add	r3, r9
 80072e6:	106d      	asrs	r5, r5, #1
 80072e8:	429d      	cmp	r5, r3
 80072ea:	bf38      	it	cc
 80072ec:	461d      	movcc	r5, r3
 80072ee:	0553      	lsls	r3, r2, #21
 80072f0:	d527      	bpl.n	8007342 <__ssputs_r+0x8e>
 80072f2:	4629      	mov	r1, r5
 80072f4:	f7ff ff52 	bl	800719c <_malloc_r>
 80072f8:	4606      	mov	r6, r0
 80072fa:	b360      	cbz	r0, 8007356 <__ssputs_r+0xa2>
 80072fc:	6921      	ldr	r1, [r4, #16]
 80072fe:	464a      	mov	r2, r9
 8007300:	f000 fae8 	bl	80078d4 <memcpy>
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800730a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800730e:	81a3      	strh	r3, [r4, #12]
 8007310:	6126      	str	r6, [r4, #16]
 8007312:	6165      	str	r5, [r4, #20]
 8007314:	444e      	add	r6, r9
 8007316:	eba5 0509 	sub.w	r5, r5, r9
 800731a:	6026      	str	r6, [r4, #0]
 800731c:	60a5      	str	r5, [r4, #8]
 800731e:	463e      	mov	r6, r7
 8007320:	42be      	cmp	r6, r7
 8007322:	d900      	bls.n	8007326 <__ssputs_r+0x72>
 8007324:	463e      	mov	r6, r7
 8007326:	6820      	ldr	r0, [r4, #0]
 8007328:	4632      	mov	r2, r6
 800732a:	4641      	mov	r1, r8
 800732c:	f000 faa8 	bl	8007880 <memmove>
 8007330:	68a3      	ldr	r3, [r4, #8]
 8007332:	1b9b      	subs	r3, r3, r6
 8007334:	60a3      	str	r3, [r4, #8]
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	4433      	add	r3, r6
 800733a:	6023      	str	r3, [r4, #0]
 800733c:	2000      	movs	r0, #0
 800733e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007342:	462a      	mov	r2, r5
 8007344:	f000 fad4 	bl	80078f0 <_realloc_r>
 8007348:	4606      	mov	r6, r0
 800734a:	2800      	cmp	r0, #0
 800734c:	d1e0      	bne.n	8007310 <__ssputs_r+0x5c>
 800734e:	6921      	ldr	r1, [r4, #16]
 8007350:	4650      	mov	r0, sl
 8007352:	f7ff feb7 	bl	80070c4 <_free_r>
 8007356:	230c      	movs	r3, #12
 8007358:	f8ca 3000 	str.w	r3, [sl]
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007362:	81a3      	strh	r3, [r4, #12]
 8007364:	f04f 30ff 	mov.w	r0, #4294967295
 8007368:	e7e9      	b.n	800733e <__ssputs_r+0x8a>
	...

0800736c <_svfiprintf_r>:
 800736c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007370:	4698      	mov	r8, r3
 8007372:	898b      	ldrh	r3, [r1, #12]
 8007374:	061b      	lsls	r3, r3, #24
 8007376:	b09d      	sub	sp, #116	@ 0x74
 8007378:	4607      	mov	r7, r0
 800737a:	460d      	mov	r5, r1
 800737c:	4614      	mov	r4, r2
 800737e:	d510      	bpl.n	80073a2 <_svfiprintf_r+0x36>
 8007380:	690b      	ldr	r3, [r1, #16]
 8007382:	b973      	cbnz	r3, 80073a2 <_svfiprintf_r+0x36>
 8007384:	2140      	movs	r1, #64	@ 0x40
 8007386:	f7ff ff09 	bl	800719c <_malloc_r>
 800738a:	6028      	str	r0, [r5, #0]
 800738c:	6128      	str	r0, [r5, #16]
 800738e:	b930      	cbnz	r0, 800739e <_svfiprintf_r+0x32>
 8007390:	230c      	movs	r3, #12
 8007392:	603b      	str	r3, [r7, #0]
 8007394:	f04f 30ff 	mov.w	r0, #4294967295
 8007398:	b01d      	add	sp, #116	@ 0x74
 800739a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800739e:	2340      	movs	r3, #64	@ 0x40
 80073a0:	616b      	str	r3, [r5, #20]
 80073a2:	2300      	movs	r3, #0
 80073a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073a6:	2320      	movs	r3, #32
 80073a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80073b0:	2330      	movs	r3, #48	@ 0x30
 80073b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007550 <_svfiprintf_r+0x1e4>
 80073b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073ba:	f04f 0901 	mov.w	r9, #1
 80073be:	4623      	mov	r3, r4
 80073c0:	469a      	mov	sl, r3
 80073c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073c6:	b10a      	cbz	r2, 80073cc <_svfiprintf_r+0x60>
 80073c8:	2a25      	cmp	r2, #37	@ 0x25
 80073ca:	d1f9      	bne.n	80073c0 <_svfiprintf_r+0x54>
 80073cc:	ebba 0b04 	subs.w	fp, sl, r4
 80073d0:	d00b      	beq.n	80073ea <_svfiprintf_r+0x7e>
 80073d2:	465b      	mov	r3, fp
 80073d4:	4622      	mov	r2, r4
 80073d6:	4629      	mov	r1, r5
 80073d8:	4638      	mov	r0, r7
 80073da:	f7ff ff6b 	bl	80072b4 <__ssputs_r>
 80073de:	3001      	adds	r0, #1
 80073e0:	f000 80a7 	beq.w	8007532 <_svfiprintf_r+0x1c6>
 80073e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073e6:	445a      	add	r2, fp
 80073e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80073ea:	f89a 3000 	ldrb.w	r3, [sl]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 809f 	beq.w	8007532 <_svfiprintf_r+0x1c6>
 80073f4:	2300      	movs	r3, #0
 80073f6:	f04f 32ff 	mov.w	r2, #4294967295
 80073fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073fe:	f10a 0a01 	add.w	sl, sl, #1
 8007402:	9304      	str	r3, [sp, #16]
 8007404:	9307      	str	r3, [sp, #28]
 8007406:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800740a:	931a      	str	r3, [sp, #104]	@ 0x68
 800740c:	4654      	mov	r4, sl
 800740e:	2205      	movs	r2, #5
 8007410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007414:	484e      	ldr	r0, [pc, #312]	@ (8007550 <_svfiprintf_r+0x1e4>)
 8007416:	f7f8 feeb 	bl	80001f0 <memchr>
 800741a:	9a04      	ldr	r2, [sp, #16]
 800741c:	b9d8      	cbnz	r0, 8007456 <_svfiprintf_r+0xea>
 800741e:	06d0      	lsls	r0, r2, #27
 8007420:	bf44      	itt	mi
 8007422:	2320      	movmi	r3, #32
 8007424:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007428:	0711      	lsls	r1, r2, #28
 800742a:	bf44      	itt	mi
 800742c:	232b      	movmi	r3, #43	@ 0x2b
 800742e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007432:	f89a 3000 	ldrb.w	r3, [sl]
 8007436:	2b2a      	cmp	r3, #42	@ 0x2a
 8007438:	d015      	beq.n	8007466 <_svfiprintf_r+0xfa>
 800743a:	9a07      	ldr	r2, [sp, #28]
 800743c:	4654      	mov	r4, sl
 800743e:	2000      	movs	r0, #0
 8007440:	f04f 0c0a 	mov.w	ip, #10
 8007444:	4621      	mov	r1, r4
 8007446:	f811 3b01 	ldrb.w	r3, [r1], #1
 800744a:	3b30      	subs	r3, #48	@ 0x30
 800744c:	2b09      	cmp	r3, #9
 800744e:	d94b      	bls.n	80074e8 <_svfiprintf_r+0x17c>
 8007450:	b1b0      	cbz	r0, 8007480 <_svfiprintf_r+0x114>
 8007452:	9207      	str	r2, [sp, #28]
 8007454:	e014      	b.n	8007480 <_svfiprintf_r+0x114>
 8007456:	eba0 0308 	sub.w	r3, r0, r8
 800745a:	fa09 f303 	lsl.w	r3, r9, r3
 800745e:	4313      	orrs	r3, r2
 8007460:	9304      	str	r3, [sp, #16]
 8007462:	46a2      	mov	sl, r4
 8007464:	e7d2      	b.n	800740c <_svfiprintf_r+0xa0>
 8007466:	9b03      	ldr	r3, [sp, #12]
 8007468:	1d19      	adds	r1, r3, #4
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	9103      	str	r1, [sp, #12]
 800746e:	2b00      	cmp	r3, #0
 8007470:	bfbb      	ittet	lt
 8007472:	425b      	neglt	r3, r3
 8007474:	f042 0202 	orrlt.w	r2, r2, #2
 8007478:	9307      	strge	r3, [sp, #28]
 800747a:	9307      	strlt	r3, [sp, #28]
 800747c:	bfb8      	it	lt
 800747e:	9204      	strlt	r2, [sp, #16]
 8007480:	7823      	ldrb	r3, [r4, #0]
 8007482:	2b2e      	cmp	r3, #46	@ 0x2e
 8007484:	d10a      	bne.n	800749c <_svfiprintf_r+0x130>
 8007486:	7863      	ldrb	r3, [r4, #1]
 8007488:	2b2a      	cmp	r3, #42	@ 0x2a
 800748a:	d132      	bne.n	80074f2 <_svfiprintf_r+0x186>
 800748c:	9b03      	ldr	r3, [sp, #12]
 800748e:	1d1a      	adds	r2, r3, #4
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	9203      	str	r2, [sp, #12]
 8007494:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007498:	3402      	adds	r4, #2
 800749a:	9305      	str	r3, [sp, #20]
 800749c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007560 <_svfiprintf_r+0x1f4>
 80074a0:	7821      	ldrb	r1, [r4, #0]
 80074a2:	2203      	movs	r2, #3
 80074a4:	4650      	mov	r0, sl
 80074a6:	f7f8 fea3 	bl	80001f0 <memchr>
 80074aa:	b138      	cbz	r0, 80074bc <_svfiprintf_r+0x150>
 80074ac:	9b04      	ldr	r3, [sp, #16]
 80074ae:	eba0 000a 	sub.w	r0, r0, sl
 80074b2:	2240      	movs	r2, #64	@ 0x40
 80074b4:	4082      	lsls	r2, r0
 80074b6:	4313      	orrs	r3, r2
 80074b8:	3401      	adds	r4, #1
 80074ba:	9304      	str	r3, [sp, #16]
 80074bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c0:	4824      	ldr	r0, [pc, #144]	@ (8007554 <_svfiprintf_r+0x1e8>)
 80074c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074c6:	2206      	movs	r2, #6
 80074c8:	f7f8 fe92 	bl	80001f0 <memchr>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d036      	beq.n	800753e <_svfiprintf_r+0x1d2>
 80074d0:	4b21      	ldr	r3, [pc, #132]	@ (8007558 <_svfiprintf_r+0x1ec>)
 80074d2:	bb1b      	cbnz	r3, 800751c <_svfiprintf_r+0x1b0>
 80074d4:	9b03      	ldr	r3, [sp, #12]
 80074d6:	3307      	adds	r3, #7
 80074d8:	f023 0307 	bic.w	r3, r3, #7
 80074dc:	3308      	adds	r3, #8
 80074de:	9303      	str	r3, [sp, #12]
 80074e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074e2:	4433      	add	r3, r6
 80074e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074e6:	e76a      	b.n	80073be <_svfiprintf_r+0x52>
 80074e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80074ec:	460c      	mov	r4, r1
 80074ee:	2001      	movs	r0, #1
 80074f0:	e7a8      	b.n	8007444 <_svfiprintf_r+0xd8>
 80074f2:	2300      	movs	r3, #0
 80074f4:	3401      	adds	r4, #1
 80074f6:	9305      	str	r3, [sp, #20]
 80074f8:	4619      	mov	r1, r3
 80074fa:	f04f 0c0a 	mov.w	ip, #10
 80074fe:	4620      	mov	r0, r4
 8007500:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007504:	3a30      	subs	r2, #48	@ 0x30
 8007506:	2a09      	cmp	r2, #9
 8007508:	d903      	bls.n	8007512 <_svfiprintf_r+0x1a6>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d0c6      	beq.n	800749c <_svfiprintf_r+0x130>
 800750e:	9105      	str	r1, [sp, #20]
 8007510:	e7c4      	b.n	800749c <_svfiprintf_r+0x130>
 8007512:	fb0c 2101 	mla	r1, ip, r1, r2
 8007516:	4604      	mov	r4, r0
 8007518:	2301      	movs	r3, #1
 800751a:	e7f0      	b.n	80074fe <_svfiprintf_r+0x192>
 800751c:	ab03      	add	r3, sp, #12
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	462a      	mov	r2, r5
 8007522:	4b0e      	ldr	r3, [pc, #56]	@ (800755c <_svfiprintf_r+0x1f0>)
 8007524:	a904      	add	r1, sp, #16
 8007526:	4638      	mov	r0, r7
 8007528:	f3af 8000 	nop.w
 800752c:	1c42      	adds	r2, r0, #1
 800752e:	4606      	mov	r6, r0
 8007530:	d1d6      	bne.n	80074e0 <_svfiprintf_r+0x174>
 8007532:	89ab      	ldrh	r3, [r5, #12]
 8007534:	065b      	lsls	r3, r3, #25
 8007536:	f53f af2d 	bmi.w	8007394 <_svfiprintf_r+0x28>
 800753a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800753c:	e72c      	b.n	8007398 <_svfiprintf_r+0x2c>
 800753e:	ab03      	add	r3, sp, #12
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	462a      	mov	r2, r5
 8007544:	4b05      	ldr	r3, [pc, #20]	@ (800755c <_svfiprintf_r+0x1f0>)
 8007546:	a904      	add	r1, sp, #16
 8007548:	4638      	mov	r0, r7
 800754a:	f000 f879 	bl	8007640 <_printf_i>
 800754e:	e7ed      	b.n	800752c <_svfiprintf_r+0x1c0>
 8007550:	08008c34 	.word	0x08008c34
 8007554:	08008c3e 	.word	0x08008c3e
 8007558:	00000000 	.word	0x00000000
 800755c:	080072b5 	.word	0x080072b5
 8007560:	08008c3a 	.word	0x08008c3a

08007564 <_printf_common>:
 8007564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007568:	4616      	mov	r6, r2
 800756a:	4698      	mov	r8, r3
 800756c:	688a      	ldr	r2, [r1, #8]
 800756e:	690b      	ldr	r3, [r1, #16]
 8007570:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007574:	4293      	cmp	r3, r2
 8007576:	bfb8      	it	lt
 8007578:	4613      	movlt	r3, r2
 800757a:	6033      	str	r3, [r6, #0]
 800757c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007580:	4607      	mov	r7, r0
 8007582:	460c      	mov	r4, r1
 8007584:	b10a      	cbz	r2, 800758a <_printf_common+0x26>
 8007586:	3301      	adds	r3, #1
 8007588:	6033      	str	r3, [r6, #0]
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	0699      	lsls	r1, r3, #26
 800758e:	bf42      	ittt	mi
 8007590:	6833      	ldrmi	r3, [r6, #0]
 8007592:	3302      	addmi	r3, #2
 8007594:	6033      	strmi	r3, [r6, #0]
 8007596:	6825      	ldr	r5, [r4, #0]
 8007598:	f015 0506 	ands.w	r5, r5, #6
 800759c:	d106      	bne.n	80075ac <_printf_common+0x48>
 800759e:	f104 0a19 	add.w	sl, r4, #25
 80075a2:	68e3      	ldr	r3, [r4, #12]
 80075a4:	6832      	ldr	r2, [r6, #0]
 80075a6:	1a9b      	subs	r3, r3, r2
 80075a8:	42ab      	cmp	r3, r5
 80075aa:	dc26      	bgt.n	80075fa <_printf_common+0x96>
 80075ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075b0:	6822      	ldr	r2, [r4, #0]
 80075b2:	3b00      	subs	r3, #0
 80075b4:	bf18      	it	ne
 80075b6:	2301      	movne	r3, #1
 80075b8:	0692      	lsls	r2, r2, #26
 80075ba:	d42b      	bmi.n	8007614 <_printf_common+0xb0>
 80075bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075c0:	4641      	mov	r1, r8
 80075c2:	4638      	mov	r0, r7
 80075c4:	47c8      	blx	r9
 80075c6:	3001      	adds	r0, #1
 80075c8:	d01e      	beq.n	8007608 <_printf_common+0xa4>
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	6922      	ldr	r2, [r4, #16]
 80075ce:	f003 0306 	and.w	r3, r3, #6
 80075d2:	2b04      	cmp	r3, #4
 80075d4:	bf02      	ittt	eq
 80075d6:	68e5      	ldreq	r5, [r4, #12]
 80075d8:	6833      	ldreq	r3, [r6, #0]
 80075da:	1aed      	subeq	r5, r5, r3
 80075dc:	68a3      	ldr	r3, [r4, #8]
 80075de:	bf0c      	ite	eq
 80075e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075e4:	2500      	movne	r5, #0
 80075e6:	4293      	cmp	r3, r2
 80075e8:	bfc4      	itt	gt
 80075ea:	1a9b      	subgt	r3, r3, r2
 80075ec:	18ed      	addgt	r5, r5, r3
 80075ee:	2600      	movs	r6, #0
 80075f0:	341a      	adds	r4, #26
 80075f2:	42b5      	cmp	r5, r6
 80075f4:	d11a      	bne.n	800762c <_printf_common+0xc8>
 80075f6:	2000      	movs	r0, #0
 80075f8:	e008      	b.n	800760c <_printf_common+0xa8>
 80075fa:	2301      	movs	r3, #1
 80075fc:	4652      	mov	r2, sl
 80075fe:	4641      	mov	r1, r8
 8007600:	4638      	mov	r0, r7
 8007602:	47c8      	blx	r9
 8007604:	3001      	adds	r0, #1
 8007606:	d103      	bne.n	8007610 <_printf_common+0xac>
 8007608:	f04f 30ff 	mov.w	r0, #4294967295
 800760c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007610:	3501      	adds	r5, #1
 8007612:	e7c6      	b.n	80075a2 <_printf_common+0x3e>
 8007614:	18e1      	adds	r1, r4, r3
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	2030      	movs	r0, #48	@ 0x30
 800761a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800761e:	4422      	add	r2, r4
 8007620:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007624:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007628:	3302      	adds	r3, #2
 800762a:	e7c7      	b.n	80075bc <_printf_common+0x58>
 800762c:	2301      	movs	r3, #1
 800762e:	4622      	mov	r2, r4
 8007630:	4641      	mov	r1, r8
 8007632:	4638      	mov	r0, r7
 8007634:	47c8      	blx	r9
 8007636:	3001      	adds	r0, #1
 8007638:	d0e6      	beq.n	8007608 <_printf_common+0xa4>
 800763a:	3601      	adds	r6, #1
 800763c:	e7d9      	b.n	80075f2 <_printf_common+0x8e>
	...

08007640 <_printf_i>:
 8007640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007644:	7e0f      	ldrb	r7, [r1, #24]
 8007646:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007648:	2f78      	cmp	r7, #120	@ 0x78
 800764a:	4691      	mov	r9, r2
 800764c:	4680      	mov	r8, r0
 800764e:	460c      	mov	r4, r1
 8007650:	469a      	mov	sl, r3
 8007652:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007656:	d807      	bhi.n	8007668 <_printf_i+0x28>
 8007658:	2f62      	cmp	r7, #98	@ 0x62
 800765a:	d80a      	bhi.n	8007672 <_printf_i+0x32>
 800765c:	2f00      	cmp	r7, #0
 800765e:	f000 80d2 	beq.w	8007806 <_printf_i+0x1c6>
 8007662:	2f58      	cmp	r7, #88	@ 0x58
 8007664:	f000 80b9 	beq.w	80077da <_printf_i+0x19a>
 8007668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800766c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007670:	e03a      	b.n	80076e8 <_printf_i+0xa8>
 8007672:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007676:	2b15      	cmp	r3, #21
 8007678:	d8f6      	bhi.n	8007668 <_printf_i+0x28>
 800767a:	a101      	add	r1, pc, #4	@ (adr r1, 8007680 <_printf_i+0x40>)
 800767c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007680:	080076d9 	.word	0x080076d9
 8007684:	080076ed 	.word	0x080076ed
 8007688:	08007669 	.word	0x08007669
 800768c:	08007669 	.word	0x08007669
 8007690:	08007669 	.word	0x08007669
 8007694:	08007669 	.word	0x08007669
 8007698:	080076ed 	.word	0x080076ed
 800769c:	08007669 	.word	0x08007669
 80076a0:	08007669 	.word	0x08007669
 80076a4:	08007669 	.word	0x08007669
 80076a8:	08007669 	.word	0x08007669
 80076ac:	080077ed 	.word	0x080077ed
 80076b0:	08007717 	.word	0x08007717
 80076b4:	080077a7 	.word	0x080077a7
 80076b8:	08007669 	.word	0x08007669
 80076bc:	08007669 	.word	0x08007669
 80076c0:	0800780f 	.word	0x0800780f
 80076c4:	08007669 	.word	0x08007669
 80076c8:	08007717 	.word	0x08007717
 80076cc:	08007669 	.word	0x08007669
 80076d0:	08007669 	.word	0x08007669
 80076d4:	080077af 	.word	0x080077af
 80076d8:	6833      	ldr	r3, [r6, #0]
 80076da:	1d1a      	adds	r2, r3, #4
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6032      	str	r2, [r6, #0]
 80076e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076e8:	2301      	movs	r3, #1
 80076ea:	e09d      	b.n	8007828 <_printf_i+0x1e8>
 80076ec:	6833      	ldr	r3, [r6, #0]
 80076ee:	6820      	ldr	r0, [r4, #0]
 80076f0:	1d19      	adds	r1, r3, #4
 80076f2:	6031      	str	r1, [r6, #0]
 80076f4:	0606      	lsls	r6, r0, #24
 80076f6:	d501      	bpl.n	80076fc <_printf_i+0xbc>
 80076f8:	681d      	ldr	r5, [r3, #0]
 80076fa:	e003      	b.n	8007704 <_printf_i+0xc4>
 80076fc:	0645      	lsls	r5, r0, #25
 80076fe:	d5fb      	bpl.n	80076f8 <_printf_i+0xb8>
 8007700:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007704:	2d00      	cmp	r5, #0
 8007706:	da03      	bge.n	8007710 <_printf_i+0xd0>
 8007708:	232d      	movs	r3, #45	@ 0x2d
 800770a:	426d      	negs	r5, r5
 800770c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007710:	4859      	ldr	r0, [pc, #356]	@ (8007878 <_printf_i+0x238>)
 8007712:	230a      	movs	r3, #10
 8007714:	e011      	b.n	800773a <_printf_i+0xfa>
 8007716:	6821      	ldr	r1, [r4, #0]
 8007718:	6833      	ldr	r3, [r6, #0]
 800771a:	0608      	lsls	r0, r1, #24
 800771c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007720:	d402      	bmi.n	8007728 <_printf_i+0xe8>
 8007722:	0649      	lsls	r1, r1, #25
 8007724:	bf48      	it	mi
 8007726:	b2ad      	uxthmi	r5, r5
 8007728:	2f6f      	cmp	r7, #111	@ 0x6f
 800772a:	4853      	ldr	r0, [pc, #332]	@ (8007878 <_printf_i+0x238>)
 800772c:	6033      	str	r3, [r6, #0]
 800772e:	bf14      	ite	ne
 8007730:	230a      	movne	r3, #10
 8007732:	2308      	moveq	r3, #8
 8007734:	2100      	movs	r1, #0
 8007736:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800773a:	6866      	ldr	r6, [r4, #4]
 800773c:	60a6      	str	r6, [r4, #8]
 800773e:	2e00      	cmp	r6, #0
 8007740:	bfa2      	ittt	ge
 8007742:	6821      	ldrge	r1, [r4, #0]
 8007744:	f021 0104 	bicge.w	r1, r1, #4
 8007748:	6021      	strge	r1, [r4, #0]
 800774a:	b90d      	cbnz	r5, 8007750 <_printf_i+0x110>
 800774c:	2e00      	cmp	r6, #0
 800774e:	d04b      	beq.n	80077e8 <_printf_i+0x1a8>
 8007750:	4616      	mov	r6, r2
 8007752:	fbb5 f1f3 	udiv	r1, r5, r3
 8007756:	fb03 5711 	mls	r7, r3, r1, r5
 800775a:	5dc7      	ldrb	r7, [r0, r7]
 800775c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007760:	462f      	mov	r7, r5
 8007762:	42bb      	cmp	r3, r7
 8007764:	460d      	mov	r5, r1
 8007766:	d9f4      	bls.n	8007752 <_printf_i+0x112>
 8007768:	2b08      	cmp	r3, #8
 800776a:	d10b      	bne.n	8007784 <_printf_i+0x144>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	07df      	lsls	r7, r3, #31
 8007770:	d508      	bpl.n	8007784 <_printf_i+0x144>
 8007772:	6923      	ldr	r3, [r4, #16]
 8007774:	6861      	ldr	r1, [r4, #4]
 8007776:	4299      	cmp	r1, r3
 8007778:	bfde      	ittt	le
 800777a:	2330      	movle	r3, #48	@ 0x30
 800777c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007780:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007784:	1b92      	subs	r2, r2, r6
 8007786:	6122      	str	r2, [r4, #16]
 8007788:	f8cd a000 	str.w	sl, [sp]
 800778c:	464b      	mov	r3, r9
 800778e:	aa03      	add	r2, sp, #12
 8007790:	4621      	mov	r1, r4
 8007792:	4640      	mov	r0, r8
 8007794:	f7ff fee6 	bl	8007564 <_printf_common>
 8007798:	3001      	adds	r0, #1
 800779a:	d14a      	bne.n	8007832 <_printf_i+0x1f2>
 800779c:	f04f 30ff 	mov.w	r0, #4294967295
 80077a0:	b004      	add	sp, #16
 80077a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	f043 0320 	orr.w	r3, r3, #32
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	4833      	ldr	r0, [pc, #204]	@ (800787c <_printf_i+0x23c>)
 80077b0:	2778      	movs	r7, #120	@ 0x78
 80077b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	6831      	ldr	r1, [r6, #0]
 80077ba:	061f      	lsls	r7, r3, #24
 80077bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80077c0:	d402      	bmi.n	80077c8 <_printf_i+0x188>
 80077c2:	065f      	lsls	r7, r3, #25
 80077c4:	bf48      	it	mi
 80077c6:	b2ad      	uxthmi	r5, r5
 80077c8:	6031      	str	r1, [r6, #0]
 80077ca:	07d9      	lsls	r1, r3, #31
 80077cc:	bf44      	itt	mi
 80077ce:	f043 0320 	orrmi.w	r3, r3, #32
 80077d2:	6023      	strmi	r3, [r4, #0]
 80077d4:	b11d      	cbz	r5, 80077de <_printf_i+0x19e>
 80077d6:	2310      	movs	r3, #16
 80077d8:	e7ac      	b.n	8007734 <_printf_i+0xf4>
 80077da:	4827      	ldr	r0, [pc, #156]	@ (8007878 <_printf_i+0x238>)
 80077dc:	e7e9      	b.n	80077b2 <_printf_i+0x172>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	f023 0320 	bic.w	r3, r3, #32
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	e7f6      	b.n	80077d6 <_printf_i+0x196>
 80077e8:	4616      	mov	r6, r2
 80077ea:	e7bd      	b.n	8007768 <_printf_i+0x128>
 80077ec:	6833      	ldr	r3, [r6, #0]
 80077ee:	6825      	ldr	r5, [r4, #0]
 80077f0:	6961      	ldr	r1, [r4, #20]
 80077f2:	1d18      	adds	r0, r3, #4
 80077f4:	6030      	str	r0, [r6, #0]
 80077f6:	062e      	lsls	r6, r5, #24
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	d501      	bpl.n	8007800 <_printf_i+0x1c0>
 80077fc:	6019      	str	r1, [r3, #0]
 80077fe:	e002      	b.n	8007806 <_printf_i+0x1c6>
 8007800:	0668      	lsls	r0, r5, #25
 8007802:	d5fb      	bpl.n	80077fc <_printf_i+0x1bc>
 8007804:	8019      	strh	r1, [r3, #0]
 8007806:	2300      	movs	r3, #0
 8007808:	6123      	str	r3, [r4, #16]
 800780a:	4616      	mov	r6, r2
 800780c:	e7bc      	b.n	8007788 <_printf_i+0x148>
 800780e:	6833      	ldr	r3, [r6, #0]
 8007810:	1d1a      	adds	r2, r3, #4
 8007812:	6032      	str	r2, [r6, #0]
 8007814:	681e      	ldr	r6, [r3, #0]
 8007816:	6862      	ldr	r2, [r4, #4]
 8007818:	2100      	movs	r1, #0
 800781a:	4630      	mov	r0, r6
 800781c:	f7f8 fce8 	bl	80001f0 <memchr>
 8007820:	b108      	cbz	r0, 8007826 <_printf_i+0x1e6>
 8007822:	1b80      	subs	r0, r0, r6
 8007824:	6060      	str	r0, [r4, #4]
 8007826:	6863      	ldr	r3, [r4, #4]
 8007828:	6123      	str	r3, [r4, #16]
 800782a:	2300      	movs	r3, #0
 800782c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007830:	e7aa      	b.n	8007788 <_printf_i+0x148>
 8007832:	6923      	ldr	r3, [r4, #16]
 8007834:	4632      	mov	r2, r6
 8007836:	4649      	mov	r1, r9
 8007838:	4640      	mov	r0, r8
 800783a:	47d0      	blx	sl
 800783c:	3001      	adds	r0, #1
 800783e:	d0ad      	beq.n	800779c <_printf_i+0x15c>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	079b      	lsls	r3, r3, #30
 8007844:	d413      	bmi.n	800786e <_printf_i+0x22e>
 8007846:	68e0      	ldr	r0, [r4, #12]
 8007848:	9b03      	ldr	r3, [sp, #12]
 800784a:	4298      	cmp	r0, r3
 800784c:	bfb8      	it	lt
 800784e:	4618      	movlt	r0, r3
 8007850:	e7a6      	b.n	80077a0 <_printf_i+0x160>
 8007852:	2301      	movs	r3, #1
 8007854:	4632      	mov	r2, r6
 8007856:	4649      	mov	r1, r9
 8007858:	4640      	mov	r0, r8
 800785a:	47d0      	blx	sl
 800785c:	3001      	adds	r0, #1
 800785e:	d09d      	beq.n	800779c <_printf_i+0x15c>
 8007860:	3501      	adds	r5, #1
 8007862:	68e3      	ldr	r3, [r4, #12]
 8007864:	9903      	ldr	r1, [sp, #12]
 8007866:	1a5b      	subs	r3, r3, r1
 8007868:	42ab      	cmp	r3, r5
 800786a:	dcf2      	bgt.n	8007852 <_printf_i+0x212>
 800786c:	e7eb      	b.n	8007846 <_printf_i+0x206>
 800786e:	2500      	movs	r5, #0
 8007870:	f104 0619 	add.w	r6, r4, #25
 8007874:	e7f5      	b.n	8007862 <_printf_i+0x222>
 8007876:	bf00      	nop
 8007878:	08008c45 	.word	0x08008c45
 800787c:	08008c56 	.word	0x08008c56

08007880 <memmove>:
 8007880:	4288      	cmp	r0, r1
 8007882:	b510      	push	{r4, lr}
 8007884:	eb01 0402 	add.w	r4, r1, r2
 8007888:	d902      	bls.n	8007890 <memmove+0x10>
 800788a:	4284      	cmp	r4, r0
 800788c:	4623      	mov	r3, r4
 800788e:	d807      	bhi.n	80078a0 <memmove+0x20>
 8007890:	1e43      	subs	r3, r0, #1
 8007892:	42a1      	cmp	r1, r4
 8007894:	d008      	beq.n	80078a8 <memmove+0x28>
 8007896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800789a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800789e:	e7f8      	b.n	8007892 <memmove+0x12>
 80078a0:	4402      	add	r2, r0
 80078a2:	4601      	mov	r1, r0
 80078a4:	428a      	cmp	r2, r1
 80078a6:	d100      	bne.n	80078aa <memmove+0x2a>
 80078a8:	bd10      	pop	{r4, pc}
 80078aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078b2:	e7f7      	b.n	80078a4 <memmove+0x24>

080078b4 <_sbrk_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	4d06      	ldr	r5, [pc, #24]	@ (80078d0 <_sbrk_r+0x1c>)
 80078b8:	2300      	movs	r3, #0
 80078ba:	4604      	mov	r4, r0
 80078bc:	4608      	mov	r0, r1
 80078be:	602b      	str	r3, [r5, #0]
 80078c0:	f7fb fece 	bl	8003660 <_sbrk>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d102      	bne.n	80078ce <_sbrk_r+0x1a>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	b103      	cbz	r3, 80078ce <_sbrk_r+0x1a>
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	bd38      	pop	{r3, r4, r5, pc}
 80078d0:	20025d40 	.word	0x20025d40

080078d4 <memcpy>:
 80078d4:	440a      	add	r2, r1
 80078d6:	4291      	cmp	r1, r2
 80078d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80078dc:	d100      	bne.n	80078e0 <memcpy+0xc>
 80078de:	4770      	bx	lr
 80078e0:	b510      	push	{r4, lr}
 80078e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078ea:	4291      	cmp	r1, r2
 80078ec:	d1f9      	bne.n	80078e2 <memcpy+0xe>
 80078ee:	bd10      	pop	{r4, pc}

080078f0 <_realloc_r>:
 80078f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f4:	4680      	mov	r8, r0
 80078f6:	4615      	mov	r5, r2
 80078f8:	460c      	mov	r4, r1
 80078fa:	b921      	cbnz	r1, 8007906 <_realloc_r+0x16>
 80078fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007900:	4611      	mov	r1, r2
 8007902:	f7ff bc4b 	b.w	800719c <_malloc_r>
 8007906:	b92a      	cbnz	r2, 8007914 <_realloc_r+0x24>
 8007908:	f7ff fbdc 	bl	80070c4 <_free_r>
 800790c:	2400      	movs	r4, #0
 800790e:	4620      	mov	r0, r4
 8007910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007914:	f000 f81a 	bl	800794c <_malloc_usable_size_r>
 8007918:	4285      	cmp	r5, r0
 800791a:	4606      	mov	r6, r0
 800791c:	d802      	bhi.n	8007924 <_realloc_r+0x34>
 800791e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007922:	d8f4      	bhi.n	800790e <_realloc_r+0x1e>
 8007924:	4629      	mov	r1, r5
 8007926:	4640      	mov	r0, r8
 8007928:	f7ff fc38 	bl	800719c <_malloc_r>
 800792c:	4607      	mov	r7, r0
 800792e:	2800      	cmp	r0, #0
 8007930:	d0ec      	beq.n	800790c <_realloc_r+0x1c>
 8007932:	42b5      	cmp	r5, r6
 8007934:	462a      	mov	r2, r5
 8007936:	4621      	mov	r1, r4
 8007938:	bf28      	it	cs
 800793a:	4632      	movcs	r2, r6
 800793c:	f7ff ffca 	bl	80078d4 <memcpy>
 8007940:	4621      	mov	r1, r4
 8007942:	4640      	mov	r0, r8
 8007944:	f7ff fbbe 	bl	80070c4 <_free_r>
 8007948:	463c      	mov	r4, r7
 800794a:	e7e0      	b.n	800790e <_realloc_r+0x1e>

0800794c <_malloc_usable_size_r>:
 800794c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007950:	1f18      	subs	r0, r3, #4
 8007952:	2b00      	cmp	r3, #0
 8007954:	bfbc      	itt	lt
 8007956:	580b      	ldrlt	r3, [r1, r0]
 8007958:	18c0      	addlt	r0, r0, r3
 800795a:	4770      	bx	lr

0800795c <_init>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	bf00      	nop
 8007960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007962:	bc08      	pop	{r3}
 8007964:	469e      	mov	lr, r3
 8007966:	4770      	bx	lr

08007968 <_fini>:
 8007968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796a:	bf00      	nop
 800796c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800796e:	bc08      	pop	{r3}
 8007970:	469e      	mov	lr, r3
 8007972:	4770      	bx	lr
