
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007804  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012f4  080079b4  080079b4  000089b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ca8  08008ca8  0000a070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008ca8  08008ca8  00009ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cb0  08008cb0  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cb0  08008cb0  00009cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008cb4  08008cb4  00009cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008cb8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a070  2**0
                  CONTENTS
 10 .bss          00025ce0  20000070  20000070  0000a070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025d50  20025d50  0000a070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000149e3  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035f1  00000000  00000000  0001ea83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  00022078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd1  00000000  00000000  00023508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027765  00000000  00000000  000244d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f91  00000000  00000000  0004bc3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2e40  00000000  00000000  00065bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00148a0f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a88  00000000  00000000  00148a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0014e4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800799c 	.word	0x0800799c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800799c 	.word	0x0800799c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ApplicationInit>:
STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS


void ApplicationInit(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80005c2:	f003 f865 	bl	8003690 <initialise_monitor_handles>
    LTCD__Init();
 80005c6:	f000 f969 	bl	800089c <LTCD__Init>
    LTCD_Layer_Init(0);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 f926 	bl	800081c <LTCD_Layer_Init>
    LCD_SetFont(&Font16x24);
 80005d0:	480e      	ldr	r0, [pc, #56]	@ (800060c <ApplicationInit+0x50>)
 80005d2:	f000 fa87 	bl	8000ae4 <LCD_SetFont>
    LCD_Clear(0,LCD_COLOR_BLACK);
 80005d6:	2100      	movs	r1, #0
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fa51 	bl	8000a80 <LCD_Clear>
	InitializeLCDTouch();    
 80005de:	f000 fb57 	bl	8000c90 <InitializeLCDTouch>
    __HAL_RCC_RNG_CLK_ENABLE();  // Enable the RNG peripheral clock
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <ApplicationInit+0x54>)
 80005e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ea:	4a09      	ldr	r2, [pc, #36]	@ (8000610 <ApplicationInit+0x54>)
 80005ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005f0:	6353      	str	r3, [r2, #52]	@ 0x34
 80005f2:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <ApplicationInit+0x54>)
 80005f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
    Button_InitInterrupt(); // Button Interrupts
 80005fe:	f000 f809 	bl	8000614 <Button_InitInterrupt>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000004 	.word	0x20000004
 8000610:	40023800 	.word	0x40023800

08000614 <Button_InitInterrupt>:
//	return (read_pin_input(BUTTON_PORT, BUTTON_PIN) == BUTTON_IS_PRESSED) ? 1 : 0;
    return (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
}

//Interrupt Based
void Button_InitInterrupt(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	4b18      	ldr	r3, [pc, #96]	@ (8000680 <Button_InitInterrupt+0x6c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a17      	ldr	r2, [pc, #92]	@ (8000680 <Button_InitInterrupt+0x6c>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <Button_InitInterrupt+0x6c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
//    __HAL_RCC_SYSCFG_CLK_ENABLE(); // Needed to remap EXTI lines

    GPIO_InitTypeDef buttonConfig = {0};
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
    buttonConfig.Pin   = GPIO_PIN_0;
 8000644:	2301      	movs	r3, #1
 8000646:	607b      	str	r3, [r7, #4]
    buttonConfig.Mode  = GPIO_MODE_IT_RISING; // Generate an interrupt on rising/falling edge
 8000648:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800064c:	60bb      	str	r3, [r7, #8]
    buttonConfig.Pull  = GPIO_PULLDOWN;
 800064e:	2302      	movs	r3, #2
 8000650:	60fb      	str	r3, [r7, #12]
    buttonConfig.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &buttonConfig);
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	4619      	mov	r1, r3
 800065a:	480a      	ldr	r0, [pc, #40]	@ (8000684 <Button_InitInterrupt+0x70>)
 800065c:	f003 fa3a 	bl	8003ad4 <HAL_GPIO_Init>

    // Clear any pending interrupt (just in case something is set from before)
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8000660:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <Button_InitInterrupt+0x74>)
 8000662:	2201      	movs	r2, #1
 8000664:	615a      	str	r2, [r3, #20]

    HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0); // Priority 2, sub-priority 0. Not sure if they're the correct values tho
 8000666:	2200      	movs	r2, #0
 8000668:	2102      	movs	r1, #2
 800066a:	2006      	movs	r0, #6
 800066c:	f003 f9fb 	bl	8003a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000670:	2006      	movs	r0, #6
 8000672:	f003 fa14 	bl	8003a9e <HAL_NVIC_EnableIRQ>
}
 8000676:	bf00      	nop
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40020000 	.word	0x40020000
 8000688:	40013c00 	.word	0x40013c00

0800068c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	@ 0x30
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
 8000696:	4b5a      	ldr	r3, [pc, #360]	@ (8000800 <LCD_GPIO_Init+0x174>)
 8000698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800069a:	4a59      	ldr	r2, [pc, #356]	@ (8000800 <LCD_GPIO_Init+0x174>)
 800069c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006a2:	4b57      	ldr	r3, [pc, #348]	@ (8000800 <LCD_GPIO_Init+0x174>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006aa:	61bb      	str	r3, [r7, #24]
 80006ac:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	4b53      	ldr	r3, [pc, #332]	@ (8000800 <LCD_GPIO_Init+0x174>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4a52      	ldr	r2, [pc, #328]	@ (8000800 <LCD_GPIO_Init+0x174>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b50      	ldr	r3, [pc, #320]	@ (8000800 <LCD_GPIO_Init+0x174>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	4b4c      	ldr	r3, [pc, #304]	@ (8000800 <LCD_GPIO_Init+0x174>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a4b      	ldr	r2, [pc, #300]	@ (8000800 <LCD_GPIO_Init+0x174>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b49      	ldr	r3, [pc, #292]	@ (8000800 <LCD_GPIO_Init+0x174>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	4b45      	ldr	r3, [pc, #276]	@ (8000800 <LCD_GPIO_Init+0x174>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a44      	ldr	r2, [pc, #272]	@ (8000800 <LCD_GPIO_Init+0x174>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b42      	ldr	r3, [pc, #264]	@ (8000800 <LCD_GPIO_Init+0x174>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b3e      	ldr	r3, [pc, #248]	@ (8000800 <LCD_GPIO_Init+0x174>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a3d      	ldr	r2, [pc, #244]	@ (8000800 <LCD_GPIO_Init+0x174>)
 800070c:	f043 0308 	orr.w	r3, r3, #8
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b3b      	ldr	r3, [pc, #236]	@ (8000800 <LCD_GPIO_Init+0x174>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b37      	ldr	r3, [pc, #220]	@ (8000800 <LCD_GPIO_Init+0x174>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a36      	ldr	r2, [pc, #216]	@ (8000800 <LCD_GPIO_Init+0x174>)
 8000728:	f043 0320 	orr.w	r3, r3, #32
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b34      	ldr	r3, [pc, #208]	@ (8000800 <LCD_GPIO_Init+0x174>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0320 	and.w	r3, r3, #32
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4b30      	ldr	r3, [pc, #192]	@ (8000800 <LCD_GPIO_Init+0x174>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a2f      	ldr	r2, [pc, #188]	@ (8000800 <LCD_GPIO_Init+0x174>)
 8000744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <LCD_GPIO_Init+0x174>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000756:	f641 0358 	movw	r3, #6232	@ 0x1858
 800075a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000764:	2302      	movs	r3, #2
 8000766:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000768:	230e      	movs	r3, #14
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4619      	mov	r1, r3
 8000772:	4824      	ldr	r0, [pc, #144]	@ (8000804 <LCD_GPIO_Init+0x178>)
 8000774:	f003 f9ae 	bl	8003ad4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000778:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800077c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	4820      	ldr	r0, [pc, #128]	@ (8000808 <LCD_GPIO_Init+0x17c>)
 8000786:	f003 f9a5 	bl	8003ad4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800078a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800078e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	481d      	ldr	r0, [pc, #116]	@ (800080c <LCD_GPIO_Init+0x180>)
 8000798:	f003 f99c 	bl	8003ad4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800079c:	2348      	movs	r3, #72	@ 0x48
 800079e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	481a      	ldr	r0, [pc, #104]	@ (8000810 <LCD_GPIO_Init+0x184>)
 80007a8:	f003 f994 	bl	8003ad4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80007ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	4816      	ldr	r0, [pc, #88]	@ (8000814 <LCD_GPIO_Init+0x188>)
 80007ba:	f003 f98b 	bl	8003ad4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80007be:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80007c2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	4813      	ldr	r0, [pc, #76]	@ (8000818 <LCD_GPIO_Init+0x18c>)
 80007cc:	f003 f982 	bl	8003ad4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80007d0:	2303      	movs	r3, #3
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80007d4:	2309      	movs	r3, #9
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	480a      	ldr	r0, [pc, #40]	@ (8000808 <LCD_GPIO_Init+0x17c>)
 80007e0:	f003 f978 	bl	8003ad4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80007e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4809      	ldr	r0, [pc, #36]	@ (8000818 <LCD_GPIO_Init+0x18c>)
 80007f2:	f003 f96f 	bl	8003ad4 <HAL_GPIO_Init>
}
 80007f6:	bf00      	nop
 80007f8:	3730      	adds	r7, #48	@ 0x30
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000
 8000808:	40020400 	.word	0x40020400
 800080c:	40020800 	.word	0x40020800
 8000810:	40020c00 	.word	0x40020c00
 8000814:	40021400 	.word	0x40021400
 8000818:	40021800 	.word	0x40021800

0800081c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b090      	sub	sp, #64	@ 0x40
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800082a:	23f0      	movs	r3, #240	@ 0xf0
 800082c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000832:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000836:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000838:	2302      	movs	r3, #2
 800083a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 800083c:	23ff      	movs	r3, #255	@ 0xff
 800083e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000844:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800084a:	2305      	movs	r3, #5
 800084c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d101      	bne.n	8000858 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <LTCD_Layer_Init+0x78>)
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000858:	23f0      	movs	r3, #240	@ 0xf0
 800085a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 800085c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000860:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000874:	79fa      	ldrb	r2, [r7, #7]
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	4806      	ldr	r0, [pc, #24]	@ (8000898 <LTCD_Layer_Init+0x7c>)
 800087e:	f004 fd9b 	bl	80053b8 <HAL_LTDC_ConfigLayer>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000888:	f000 f9fc 	bl	8000c84 <LCD_Error_Handler>
	}
}
 800088c:	bf00      	nop
 800088e:	3740      	adds	r7, #64	@ 0x40
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000168 	.word	0x20000168
 8000898:	2000008c 	.word	0x2000008c

0800089c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 80008a0:	4b2a      	ldr	r3, [pc, #168]	@ (800094c <LTCD__Init+0xb0>)
 80008a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000950 <LTCD__Init+0xb4>)
 80008a4:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80008a6:	4b29      	ldr	r3, [pc, #164]	@ (800094c <LTCD__Init+0xb0>)
 80008a8:	2209      	movs	r2, #9
 80008aa:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80008ac:	4b27      	ldr	r3, [pc, #156]	@ (800094c <LTCD__Init+0xb0>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80008b2:	4b26      	ldr	r3, [pc, #152]	@ (800094c <LTCD__Init+0xb0>)
 80008b4:	221d      	movs	r2, #29
 80008b6:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80008b8:	4b24      	ldr	r3, [pc, #144]	@ (800094c <LTCD__Init+0xb0>)
 80008ba:	2203      	movs	r2, #3
 80008bc:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80008be:	4b23      	ldr	r3, [pc, #140]	@ (800094c <LTCD__Init+0xb0>)
 80008c0:	f240 120d 	movw	r2, #269	@ 0x10d
 80008c4:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80008c6:	4b21      	ldr	r3, [pc, #132]	@ (800094c <LTCD__Init+0xb0>)
 80008c8:	f240 1243 	movw	r2, #323	@ 0x143
 80008cc:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80008ce:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <LTCD__Init+0xb0>)
 80008d0:	f240 1217 	movw	r2, #279	@ 0x117
 80008d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80008d6:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <LTCD__Init+0xb0>)
 80008d8:	f240 1247 	movw	r2, #327	@ 0x147
 80008dc:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80008de:	4b1b      	ldr	r3, [pc, #108]	@ (800094c <LTCD__Init+0xb0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80008e6:	4b19      	ldr	r3, [pc, #100]	@ (800094c <LTCD__Init+0xb0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80008ee:	4b17      	ldr	r3, [pc, #92]	@ (800094c <LTCD__Init+0xb0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80008f6:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <LTCD__Init+0xb8>)
 80008f8:	2208      	movs	r2, #8
 80008fa:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80008fc:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <LTCD__Init+0xb8>)
 80008fe:	22c0      	movs	r2, #192	@ 0xc0
 8000900:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000902:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <LTCD__Init+0xb8>)
 8000904:	2204      	movs	r2, #4
 8000906:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <LTCD__Init+0xb8>)
 800090a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800090e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000910:	4810      	ldr	r0, [pc, #64]	@ (8000954 <LTCD__Init+0xb8>)
 8000912:	f005 fbab 	bl	800606c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000916:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <LTCD__Init+0xb0>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800091c:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <LTCD__Init+0xb0>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000922:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <LTCD__Init+0xb0>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000928:	4b08      	ldr	r3, [pc, #32]	@ (800094c <LTCD__Init+0xb0>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800092e:	f7ff fead 	bl	800068c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000932:	4806      	ldr	r0, [pc, #24]	@ (800094c <LTCD__Init+0xb0>)
 8000934:	f004 fc70 	bl	8005218 <HAL_LTDC_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800093e:	f000 f9a1 	bl	8000c84 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000942:	f000 fd5d 	bl	8001400 <ili9341_Init>
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000008c 	.word	0x2000008c
 8000950:	40016800 	.word	0x40016800
 8000954:	20000134 	.word	0x20000134

08000958 <LCD_Draw_Pixel>:
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
// Regular draw pixel, with X flipped for landscape mirroring
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	80fb      	strh	r3, [r7, #6]
 8000962:	460b      	mov	r3, r1
 8000964:	80bb      	strh	r3, [r7, #4]
 8000966:	4613      	mov	r3, r2
 8000968:	807b      	strh	r3, [r7, #2]
	// Draws a pixel mirrored horizontally (flipped across the vertical axis)
    if (x < LCD_PIXEL_WIDTH && y < LCD_PIXEL_HEIGHT) {
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	2bef      	cmp	r3, #239	@ 0xef
 800096e:	d811      	bhi.n	8000994 <LCD_Draw_Pixel+0x3c>
 8000970:	88bb      	ldrh	r3, [r7, #4]
 8000972:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000976:	d20d      	bcs.n	8000994 <LCD_Draw_Pixel+0x3c>
        frameBuffer[y * LCD_PIXEL_WIDTH + (LCD_PIXEL_WIDTH - 1 - x)] = color;
 8000978:	88ba      	ldrh	r2, [r7, #4]
 800097a:	4613      	mov	r3, r2
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	1a9b      	subs	r3, r3, r2
 8000980:	011b      	lsls	r3, r3, #4
 8000982:	461a      	mov	r2, r3
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800098a:	4413      	add	r3, r2
 800098c:	4904      	ldr	r1, [pc, #16]	@ (80009a0 <LCD_Draw_Pixel+0x48>)
 800098e:	887a      	ldrh	r2, [r7, #2]
 8000990:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	20000168 	.word	0x20000168

080009a4 <LCD_Draw_Pixel_Landscape>:

// Landscape = rotate 90 degrees
void LCD_Draw_Pixel_Landscape(uint16_t x, uint16_t y, uint16_t color)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	80fb      	strh	r3, [r7, #6]
 80009ae:	460b      	mov	r3, r1
 80009b0:	80bb      	strh	r3, [r7, #4]
 80009b2:	4613      	mov	r3, r2
 80009b4:	807b      	strh	r3, [r7, #2]
    // Map (x, y) to rotated location in framebuffer
    // Original: x = col, y = row
    // Rotated: (x, y) → (y, WIDTH - 1 - x)
    if (x < LCD_PIXEL_HEIGHT && y < LCD_PIXEL_WIDTH) {
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80009bc:	d208      	bcs.n	80009d0 <LCD_Draw_Pixel_Landscape+0x2c>
 80009be:	88bb      	ldrh	r3, [r7, #4]
 80009c0:	2bef      	cmp	r3, #239	@ 0xef
 80009c2:	d805      	bhi.n	80009d0 <LCD_Draw_Pixel_Landscape+0x2c>
        LCD_Draw_Pixel(y, x, color); // Uses the mirrored version from above
 80009c4:	887a      	ldrh	r2, [r7, #2]
 80009c6:	88f9      	ldrh	r1, [r7, #6]
 80009c8:	88bb      	ldrh	r3, [r7, #4]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffc4 	bl	8000958 <LCD_Draw_Pixel>
    }
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4604      	mov	r4, r0
 80009e0:	4608      	mov	r0, r1
 80009e2:	4611      	mov	r1, r2
 80009e4:	461a      	mov	r2, r3
 80009e6:	4623      	mov	r3, r4
 80009e8:	80fb      	strh	r3, [r7, #6]
 80009ea:	4603      	mov	r3, r0
 80009ec:	80bb      	strh	r3, [r7, #4]
 80009ee:	460b      	mov	r3, r1
 80009f0:	807b      	strh	r3, [r7, #2]
 80009f2:	4613      	mov	r3, r2
 80009f4:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 80009f6:	887b      	ldrh	r3, [r7, #2]
 80009f8:	425b      	negs	r3, r3
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	81fb      	strh	r3, [r7, #14]
 80009fe:	e034      	b.n	8000a6a <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	425b      	negs	r3, r3
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	81bb      	strh	r3, [r7, #12]
 8000a08:	e024      	b.n	8000a54 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000a0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a0e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a12:	fb03 f202 	mul.w	r2, r3, r2
 8000a16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a1a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000a1e:	fb01 f303 	mul.w	r3, r1, r3
 8000a22:	441a      	add	r2, r3
 8000a24:	887b      	ldrh	r3, [r7, #2]
 8000a26:	8879      	ldrh	r1, [r7, #2]
 8000a28:	fb01 f303 	mul.w	r3, r1, r3
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	dc0b      	bgt.n	8000a48 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000a30:	89ba      	ldrh	r2, [r7, #12]
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	4413      	add	r3, r2
 8000a36:	b298      	uxth	r0, r3
 8000a38:	89fa      	ldrh	r2, [r7, #14]
 8000a3a:	88bb      	ldrh	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	883a      	ldrh	r2, [r7, #0]
 8000a42:	4619      	mov	r1, r3
 8000a44:	f7ff ff88 	bl	8000958 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000a48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	3301      	adds	r3, #1
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	81bb      	strh	r3, [r7, #12]
 8000a54:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a58:	887b      	ldrh	r3, [r7, #2]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	ddd5      	ble.n	8000a0a <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000a5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	3301      	adds	r3, #1
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	81fb      	strh	r3, [r7, #14]
 8000a6a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a6e:	887b      	ldrh	r3, [r7, #2]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	ddc5      	ble.n	8000a00 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd90      	pop	{r4, r7, pc}
	...

08000a80 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	460a      	mov	r2, r1
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d10e      	bne.n	8000ab4 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	e007      	b.n	8000aac <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000a9c:	4908      	ldr	r1, [pc, #32]	@ (8000ac0 <LCD_Clear+0x40>)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	88ba      	ldrh	r2, [r7, #4]
 8000aa2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000ab2:	d3f3      	bcc.n	8000a9c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	20000168 	.word	0x20000168

08000ac4 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000ace:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <LCD_SetTextColor+0x1c>)
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	8013      	strh	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	20000000 	.word	0x20000000

08000ae4 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000aec:	4a04      	ldr	r2, [pc, #16]	@ (8000b00 <LCD_SetFont+0x1c>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000164 	.word	0x20000164

08000b04 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	603a      	str	r2, [r7, #0]
 8000b0e:	80fb      	strh	r3, [r7, #6]
 8000b10:	460b      	mov	r3, r1
 8000b12:	80bb      	strh	r3, [r7, #4]
    for (uint32_t row = 0; row < LCD_Currentfonts->Height; row++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	e055      	b.n	8000bc6 <LCD_Draw_Char+0xc2>
        for (uint32_t col = 0; col < LCD_Currentfonts->Width; col++) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	e048      	b.n	8000bb2 <LCD_Draw_Char+0xae>

            uint8_t bitSet = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]
            if (LCD_Currentfonts->Width <= 12) {
 8000b24:	4b2e      	ldr	r3, [pc, #184]	@ (8000be0 <LCD_Draw_Char+0xdc>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	889b      	ldrh	r3, [r3, #4]
 8000b2a:	2b0c      	cmp	r3, #12
 8000b2c:	d81b      	bhi.n	8000b66 <LCD_Draw_Char+0x62>
                bitSet = (c[row] & ((0x80 << ((LCD_Currentfonts->Width / 12) * 8)) >> col)) != 0;
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	4413      	add	r3, r2
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4b29      	ldr	r3, [pc, #164]	@ (8000be0 <LCD_Draw_Char+0xdc>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	889b      	ldrh	r3, [r3, #4]
 8000b40:	4a28      	ldr	r2, [pc, #160]	@ (8000be4 <LCD_Draw_Char+0xe0>)
 8000b42:	fba2 2303 	umull	r2, r3, r2, r3
 8000b46:	08db      	lsrs	r3, r3, #3
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	2280      	movs	r2, #128	@ 0x80
 8000b4e:	409a      	lsls	r2, r3
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	fa42 f303 	asr.w	r3, r2, r3
 8000b56:	400b      	ands	r3, r1
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	bf14      	ite	ne
 8000b5c:	2301      	movne	r3, #1
 8000b5e:	2300      	moveq	r3, #0
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e010      	b.n	8000b88 <LCD_Draw_Char+0x84>
            } else {
                bitSet = (c[row] & (1 << col)) != 0;
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	fa42 f303 	asr.w	r3, r2, r3
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	bf14      	ite	ne
 8000b80:	2301      	movne	r3, #1
 8000b82:	2300      	moveq	r3, #0
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	73fb      	strb	r3, [r7, #15]
            }

            if (bitSet) {
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d00e      	beq.n	8000bac <LCD_Draw_Char+0xa8>
                LCD_Draw_Pixel_Landscape(Xpos + col, Ypos + row, CurrentTextColor);
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	4413      	add	r3, r2
 8000b96:	b298      	uxth	r0, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	88bb      	ldrh	r3, [r7, #4]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	4a11      	ldr	r2, [pc, #68]	@ (8000be8 <LCD_Draw_Char+0xe4>)
 8000ba4:	8812      	ldrh	r2, [r2, #0]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f7ff fefc 	bl	80009a4 <LCD_Draw_Pixel_Landscape>
        for (uint32_t col = 0; col < LCD_Currentfonts->Width; col++) {
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <LCD_Draw_Char+0xdc>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	889b      	ldrh	r3, [r3, #4]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d3af      	bcc.n	8000b20 <LCD_Draw_Char+0x1c>
    for (uint32_t row = 0; row < LCD_Currentfonts->Height; row++) {
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <LCD_Draw_Char+0xdc>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	88db      	ldrh	r3, [r3, #6]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d3a2      	bcc.n	8000b1a <LCD_Draw_Char+0x16>
            }
        }
    }
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000164 	.word	0x20000164
 8000be4:	aaaaaaab 	.word	0xaaaaaaab
 8000be8:	20000000 	.word	0x20000000

08000bec <LCD_DisplayString>:


void LCD_DisplayString(uint16_t x, uint16_t y, uint8_t *text, uint16_t mode) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60ba      	str	r2, [r7, #8]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	81fb      	strh	r3, [r7, #14]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	81bb      	strh	r3, [r7, #12]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	80fb      	strh	r3, [r7, #6]
  while (*text) {
 8000c02:	e011      	b.n	8000c28 <LCD_DisplayString+0x3c>
      LCD_DisplayChar(x, y, *text);
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	781a      	ldrb	r2, [r3, #0]
 8000c08:	89b9      	ldrh	r1, [r7, #12]
 8000c0a:	89fb      	ldrh	r3, [r7, #14]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 f817 	bl	8000c40 <LCD_DisplayChar>
      x += LCD_Currentfonts->Width - 1;
 8000c12:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <LCD_DisplayString+0x50>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	889a      	ldrh	r2, [r3, #4]
 8000c18:	89fb      	ldrh	r3, [r7, #14]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	81fb      	strh	r3, [r7, #14]
      text++;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	3301      	adds	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
  while (*text) {
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1e9      	bne.n	8000c04 <LCD_DisplayString+0x18>
  }
}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000164 	.word	0x20000164

08000c40 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	80fb      	strh	r3, [r7, #6]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	80bb      	strh	r3, [r7, #4]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000c52:	78fb      	ldrb	r3, [r7, #3]
 8000c54:	3b20      	subs	r3, #32
 8000c56:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000c58:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <LCD_DisplayChar+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	4907      	ldr	r1, [pc, #28]	@ (8000c80 <LCD_DisplayChar+0x40>)
 8000c62:	6809      	ldr	r1, [r1, #0]
 8000c64:	88c9      	ldrh	r1, [r1, #6]
 8000c66:	fb01 f303 	mul.w	r3, r1, r3
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	441a      	add	r2, r3
 8000c6e:	88b9      	ldrh	r1, [r7, #4]
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff46 	bl	8000b04 <LCD_Draw_Char>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000164 	.word	0x20000164

08000c84 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <LCD_Error_Handler+0x8>

08000c90 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000c94:	f002 f9b2 	bl	8002ffc <STMPE811_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d001      	beq.n	8000ca2 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000c9e:	bf00      	nop
 8000ca0:	e7fd      	b.n	8000c9e <InitializeLCDTouch+0xe>
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_GPIO_EXTI_Callback>:
volatile bool dropRequested = false; // Button Interrupt Flag

// Interrupt flag triggered by the button
// Sets a flag that the main game loop checks to drop a token
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d102      	bne.n	8000cbe <HAL_GPIO_EXTI_Callback+0x16>
    {
        dropRequested = true;
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <HAL_GPIO_EXTI_Callback+0x24>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
    }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	2002599e 	.word	0x2002599e

08000cd0 <Game_Init>:

void Game_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
    Start_Menu(); // Start_Menu is pretty much the main loop, but put inside here just in case I want to add more later
 8000cd4:	f000 f80e 	bl	8000cf4 <Start_Menu>
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <Restart_Game>:

void Restart_Game(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
    Start_Game(is1p); // Restart the game with the correct mode
 8000ce0:	4b03      	ldr	r3, [pc, #12]	@ (8000cf0 <Restart_Game+0x14>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 f857 	bl	8000d98 <Start_Game>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20025968 	.word	0x20025968

08000cf4 <Start_Menu>:

void Start_Menu(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
    StartScreen(); // Draw the screen
 8000cfa:	f001 fa0b 	bl	8002114 <StartScreen>
    while (1)
    {
        STMPE811_TouchData touch;
        touch.orientation = STMPE811_Orientation_Portrait_1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	72bb      	strb	r3, [r7, #10]
        STMPE811_State_t state = STMPE811_ReadTouch(&touch); // Grab current touch input and fill struct with .x/.y/.pressed
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4618      	mov	r0, r3
 8000d06:	f002 fa31 	bl	800316c <STMPE811_ReadTouch>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	73fb      	strb	r3, [r7, #15]

        if (state == STMPE811_State_Pressed)
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d137      	bne.n	8000d84 <Start_Menu+0x90>
        {
            // Debug Mode
            if (TM_STMPE811_TouchInRectangle(&touch, 200, 280, 40, 40))
 8000d14:	88bb      	ldrh	r3, [r7, #4]
 8000d16:	2bc7      	cmp	r3, #199	@ 0xc7
 8000d18:	d90e      	bls.n	8000d38 <Start_Menu+0x44>
 8000d1a:	88bb      	ldrh	r3, [r7, #4]
 8000d1c:	2bef      	cmp	r3, #239	@ 0xef
 8000d1e:	d80b      	bhi.n	8000d38 <Start_Menu+0x44>
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8000d26:	d307      	bcc.n	8000d38 <Start_Menu+0x44>
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000d2e:	d203      	bcs.n	8000d38 <Start_Menu+0x44>
            {
                Debug_Mode();
 8000d30:	f001 fc2e 	bl	8002590 <Debug_Mode>
                StartScreen();
 8000d34:	f001 f9ee 	bl	8002114 <StartScreen>
            }
            // 1P-Mode
            if (TM_STMPE811_TouchInRectangle(&touch, 60, 90, 40, 140))
 8000d38:	88bb      	ldrh	r3, [r7, #4]
 8000d3a:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d3c:	d90f      	bls.n	8000d5e <Start_Menu+0x6a>
 8000d3e:	88bb      	ldrh	r3, [r7, #4]
 8000d40:	2b63      	cmp	r3, #99	@ 0x63
 8000d42:	d80c      	bhi.n	8000d5e <Start_Menu+0x6a>
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	2b59      	cmp	r3, #89	@ 0x59
 8000d48:	d909      	bls.n	8000d5e <Start_Menu+0x6a>
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	2be5      	cmp	r3, #229	@ 0xe5
 8000d4e:	d806      	bhi.n	8000d5e <Start_Menu+0x6a>
            {
                is1p = true;
 8000d50:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <Start_Menu+0xa0>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
                Start_Game(true);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f000 f81e 	bl	8000d98 <Start_Game>
                return;
 8000d5c:	e016      	b.n	8000d8c <Start_Menu+0x98>
            }
            // 2P-Mode
            if (TM_STMPE811_TouchInRectangle(&touch, 120, 90, 40, 140))
 8000d5e:	88bb      	ldrh	r3, [r7, #4]
 8000d60:	2b77      	cmp	r3, #119	@ 0x77
 8000d62:	d90f      	bls.n	8000d84 <Start_Menu+0x90>
 8000d64:	88bb      	ldrh	r3, [r7, #4]
 8000d66:	2b9f      	cmp	r3, #159	@ 0x9f
 8000d68:	d80c      	bhi.n	8000d84 <Start_Menu+0x90>
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	2b59      	cmp	r3, #89	@ 0x59
 8000d6e:	d909      	bls.n	8000d84 <Start_Menu+0x90>
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	2be5      	cmp	r3, #229	@ 0xe5
 8000d74:	d806      	bhi.n	8000d84 <Start_Menu+0x90>
            {
                is1p = false;
 8000d76:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <Start_Menu+0xa0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
                Start_Game(false);
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f000 f80b 	bl	8000d98 <Start_Game>
                return;
 8000d82:	e003      	b.n	8000d8c <Start_Menu+0x98>
            }
        }

        HAL_Delay(100);
 8000d84:	2064      	movs	r0, #100	@ 0x64
 8000d86:	f002 fd6f 	bl	8003868 <HAL_Delay>
    {
 8000d8a:	e7b8      	b.n	8000cfe <Start_Menu+0xa>
    }
}
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20025968 	.word	0x20025968

08000d98 <Start_Game>:

void Start_Game(bool is1P)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08c      	sub	sp, #48	@ 0x30
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
    LCD_Clear(0, LCD_COLOR_BLACK);
 8000da2:	2100      	movs	r1, #0
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff fe6b 	bl	8000a80 <LCD_Clear>
    Game_CleanBoard(); // Start with a clean board in mem
 8000daa:	f000 f99b 	bl	80010e4 <Game_CleanBoard>
    GameScreen();      // Draw the actual board
 8000dae:	f001 fa3b 	bl	8002228 <GameScreen>

    int currentPlayer = RED; // Idk, red as first
 8000db2:	2301      	movs	r3, #1
 8000db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool gameOver = false;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    uint32_t startTime = HAL_GetTick();
 8000dbc:	f002 fd48 	bl	8003850 <HAL_GetTick>
 8000dc0:	61b8      	str	r0, [r7, #24]

    while (!gameOver)
 8000dc2:	e09e      	b.n	8000f02 <Start_Game+0x16a>
    {
        int result = -1;
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24

        // Player Moves
        if (!is1P || currentPlayer == RED)
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f083 0301 	eor.w	r3, r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d102      	bne.n	8000ddc <Start_Game+0x44>
 8000dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d104      	bne.n	8000de6 <Start_Game+0x4e>
        {
            // Either 2P, or it's the human player's turn in 1P
            result = Game_PlacingToken(currentPlayer);
 8000ddc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000dde:	f000 f8c9 	bl	8000f74 <Game_PlacingToken>
 8000de2:	6278      	str	r0, [r7, #36]	@ 0x24
 8000de4:	e03c      	b.n	8000e60 <Start_Game+0xc8>
        }
        else
        {
            // CPU Turn in 1P Mode (YELLOW)
            HAL_Delay(150);
 8000de6:	2096      	movs	r0, #150	@ 0x96
 8000de8:	f002 fd3e 	bl	8003868 <HAL_Delay>

            int col = 0;       // column we will finally use
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
            bool good = false; // becomes true once we find a legal column
 8000df0:	2300      	movs	r3, #0
 8000df2:	77fb      	strb	r3, [r7, #31]

            while (!good)
 8000df4:	e01c      	b.n	8000e30 <Start_Game+0x98>
            {
                uint32_t rnd = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
                HAL_RNG_GenerateRandomNumber(&hrng, &rnd); // grab a 32-bit random value
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4846      	ldr	r0, [pc, #280]	@ (8000f1c <Start_Game+0x184>)
 8000e02:	f005 fb1d 	bl	8006440 <HAL_RNG_GenerateRandomNumber>

                // Mod calculationt to give us a value between 0 to 6
                col = (int)(rnd % COLS);
 8000e06:	68b9      	ldr	r1, [r7, #8]
 8000e08:	4b45      	ldr	r3, [pc, #276]	@ (8000f20 <Start_Game+0x188>)
 8000e0a:	fba3 2301 	umull	r2, r3, r3, r1
 8000e0e:	1aca      	subs	r2, r1, r3
 8000e10:	0852      	lsrs	r2, r2, #1
 8000e12:	4413      	add	r3, r2
 8000e14:	089a      	lsrs	r2, r3, #2
 8000e16:	4613      	mov	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	1a9b      	subs	r3, r3, r2
 8000e1c:	1aca      	subs	r2, r1, r3
 8000e1e:	623a      	str	r2, [r7, #32]

                // Only use if it isn't full
                if (ColumnHasSpace(col))
 8000e20:	6a38      	ldr	r0, [r7, #32]
 8000e22:	f000 f883 	bl	8000f2c <ColumnHasSpace>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <Start_Game+0x98>
                {
                    good = true; // exit
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	77fb      	strb	r3, [r7, #31]
            while (!good)
 8000e30:	7ffb      	ldrb	r3, [r7, #31]
 8000e32:	f083 0301 	eor.w	r3, r3, #1
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1dc      	bne.n	8000df6 <Start_Game+0x5e>
                }
            }

            int row = Game_DropToken(col, currentPlayer);
 8000e3c:	6a3b      	ldr	r3, [r7, #32]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f974 	bl	8001134 <Game_DropToken>
 8000e4c:	6178      	str	r0, [r7, #20]
            DrawToken(row, col, currentPlayer); // draw the piece
 8000e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	461a      	mov	r2, r3
 8000e54:	6a39      	ldr	r1, [r7, #32]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f001 fa69 	bl	800232e <DrawToken>
            result = col;                       // For the win/tie logic
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        // Check the results
        if (result >= 0)
 8000e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db4a      	blt.n	8000efc <Start_Game+0x164>
        {
            if (Game_CheckWin(currentPlayer))
 8000e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f998 	bl	80011a0 <Game_CheckWin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d020      	beq.n	8000eb8 <Start_Game+0x120>
            {
                if (currentPlayer == RED)
 8000e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d105      	bne.n	8000e88 <Start_Game+0xf0>
                    redWins++;
 8000e7c:	4b29      	ldr	r3, [pc, #164]	@ (8000f24 <Start_Game+0x18c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3301      	adds	r3, #1
 8000e82:	4a28      	ldr	r2, [pc, #160]	@ (8000f24 <Start_Game+0x18c>)
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	e004      	b.n	8000e92 <Start_Game+0xfa>
                else
                    yellowWins++;
 8000e88:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <Start_Game+0x190>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	4a26      	ldr	r2, [pc, #152]	@ (8000f28 <Start_Game+0x190>)
 8000e90:	6013      	str	r3, [r2, #0]

                uint32_t duration = HAL_GetTick() - startTime;
 8000e92:	f002 fcdd 	bl	8003850 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	60fb      	str	r3, [r7, #12]
                EndScreen(currentPlayer, duration, redWins, yellowWins);
 8000e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ea0:	b2d8      	uxtb	r0, r3
 8000ea2:	4b20      	ldr	r3, [pc, #128]	@ (8000f24 <Start_Game+0x18c>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4b20      	ldr	r3, [pc, #128]	@ (8000f28 <Start_Game+0x190>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68f9      	ldr	r1, [r7, #12]
 8000eac:	f001 fa92 	bl	80023d4 <EndScreen>
                gameOver = true;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000eb6:	e01e      	b.n	8000ef6 <Start_Game+0x15e>
            }
            else if (BoardIsFull())
 8000eb8:	f000 f8e8 	bl	800108c <BoardIsFull>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d011      	beq.n	8000ee6 <Start_Game+0x14e>
            {
                uint32_t duration = HAL_GetTick() - startTime;
 8000ec2:	f002 fcc5 	bl	8003850 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	613b      	str	r3, [r7, #16]
                EndScreen(0, duration, redWins, yellowWins);
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <Start_Game+0x18c>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <Start_Game+0x190>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6939      	ldr	r1, [r7, #16]
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f001 fa7b 	bl	80023d4 <EndScreen>
                gameOver = true;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000ee4:	e007      	b.n	8000ef6 <Start_Game+0x15e>
            }
            else
            {
                // Next player play
                if (currentPlayer == RED)
 8000ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d102      	bne.n	8000ef2 <Start_Game+0x15a>
                {
                    currentPlayer = YELLOW;
 8000eec:	2302      	movs	r3, #2
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ef0:	e001      	b.n	8000ef6 <Start_Game+0x15e>
                }
                else
                {
                    currentPlayer = RED;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }
            }

            HAL_Delay(150);
 8000ef6:	2096      	movs	r0, #150	@ 0x96
 8000ef8:	f002 fcb6 	bl	8003868 <HAL_Delay>
        }

        HAL_Delay(50);
 8000efc:	2032      	movs	r0, #50	@ 0x32
 8000efe:	f002 fcb3 	bl	8003868 <HAL_Delay>
    while (!gameOver)
 8000f02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000f06:	f083 0301 	eor.w	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f47f af59 	bne.w	8000dc4 <Start_Game+0x2c>
    }
}
 8000f12:	bf00      	nop
 8000f14:	bf00      	nop
 8000f16:	3730      	adds	r7, #48	@ 0x30
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200259fc 	.word	0x200259fc
 8000f20:	24924925 	.word	0x24924925
 8000f24:	2002596c 	.word	0x2002596c
 8000f28:	20025970 	.word	0x20025970

08000f2c <ColumnHasSpace>:

// for the 1p mode, we have to know that the rng is valid so we check that the column is empty
bool ColumnHasSpace(int col)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
    for (int r = 0; r < ROWS; r++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	e00f      	b.n	8000f5a <ColumnHasSpace+0x2e>
    {
        if (board[r][col] == EMPTY)
 8000f3a:	490d      	ldr	r1, [pc, #52]	@ (8000f70 <ColumnHasSpace+0x44>)
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	18ca      	adds	r2, r1, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <ColumnHasSpace+0x28>
            return true;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e006      	b.n	8000f62 <ColumnHasSpace+0x36>
    for (int r = 0; r < ROWS; r++)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	3301      	adds	r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2b05      	cmp	r3, #5
 8000f5e:	ddec      	ble.n	8000f3a <ColumnHasSpace+0xe>
    }
    return false;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20025974 	.word	0x20025974

08000f74 <Game_PlacingToken>:

int Game_PlacingToken(int currentPlayer)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    static int currentCol = 3;
    int lastCol = currentCol; // Keep a track of where the cursor last was so we can erase it
 8000f7c:	4b40      	ldr	r3, [pc, #256]	@ (8001080 <Game_PlacingToken+0x10c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	61fb      	str	r3, [r7, #28]

    DrawCursor(currentCol, currentPlayer); // Initial draw
 8000f82:	4b3f      	ldr	r3, [pc, #252]	@ (8001080 <Game_PlacingToken+0x10c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 f9ef 	bl	8002370 <DrawCursor>

    while (1)
    {

        STMPE811_TouchData touch;
        touch.orientation = STMPE811_Orientation_Portrait_1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	74bb      	strb	r3, [r7, #18]
        STMPE811_State_t state = STMPE811_ReadTouch(&touch);
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 f8e6 	bl	800316c <STMPE811_ReadTouch>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	76fb      	strb	r3, [r7, #27]

        if (state == STMPE811_State_Pressed)
 8000fa4:	7efb      	ldrb	r3, [r7, #27]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d131      	bne.n	800100e <Game_PlacingToken+0x9a>
        {
            if (touch.y > 160 && currentCol > 0)
 8000faa:	89fb      	ldrh	r3, [r7, #14]
 8000fac:	2ba0      	cmp	r3, #160	@ 0xa0
 8000fae:	d90c      	bls.n	8000fca <Game_PlacingToken+0x56>
 8000fb0:	4b33      	ldr	r3, [pc, #204]	@ (8001080 <Game_PlacingToken+0x10c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	dd08      	ble.n	8000fca <Game_PlacingToken+0x56>
            {
                lastCol = currentCol;
 8000fb8:	4b31      	ldr	r3, [pc, #196]	@ (8001080 <Game_PlacingToken+0x10c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	61fb      	str	r3, [r7, #28]
                currentCol--;
 8000fbe:	4b30      	ldr	r3, [pc, #192]	@ (8001080 <Game_PlacingToken+0x10c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	4a2e      	ldr	r2, [pc, #184]	@ (8001080 <Game_PlacingToken+0x10c>)
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	e00e      	b.n	8000fe8 <Game_PlacingToken+0x74>
            }
            else if (touch.y <= 160 && currentCol < COLS - 1)
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	2ba0      	cmp	r3, #160	@ 0xa0
 8000fce:	d80b      	bhi.n	8000fe8 <Game_PlacingToken+0x74>
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8001080 <Game_PlacingToken+0x10c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b05      	cmp	r3, #5
 8000fd6:	dc07      	bgt.n	8000fe8 <Game_PlacingToken+0x74>
            {
                lastCol = currentCol;
 8000fd8:	4b29      	ldr	r3, [pc, #164]	@ (8001080 <Game_PlacingToken+0x10c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	61fb      	str	r3, [r7, #28]
                currentCol++;
 8000fde:	4b28      	ldr	r3, [pc, #160]	@ (8001080 <Game_PlacingToken+0x10c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4a26      	ldr	r2, [pc, #152]	@ (8001080 <Game_PlacingToken+0x10c>)
 8000fe6:	6013      	str	r3, [r2, #0]
            }

            // As the cursor moves left and right, erase the prev location
            if (lastCol != currentCol)
 8000fe8:	4b25      	ldr	r3, [pc, #148]	@ (8001080 <Game_PlacingToken+0x10c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	69fa      	ldr	r2, [r7, #28]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d00d      	beq.n	800100e <Game_PlacingToken+0x9a>
            {
                // Erase previous cursor
                EraseCursor(lastCol);
 8000ff2:	69f8      	ldr	r0, [r7, #28]
 8000ff4:	f001 f9dd 	bl	80023b2 <EraseCursor>

                // Draw new cursor
                DrawCursor(currentCol, currentPlayer);
 8000ff8:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <Game_PlacingToken+0x10c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	4611      	mov	r1, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f001 f9b4 	bl	8002370 <DrawCursor>
                HAL_Delay(200);
 8001008:	20c8      	movs	r0, #200	@ 0xc8
 800100a:	f002 fc2d 	bl	8003868 <HAL_Delay>
            }
        }

        // Button Interrupt
        if (dropRequested)
 800100e:	4b1d      	ldr	r3, [pc, #116]	@ (8001084 <Game_PlacingToken+0x110>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d02a      	beq.n	800106e <Game_PlacingToken+0xfa>
        {
            dropRequested = false; // Reset the flag
 8001018:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <Game_PlacingToken+0x110>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]

            int placedRow = Game_DropToken(currentCol, currentPlayer);
 800101e:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <Game_PlacingToken+0x10c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f882 	bl	8001134 <Game_DropToken>
 8001030:	6178      	str	r0, [r7, #20]

            if (placedRow >= 0)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db1a      	blt.n	800106e <Game_PlacingToken+0xfa>
            {
                DrawToken(placedRow, currentCol, currentPlayer);
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <Game_PlacingToken+0x10c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	4619      	mov	r1, r3
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f001 f973 	bl	800232e <DrawToken>
                EraseCursor(currentCol);
 8001048:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <Game_PlacingToken+0x10c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f001 f9b0 	bl	80023b2 <EraseCursor>

                // Kinda a debounce guard. had some issues where it mis registerd the button
                while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8001052:	e002      	b.n	800105a <Game_PlacingToken+0xe6>
                {
                    HAL_Delay(10);
 8001054:	200a      	movs	r0, #10
 8001056:	f002 fc07 	bl	8003868 <HAL_Delay>
                while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 800105a:	2101      	movs	r1, #1
 800105c:	480a      	ldr	r0, [pc, #40]	@ (8001088 <Game_PlacingToken+0x114>)
 800105e:	f002 fff1 	bl	8004044 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b01      	cmp	r3, #1
 8001066:	d0f5      	beq.n	8001054 <Game_PlacingToken+0xe0>
                }

                return currentCol;
 8001068:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <Game_PlacingToken+0x10c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	e003      	b.n	8001076 <Game_PlacingToken+0x102>
            }
        }

        HAL_Delay(50);
 800106e:	2032      	movs	r0, #50	@ 0x32
 8001070:	f002 fbfa 	bl	8003868 <HAL_Delay>
    {
 8001074:	e78d      	b.n	8000f92 <Game_PlacingToken+0x1e>
    }

    return -1;
}
 8001076:	4618      	mov	r0, r3
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000000c 	.word	0x2000000c
 8001084:	2002599e 	.word	0x2002599e
 8001088:	40020000 	.word	0x40020000

0800108c <BoardIsFull>:

bool BoardIsFull(void)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
    for (int c = 0; c < COLS; c++)
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	e018      	b.n	80010ca <BoardIsFull+0x3e>
    {
        for (int r = 0; r < ROWS; r++)
 8001098:	2300      	movs	r3, #0
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	e00f      	b.n	80010be <BoardIsFull+0x32>
        {
            if (board[r][c] == EMPTY)
 800109e:	4910      	ldr	r1, [pc, #64]	@ (80010e0 <BoardIsFull+0x54>)
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	1a9b      	subs	r3, r3, r2
 80010a8:	18ca      	adds	r2, r1, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <BoardIsFull+0x2c>
            {
                return false; // Found at least one empty slot
 80010b4:	2300      	movs	r3, #0
 80010b6:	e00c      	b.n	80010d2 <BoardIsFull+0x46>
        for (int r = 0; r < ROWS; r++)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	ddec      	ble.n	800109e <BoardIsFull+0x12>
    for (int c = 0; c < COLS; c++)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3301      	adds	r3, #1
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b06      	cmp	r3, #6
 80010ce:	dde3      	ble.n	8001098 <BoardIsFull+0xc>
            }
        }
    }
    return true; // No empties found
 80010d0:	2301      	movs	r3, #1
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20025974 	.word	0x20025974

080010e4 <Game_CleanBoard>:

// Genereate/Clean a fresh board
void Game_CleanBoard(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
    for (int r = 0; r < ROWS; r++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	e015      	b.n	800111c <Game_CleanBoard+0x38>
    {
        for (int c = 0; c < COLS; c++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	e00c      	b.n	8001110 <Game_CleanBoard+0x2c>
        {
            board[r][c] = EMPTY;
 80010f6:	490e      	ldr	r1, [pc, #56]	@ (8001130 <Game_CleanBoard+0x4c>)
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	18ca      	adds	r2, r1, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	4413      	add	r3, r2
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < COLS; c++)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	2b06      	cmp	r3, #6
 8001114:	ddef      	ble.n	80010f6 <Game_CleanBoard+0x12>
    for (int r = 0; r < ROWS; r++)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3301      	adds	r3, #1
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b05      	cmp	r3, #5
 8001120:	dde6      	ble.n	80010f0 <Game_CleanBoard+0xc>
        }
    }
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	20025974 	.word	0x20025974

08001134 <Game_DropToken>:

int Game_DropToken(uint8_t col, uint8_t player)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	460a      	mov	r2, r1
 800113e:	71fb      	strb	r3, [r7, #7]
 8001140:	4613      	mov	r3, r2
 8001142:	71bb      	strb	r3, [r7, #6]
    int actualCol = (COLS - 1) - col; // Flip the column
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f1c3 0306 	rsb	r3, r3, #6
 800114a:	60bb      	str	r3, [r7, #8]

    for (int row = ROWS - 1; row >= 0; row--)
 800114c:	2305      	movs	r3, #5
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	e019      	b.n	8001186 <Game_DropToken+0x52>
    {
        if (board[row][actualCol] == EMPTY)
 8001152:	4912      	ldr	r1, [pc, #72]	@ (800119c <Game_DropToken+0x68>)
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	1a9b      	subs	r3, r3, r2
 800115c:	18ca      	adds	r2, r1, r3
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	4413      	add	r3, r2
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10b      	bne.n	8001180 <Game_DropToken+0x4c>
        {
            board[row][actualCol] = player;
 8001168:	490c      	ldr	r1, [pc, #48]	@ (800119c <Game_DropToken+0x68>)
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4613      	mov	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	18ca      	adds	r2, r1, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4413      	add	r3, r2
 8001178:	79ba      	ldrb	r2, [r7, #6]
 800117a:	701a      	strb	r2, [r3, #0]
            return row; // Return the row where token landed
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	e007      	b.n	8001190 <Game_DropToken+0x5c>
    for (int row = ROWS - 1; row >= 0; row--)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3b01      	subs	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2b00      	cmp	r3, #0
 800118a:	dae2      	bge.n	8001152 <Game_DropToken+0x1e>
        }
    }
    return -1; // Column full
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001190:	4618      	mov	r0, r3
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	20025974 	.word	0x20025974

080011a0 <Game_CheckWin>:

bool Game_CheckWin(uint8_t player)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b08b      	sub	sp, #44	@ 0x2c
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
    // Horizontal
    for (int r = 0; r < ROWS; r++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ae:	e040      	b.n	8001232 <Game_CheckWin+0x92>
    {
        for (int c = 0; c <= COLS - 4; c++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
 80011b4:	e037      	b.n	8001226 <Game_CheckWin+0x86>
        {
            if (board[r][c] == player && board[r][c + 1] == player &&
 80011b6:	4991      	ldr	r1, [pc, #580]	@ (80013fc <Game_CheckWin+0x25c>)
 80011b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011ba:	4613      	mov	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	1a9b      	subs	r3, r3, r2
 80011c0:	18ca      	adds	r2, r1, r3
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	4413      	add	r3, r2
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	79fa      	ldrb	r2, [r7, #7]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d128      	bne.n	8001220 <Game_CheckWin+0x80>
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	1c59      	adds	r1, r3, #1
 80011d2:	488a      	ldr	r0, [pc, #552]	@ (80013fc <Game_CheckWin+0x25c>)
 80011d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011d6:	4613      	mov	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	4403      	add	r3, r0
 80011de:	440b      	add	r3, r1
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	79fa      	ldrb	r2, [r7, #7]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d11b      	bne.n	8001220 <Game_CheckWin+0x80>
                board[r][c + 2] == player && board[r][c + 3] == player)
 80011e8:	6a3b      	ldr	r3, [r7, #32]
 80011ea:	1c99      	adds	r1, r3, #2
 80011ec:	4883      	ldr	r0, [pc, #524]	@ (80013fc <Game_CheckWin+0x25c>)
 80011ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011f0:	4613      	mov	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	1a9b      	subs	r3, r3, r2
 80011f6:	4403      	add	r3, r0
 80011f8:	440b      	add	r3, r1
 80011fa:	781b      	ldrb	r3, [r3, #0]
            if (board[r][c] == player && board[r][c + 1] == player &&
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d10e      	bne.n	8001220 <Game_CheckWin+0x80>
                board[r][c + 2] == player && board[r][c + 3] == player)
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	1cd9      	adds	r1, r3, #3
 8001206:	487d      	ldr	r0, [pc, #500]	@ (80013fc <Game_CheckWin+0x25c>)
 8001208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800120a:	4613      	mov	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	1a9b      	subs	r3, r3, r2
 8001210:	4403      	add	r3, r0
 8001212:	440b      	add	r3, r1
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	429a      	cmp	r2, r3
 800121a:	d101      	bne.n	8001220 <Game_CheckWin+0x80>
                return true;
 800121c:	2301      	movs	r3, #1
 800121e:	e0e7      	b.n	80013f0 <Game_CheckWin+0x250>
        for (int c = 0; c <= COLS - 4; c++)
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	3301      	adds	r3, #1
 8001224:	623b      	str	r3, [r7, #32]
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	2b03      	cmp	r3, #3
 800122a:	ddc4      	ble.n	80011b6 <Game_CheckWin+0x16>
    for (int r = 0; r < ROWS; r++)
 800122c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122e:	3301      	adds	r3, #1
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
 8001232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001234:	2b05      	cmp	r3, #5
 8001236:	ddbb      	ble.n	80011b0 <Game_CheckWin+0x10>
        }
    }

    // Vertical
    for (int r = 0; r <= ROWS - 4; r++)
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	e040      	b.n	80012c0 <Game_CheckWin+0x120>
    {
        for (int c = 0; c < COLS; c++)
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	e037      	b.n	80012b4 <Game_CheckWin+0x114>
        {
            if (board[r][c] == player && board[r + 1][c] == player &&
 8001244:	496d      	ldr	r1, [pc, #436]	@ (80013fc <Game_CheckWin+0x25c>)
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	4613      	mov	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	1a9b      	subs	r3, r3, r2
 800124e:	18ca      	adds	r2, r1, r3
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	4413      	add	r3, r2
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	79fa      	ldrb	r2, [r7, #7]
 8001258:	429a      	cmp	r2, r3
 800125a:	d128      	bne.n	80012ae <Game_CheckWin+0x10e>
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	4966      	ldr	r1, [pc, #408]	@ (80013fc <Game_CheckWin+0x25c>)
 8001262:	4613      	mov	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	1a9b      	subs	r3, r3, r2
 8001268:	18ca      	adds	r2, r1, r3
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	79fa      	ldrb	r2, [r7, #7]
 8001272:	429a      	cmp	r2, r3
 8001274:	d11b      	bne.n	80012ae <Game_CheckWin+0x10e>
                board[r + 2][c] == player && board[r + 3][c] == player)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	1c9a      	adds	r2, r3, #2
 800127a:	4960      	ldr	r1, [pc, #384]	@ (80013fc <Game_CheckWin+0x25c>)
 800127c:	4613      	mov	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	18ca      	adds	r2, r1, r3
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
            if (board[r][c] == player && board[r + 1][c] == player &&
 800128a:	79fa      	ldrb	r2, [r7, #7]
 800128c:	429a      	cmp	r2, r3
 800128e:	d10e      	bne.n	80012ae <Game_CheckWin+0x10e>
                board[r + 2][c] == player && board[r + 3][c] == player)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	1cda      	adds	r2, r3, #3
 8001294:	4959      	ldr	r1, [pc, #356]	@ (80013fc <Game_CheckWin+0x25c>)
 8001296:	4613      	mov	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	1a9b      	subs	r3, r3, r2
 800129c:	18ca      	adds	r2, r1, r3
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	79fa      	ldrb	r2, [r7, #7]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d101      	bne.n	80012ae <Game_CheckWin+0x10e>
                return true;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e0a0      	b.n	80013f0 <Game_CheckWin+0x250>
        for (int c = 0; c < COLS; c++)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	3301      	adds	r3, #1
 80012b2:	61bb      	str	r3, [r7, #24]
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	ddc4      	ble.n	8001244 <Game_CheckWin+0xa4>
    for (int r = 0; r <= ROWS - 4; r++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	ddbb      	ble.n	800123e <Game_CheckWin+0x9e>
        }
    }

    // Diagonal right
    for (int r = 0; r <= ROWS - 4; r++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e043      	b.n	8001354 <Game_CheckWin+0x1b4>
    {
        for (int c = 0; c <= COLS - 4; c++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	e03a      	b.n	8001348 <Game_CheckWin+0x1a8>
        {
            if (board[r][c] == player && board[r + 1][c + 1] == player &&
 80012d2:	494a      	ldr	r1, [pc, #296]	@ (80013fc <Game_CheckWin+0x25c>)
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	4613      	mov	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	18ca      	adds	r2, r1, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4413      	add	r3, r2
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	79fa      	ldrb	r2, [r7, #7]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d12b      	bne.n	8001342 <Game_CheckWin+0x1a2>
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1c59      	adds	r1, r3, #1
 80012f2:	4842      	ldr	r0, [pc, #264]	@ (80013fc <Game_CheckWin+0x25c>)
 80012f4:	4613      	mov	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	1a9b      	subs	r3, r3, r2
 80012fa:	4403      	add	r3, r0
 80012fc:	440b      	add	r3, r1
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	79fa      	ldrb	r2, [r7, #7]
 8001302:	429a      	cmp	r2, r3
 8001304:	d11d      	bne.n	8001342 <Game_CheckWin+0x1a2>
                board[r + 2][c + 2] == player && board[r + 3][c + 3] == player)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	1c9a      	adds	r2, r3, #2
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1c99      	adds	r1, r3, #2
 800130e:	483b      	ldr	r0, [pc, #236]	@ (80013fc <Game_CheckWin+0x25c>)
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	1a9b      	subs	r3, r3, r2
 8001316:	4403      	add	r3, r0
 8001318:	440b      	add	r3, r1
 800131a:	781b      	ldrb	r3, [r3, #0]
            if (board[r][c] == player && board[r + 1][c + 1] == player &&
 800131c:	79fa      	ldrb	r2, [r7, #7]
 800131e:	429a      	cmp	r2, r3
 8001320:	d10f      	bne.n	8001342 <Game_CheckWin+0x1a2>
                board[r + 2][c + 2] == player && board[r + 3][c + 3] == player)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	1cda      	adds	r2, r3, #3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1cd9      	adds	r1, r3, #3
 800132a:	4834      	ldr	r0, [pc, #208]	@ (80013fc <Game_CheckWin+0x25c>)
 800132c:	4613      	mov	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	1a9b      	subs	r3, r3, r2
 8001332:	4403      	add	r3, r0
 8001334:	440b      	add	r3, r1
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	429a      	cmp	r2, r3
 800133c:	d101      	bne.n	8001342 <Game_CheckWin+0x1a2>
                return true;
 800133e:	2301      	movs	r3, #1
 8001340:	e056      	b.n	80013f0 <Game_CheckWin+0x250>
        for (int c = 0; c <= COLS - 4; c++)
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	3301      	adds	r3, #1
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	2b03      	cmp	r3, #3
 800134c:	ddc1      	ble.n	80012d2 <Game_CheckWin+0x132>
    for (int r = 0; r <= ROWS - 4; r++)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	2b02      	cmp	r3, #2
 8001358:	ddb8      	ble.n	80012cc <Game_CheckWin+0x12c>
        }
    }

    // Diagonal left
    for (int r = 0; r <= ROWS - 4; r++)
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	e043      	b.n	80013e8 <Game_CheckWin+0x248>
    {
        for (int c = 3; c < COLS; c++)
 8001360:	2303      	movs	r3, #3
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	e03a      	b.n	80013dc <Game_CheckWin+0x23c>
        {
            if (board[r][c] == player && board[r + 1][c - 1] == player &&
 8001366:	4925      	ldr	r1, [pc, #148]	@ (80013fc <Game_CheckWin+0x25c>)
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	4613      	mov	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	1a9b      	subs	r3, r3, r2
 8001370:	18ca      	adds	r2, r1, r3
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	79fa      	ldrb	r2, [r7, #7]
 800137a:	429a      	cmp	r2, r3
 800137c:	d12b      	bne.n	80013d6 <Game_CheckWin+0x236>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1e59      	subs	r1, r3, #1
 8001386:	481d      	ldr	r0, [pc, #116]	@ (80013fc <Game_CheckWin+0x25c>)
 8001388:	4613      	mov	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	4403      	add	r3, r0
 8001390:	440b      	add	r3, r1
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	79fa      	ldrb	r2, [r7, #7]
 8001396:	429a      	cmp	r2, r3
 8001398:	d11d      	bne.n	80013d6 <Game_CheckWin+0x236>
                board[r + 2][c - 2] == player && board[r + 3][c - 3] == player)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1c9a      	adds	r2, r3, #2
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	1e99      	subs	r1, r3, #2
 80013a2:	4816      	ldr	r0, [pc, #88]	@ (80013fc <Game_CheckWin+0x25c>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	1a9b      	subs	r3, r3, r2
 80013aa:	4403      	add	r3, r0
 80013ac:	440b      	add	r3, r1
 80013ae:	781b      	ldrb	r3, [r3, #0]
            if (board[r][c] == player && board[r + 1][c - 1] == player &&
 80013b0:	79fa      	ldrb	r2, [r7, #7]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d10f      	bne.n	80013d6 <Game_CheckWin+0x236>
                board[r + 2][c - 2] == player && board[r + 3][c - 3] == player)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1cda      	adds	r2, r3, #3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ed9      	subs	r1, r3, #3
 80013be:	480f      	ldr	r0, [pc, #60]	@ (80013fc <Game_CheckWin+0x25c>)
 80013c0:	4613      	mov	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	1a9b      	subs	r3, r3, r2
 80013c6:	4403      	add	r3, r0
 80013c8:	440b      	add	r3, r1
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	79fa      	ldrb	r2, [r7, #7]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d101      	bne.n	80013d6 <Game_CheckWin+0x236>
                return true;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00c      	b.n	80013f0 <Game_CheckWin+0x250>
        for (int c = 3; c < COLS; c++)
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3301      	adds	r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2b06      	cmp	r3, #6
 80013e0:	ddc1      	ble.n	8001366 <Game_CheckWin+0x1c6>
    for (int r = 0; r <= ROWS - 4; r++)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3301      	adds	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	ddb8      	ble.n	8001360 <Game_CheckWin+0x1c0>
        }
    }

    return false;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	372c      	adds	r7, #44	@ 0x2c
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	20025974 	.word	0x20025974

08001400 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001404:	f000 f9fe 	bl	8001804 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001408:	20ca      	movs	r0, #202	@ 0xca
 800140a:	f000 f943 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800140e:	20c3      	movs	r0, #195	@ 0xc3
 8001410:	f000 f94d 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001414:	2008      	movs	r0, #8
 8001416:	f000 f94a 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800141a:	2050      	movs	r0, #80	@ 0x50
 800141c:	f000 f947 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001420:	20cf      	movs	r0, #207	@ 0xcf
 8001422:	f000 f937 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001426:	2000      	movs	r0, #0
 8001428:	f000 f941 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 800142c:	20c1      	movs	r0, #193	@ 0xc1
 800142e:	f000 f93e 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001432:	2030      	movs	r0, #48	@ 0x30
 8001434:	f000 f93b 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001438:	20ed      	movs	r0, #237	@ 0xed
 800143a:	f000 f92b 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 800143e:	2064      	movs	r0, #100	@ 0x64
 8001440:	f000 f935 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001444:	2003      	movs	r0, #3
 8001446:	f000 f932 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 800144a:	2012      	movs	r0, #18
 800144c:	f000 f92f 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001450:	2081      	movs	r0, #129	@ 0x81
 8001452:	f000 f92c 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001456:	20e8      	movs	r0, #232	@ 0xe8
 8001458:	f000 f91c 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 800145c:	2085      	movs	r0, #133	@ 0x85
 800145e:	f000 f926 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001462:	2000      	movs	r0, #0
 8001464:	f000 f923 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001468:	2078      	movs	r0, #120	@ 0x78
 800146a:	f000 f920 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 800146e:	20cb      	movs	r0, #203	@ 0xcb
 8001470:	f000 f910 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001474:	2039      	movs	r0, #57	@ 0x39
 8001476:	f000 f91a 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800147a:	202c      	movs	r0, #44	@ 0x2c
 800147c:	f000 f917 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001480:	2000      	movs	r0, #0
 8001482:	f000 f914 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001486:	2034      	movs	r0, #52	@ 0x34
 8001488:	f000 f911 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 800148c:	2002      	movs	r0, #2
 800148e:	f000 f90e 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001492:	20f7      	movs	r0, #247	@ 0xf7
 8001494:	f000 f8fe 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001498:	2020      	movs	r0, #32
 800149a:	f000 f908 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 800149e:	20ea      	movs	r0, #234	@ 0xea
 80014a0:	f000 f8f8 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80014a4:	2000      	movs	r0, #0
 80014a6:	f000 f902 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f000 f8ff 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80014b0:	20b1      	movs	r0, #177	@ 0xb1
 80014b2:	f000 f8ef 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 f8f9 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80014bc:	201b      	movs	r0, #27
 80014be:	f000 f8f6 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80014c2:	20b6      	movs	r0, #182	@ 0xb6
 80014c4:	f000 f8e6 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80014c8:	200a      	movs	r0, #10
 80014ca:	f000 f8f0 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80014ce:	20a2      	movs	r0, #162	@ 0xa2
 80014d0:	f000 f8ed 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80014d4:	20c0      	movs	r0, #192	@ 0xc0
 80014d6:	f000 f8dd 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80014da:	2010      	movs	r0, #16
 80014dc:	f000 f8e7 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80014e0:	20c1      	movs	r0, #193	@ 0xc1
 80014e2:	f000 f8d7 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80014e6:	2010      	movs	r0, #16
 80014e8:	f000 f8e1 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80014ec:	20c5      	movs	r0, #197	@ 0xc5
 80014ee:	f000 f8d1 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80014f2:	2045      	movs	r0, #69	@ 0x45
 80014f4:	f000 f8db 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80014f8:	2015      	movs	r0, #21
 80014fa:	f000 f8d8 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80014fe:	20c7      	movs	r0, #199	@ 0xc7
 8001500:	f000 f8c8 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001504:	2090      	movs	r0, #144	@ 0x90
 8001506:	f000 f8d2 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800150a:	2036      	movs	r0, #54	@ 0x36
 800150c:	f000 f8c2 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001510:	20c8      	movs	r0, #200	@ 0xc8
 8001512:	f000 f8cc 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001516:	20f2      	movs	r0, #242	@ 0xf2
 8001518:	f000 f8bc 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800151c:	2000      	movs	r0, #0
 800151e:	f000 f8c6 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001522:	20b0      	movs	r0, #176	@ 0xb0
 8001524:	f000 f8b6 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001528:	20c2      	movs	r0, #194	@ 0xc2
 800152a:	f000 f8c0 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800152e:	20b6      	movs	r0, #182	@ 0xb6
 8001530:	f000 f8b0 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001534:	200a      	movs	r0, #10
 8001536:	f000 f8ba 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800153a:	20a7      	movs	r0, #167	@ 0xa7
 800153c:	f000 f8b7 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001540:	2027      	movs	r0, #39	@ 0x27
 8001542:	f000 f8b4 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001546:	2004      	movs	r0, #4
 8001548:	f000 f8b1 	bl	80016ae <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 800154c:	202a      	movs	r0, #42	@ 0x2a
 800154e:	f000 f8a1 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001552:	2000      	movs	r0, #0
 8001554:	f000 f8ab 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001558:	2000      	movs	r0, #0
 800155a:	f000 f8a8 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800155e:	2000      	movs	r0, #0
 8001560:	f000 f8a5 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001564:	20ef      	movs	r0, #239	@ 0xef
 8001566:	f000 f8a2 	bl	80016ae <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800156a:	202b      	movs	r0, #43	@ 0x2b
 800156c:	f000 f892 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001570:	2000      	movs	r0, #0
 8001572:	f000 f89c 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001576:	2000      	movs	r0, #0
 8001578:	f000 f899 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 800157c:	2001      	movs	r0, #1
 800157e:	f000 f896 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001582:	203f      	movs	r0, #63	@ 0x3f
 8001584:	f000 f893 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001588:	20f6      	movs	r0, #246	@ 0xf6
 800158a:	f000 f883 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800158e:	2001      	movs	r0, #1
 8001590:	f000 f88d 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001594:	2000      	movs	r0, #0
 8001596:	f000 f88a 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800159a:	2006      	movs	r0, #6
 800159c:	f000 f887 	bl	80016ae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80015a0:	202c      	movs	r0, #44	@ 0x2c
 80015a2:	f000 f877 	bl	8001694 <ili9341_Write_Reg>
  LCD_Delay(200);
 80015a6:	20c8      	movs	r0, #200	@ 0xc8
 80015a8:	f000 f9e8 	bl	800197c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80015ac:	2026      	movs	r0, #38	@ 0x26
 80015ae:	f000 f871 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f000 f87b 	bl	80016ae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80015b8:	20e0      	movs	r0, #224	@ 0xe0
 80015ba:	f000 f86b 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80015be:	200f      	movs	r0, #15
 80015c0:	f000 f875 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80015c4:	2029      	movs	r0, #41	@ 0x29
 80015c6:	f000 f872 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80015ca:	2024      	movs	r0, #36	@ 0x24
 80015cc:	f000 f86f 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80015d0:	200c      	movs	r0, #12
 80015d2:	f000 f86c 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80015d6:	200e      	movs	r0, #14
 80015d8:	f000 f869 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80015dc:	2009      	movs	r0, #9
 80015de:	f000 f866 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80015e2:	204e      	movs	r0, #78	@ 0x4e
 80015e4:	f000 f863 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80015e8:	2078      	movs	r0, #120	@ 0x78
 80015ea:	f000 f860 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80015ee:	203c      	movs	r0, #60	@ 0x3c
 80015f0:	f000 f85d 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80015f4:	2009      	movs	r0, #9
 80015f6:	f000 f85a 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80015fa:	2013      	movs	r0, #19
 80015fc:	f000 f857 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001600:	2005      	movs	r0, #5
 8001602:	f000 f854 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001606:	2017      	movs	r0, #23
 8001608:	f000 f851 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800160c:	2011      	movs	r0, #17
 800160e:	f000 f84e 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001612:	2000      	movs	r0, #0
 8001614:	f000 f84b 	bl	80016ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001618:	20e1      	movs	r0, #225	@ 0xe1
 800161a:	f000 f83b 	bl	8001694 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800161e:	2000      	movs	r0, #0
 8001620:	f000 f845 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001624:	2016      	movs	r0, #22
 8001626:	f000 f842 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800162a:	201b      	movs	r0, #27
 800162c:	f000 f83f 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001630:	2004      	movs	r0, #4
 8001632:	f000 f83c 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001636:	2011      	movs	r0, #17
 8001638:	f000 f839 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800163c:	2007      	movs	r0, #7
 800163e:	f000 f836 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001642:	2031      	movs	r0, #49	@ 0x31
 8001644:	f000 f833 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001648:	2033      	movs	r0, #51	@ 0x33
 800164a:	f000 f830 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 800164e:	2042      	movs	r0, #66	@ 0x42
 8001650:	f000 f82d 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001654:	2005      	movs	r0, #5
 8001656:	f000 f82a 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800165a:	200c      	movs	r0, #12
 800165c:	f000 f827 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001660:	200a      	movs	r0, #10
 8001662:	f000 f824 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001666:	2028      	movs	r0, #40	@ 0x28
 8001668:	f000 f821 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 800166c:	202f      	movs	r0, #47	@ 0x2f
 800166e:	f000 f81e 	bl	80016ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001672:	200f      	movs	r0, #15
 8001674:	f000 f81b 	bl	80016ae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001678:	2011      	movs	r0, #17
 800167a:	f000 f80b 	bl	8001694 <ili9341_Write_Reg>
  LCD_Delay(200);
 800167e:	20c8      	movs	r0, #200	@ 0xc8
 8001680:	f000 f97c 	bl	800197c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001684:	2029      	movs	r0, #41	@ 0x29
 8001686:	f000 f805 	bl	8001694 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800168a:	202c      	movs	r0, #44	@ 0x2c
 800168c:	f000 f802 	bl	8001694 <ili9341_Write_Reg>
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 f949 	bl	8001938 <LCD_IO_WriteReg>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f91a 	bl	80018f4 <LCD_IO_WriteData>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80016cc:	4819      	ldr	r0, [pc, #100]	@ (8001734 <SPI_Init+0x6c>)
 80016ce:	f005 f902 	bl	80068d6 <HAL_SPI_GetState>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d12b      	bne.n	8001730 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80016d8:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <SPI_Init+0x6c>)
 80016da:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <SPI_Init+0x70>)
 80016dc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <SPI_Init+0x6c>)
 80016e0:	2218      	movs	r2, #24
 80016e2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80016e4:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <SPI_Init+0x6c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80016ea:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <SPI_Init+0x6c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80016f0:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <SPI_Init+0x6c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80016f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <SPI_Init+0x6c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80016fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <SPI_Init+0x6c>)
 80016fe:	2207      	movs	r2, #7
 8001700:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001702:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <SPI_Init+0x6c>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001708:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <SPI_Init+0x6c>)
 800170a:	2200      	movs	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <SPI_Init+0x6c>)
 8001710:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001714:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001716:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <SPI_Init+0x6c>)
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <SPI_Init+0x6c>)
 800171e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001722:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001724:	4803      	ldr	r0, [pc, #12]	@ (8001734 <SPI_Init+0x6c>)
 8001726:	f000 f833 	bl	8001790 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800172a:	4802      	ldr	r0, [pc, #8]	@ (8001734 <SPI_Init+0x6c>)
 800172c:	f004 fede 	bl	80064ec <HAL_SPI_Init>
  }
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200259a0 	.word	0x200259a0
 8001738:	40015000 	.word	0x40015000

0800173c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <SPI_Write+0x34>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	1db9      	adds	r1, r7, #6
 8001750:	2201      	movs	r2, #1
 8001752:	4808      	ldr	r0, [pc, #32]	@ (8001774 <SPI_Write+0x38>)
 8001754:	f004 ff7b 	bl	800664e <HAL_SPI_Transmit>
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001762:	f000 f809 	bl	8001778 <SPI_Error>
  }
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000010 	.word	0x20000010
 8001774:	200259a0 	.word	0x200259a0

08001778 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800177c:	4803      	ldr	r0, [pc, #12]	@ (800178c <SPI_Error+0x14>)
 800177e:	f004 ff3e 	bl	80065fe <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001782:	f7ff ffa1 	bl	80016c8 <SPI_Init>
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200259a0 	.word	0x200259a0

08001790 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	@ 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001798:	2300      	movs	r3, #0
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <SPI_MspInit+0x6c>)
 800179e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a0:	4a16      	ldr	r2, [pc, #88]	@ (80017fc <SPI_MspInit+0x6c>)
 80017a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80017a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80017a8:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <SPI_MspInit+0x6c>)
 80017aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <SPI_MspInit+0x6c>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017bc:	4a0f      	ldr	r2, [pc, #60]	@ (80017fc <SPI_MspInit+0x6c>)
 80017be:	f043 0320 	orr.w	r3, r3, #32
 80017c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c4:	4b0d      	ldr	r3, [pc, #52]	@ (80017fc <SPI_MspInit+0x6c>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c8:	f003 0320 	and.w	r3, r3, #32
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80017d0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80017d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80017da:	2302      	movs	r3, #2
 80017dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80017de:	2301      	movs	r3, #1
 80017e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80017e2:	2305      	movs	r3, #5
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	4804      	ldr	r0, [pc, #16]	@ (8001800 <SPI_MspInit+0x70>)
 80017ee:	f002 f971 	bl	8003ad4 <HAL_GPIO_Init>
}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	@ 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40021400 	.word	0x40021400

08001804 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800180a:	4b36      	ldr	r3, [pc, #216]	@ (80018e4 <LCD_IO_Init+0xe0>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d164      	bne.n	80018dc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001812:	4b34      	ldr	r3, [pc, #208]	@ (80018e4 <LCD_IO_Init+0xe0>)
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	4b32      	ldr	r3, [pc, #200]	@ (80018e8 <LCD_IO_Init+0xe4>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001820:	4a31      	ldr	r2, [pc, #196]	@ (80018e8 <LCD_IO_Init+0xe4>)
 8001822:	f043 0308 	orr.w	r3, r3, #8
 8001826:	6313      	str	r3, [r2, #48]	@ 0x30
 8001828:	4b2f      	ldr	r3, [pc, #188]	@ (80018e8 <LCD_IO_Init+0xe4>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001834:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001838:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001842:	2302      	movs	r3, #2
 8001844:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	4619      	mov	r1, r3
 800184c:	4827      	ldr	r0, [pc, #156]	@ (80018ec <LCD_IO_Init+0xe8>)
 800184e:	f002 f941 	bl	8003ad4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4b24      	ldr	r3, [pc, #144]	@ (80018e8 <LCD_IO_Init+0xe4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a23      	ldr	r2, [pc, #140]	@ (80018e8 <LCD_IO_Init+0xe4>)
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <LCD_IO_Init+0xe4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800186e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001872:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800187c:	2302      	movs	r3, #2
 800187e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	4619      	mov	r1, r3
 8001886:	4819      	ldr	r0, [pc, #100]	@ (80018ec <LCD_IO_Init+0xe8>)
 8001888:	f002 f924 	bl	8003ad4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800188c:	2300      	movs	r3, #0
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <LCD_IO_Init+0xe4>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001894:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <LCD_IO_Init+0xe4>)
 8001896:	f043 0304 	orr.w	r3, r3, #4
 800189a:	6313      	str	r3, [r2, #48]	@ 0x30
 800189c:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <LCD_IO_Init+0xe4>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80018a8:	2304      	movs	r3, #4
 80018aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80018ac:	2301      	movs	r3, #1
 80018ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80018b4:	2302      	movs	r3, #2
 80018b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	4619      	mov	r1, r3
 80018be:	480c      	ldr	r0, [pc, #48]	@ (80018f0 <LCD_IO_Init+0xec>)
 80018c0:	f002 f908 	bl	8003ad4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80018c4:	2200      	movs	r2, #0
 80018c6:	2104      	movs	r1, #4
 80018c8:	4809      	ldr	r0, [pc, #36]	@ (80018f0 <LCD_IO_Init+0xec>)
 80018ca:	f002 fbd3 	bl	8004074 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80018ce:	2201      	movs	r2, #1
 80018d0:	2104      	movs	r1, #4
 80018d2:	4807      	ldr	r0, [pc, #28]	@ (80018f0 <LCD_IO_Init+0xec>)
 80018d4:	f002 fbce 	bl	8004074 <HAL_GPIO_WritePin>

    SPI_Init();
 80018d8:	f7ff fef6 	bl	80016c8 <SPI_Init>
  }
}
 80018dc:	bf00      	nop
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200259f8 	.word	0x200259f8
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020c00 	.word	0x40020c00
 80018f0:	40020800 	.word	0x40020800

080018f4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80018fe:	2201      	movs	r2, #1
 8001900:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001904:	480a      	ldr	r0, [pc, #40]	@ (8001930 <LCD_IO_WriteData+0x3c>)
 8001906:	f002 fbb5 	bl	8004074 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800190a:	2200      	movs	r2, #0
 800190c:	2104      	movs	r1, #4
 800190e:	4809      	ldr	r0, [pc, #36]	@ (8001934 <LCD_IO_WriteData+0x40>)
 8001910:	f002 fbb0 	bl	8004074 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff10 	bl	800173c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800191c:	2201      	movs	r2, #1
 800191e:	2104      	movs	r1, #4
 8001920:	4804      	ldr	r0, [pc, #16]	@ (8001934 <LCD_IO_WriteData+0x40>)
 8001922:	f002 fba7 	bl	8004074 <HAL_GPIO_WritePin>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40020c00 	.word	0x40020c00
 8001934:	40020800 	.word	0x40020800

08001938 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001948:	480a      	ldr	r0, [pc, #40]	@ (8001974 <LCD_IO_WriteReg+0x3c>)
 800194a:	f002 fb93 	bl	8004074 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800194e:	2200      	movs	r2, #0
 8001950:	2104      	movs	r1, #4
 8001952:	4809      	ldr	r0, [pc, #36]	@ (8001978 <LCD_IO_WriteReg+0x40>)
 8001954:	f002 fb8e 	bl	8004074 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	b29b      	uxth	r3, r3
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff feed 	bl	800173c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001962:	2201      	movs	r2, #1
 8001964:	2104      	movs	r1, #4
 8001966:	4804      	ldr	r0, [pc, #16]	@ (8001978 <LCD_IO_WriteReg+0x40>)
 8001968:	f002 fb84 	bl	8004074 <HAL_GPIO_WritePin>
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40020c00 	.word	0x40020c00
 8001978:	40020800 	.word	0x40020800

0800197c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f001 ff6f 	bl	8003868 <HAL_Delay>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001996:	f001 fef5 	bl	8003784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199a:	f000 f815 	bl	80019c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199e:	f000 fa05 	bl	8001dac <MX_GPIO_Init>
  MX_LTDC_Init();
 80019a2:	f000 f8bb 	bl	8001b1c <MX_LTDC_Init>
  MX_RNG_Init();
 80019a6:	f000 f96b 	bl	8001c80 <MX_RNG_Init>
  MX_TIM2_Init();
 80019aa:	f000 f9b3 	bl	8001d14 <MX_TIM2_Init>
  MX_SPI5_Init();
 80019ae:	f000 f97b 	bl	8001ca8 <MX_SPI5_Init>
  MX_I2C3_Init();
 80019b2:	f000 f873 	bl	8001a9c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 80019b6:	f7fe fe01 	bl	80005bc <ApplicationInit>
  HAL_Delay(50);
 80019ba:	2032      	movs	r0, #50	@ 0x32
 80019bc:	f001 ff54 	bl	8003868 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Game_Init();
 80019c0:	f7ff f986 	bl	8000cd0 <Game_Init>
 80019c4:	e7fc      	b.n	80019c0 <main+0x2e>
	...

080019c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b094      	sub	sp, #80	@ 0x50
 80019cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ce:	f107 0320 	add.w	r3, r7, #32
 80019d2:	2230      	movs	r2, #48	@ 0x30
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f005 fb62 	bl	80070a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	4b28      	ldr	r3, [pc, #160]	@ (8001a94 <SystemClock_Config+0xcc>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f4:	4a27      	ldr	r2, [pc, #156]	@ (8001a94 <SystemClock_Config+0xcc>)
 80019f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fc:	4b25      	ldr	r3, [pc, #148]	@ (8001a94 <SystemClock_Config+0xcc>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a08:	2300      	movs	r3, #0
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	4b22      	ldr	r3, [pc, #136]	@ (8001a98 <SystemClock_Config+0xd0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a21      	ldr	r2, [pc, #132]	@ (8001a98 <SystemClock_Config+0xd0>)
 8001a12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b1f      	ldr	r3, [pc, #124]	@ (8001a98 <SystemClock_Config+0xd0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a24:	2301      	movs	r3, #1
 8001a26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a32:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a38:	2308      	movs	r3, #8
 8001a3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a3c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001a40:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a42:	2302      	movs	r3, #2
 8001a44:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a46:	2307      	movs	r3, #7
 8001a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4a:	f107 0320 	add.w	r3, r7, #32
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 fe88 	bl	8005764 <HAL_RCC_OscConfig>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a5a:	f000 fb55 	bl	8002108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a5e:	230f      	movs	r3, #15
 8001a60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a62:	2302      	movs	r3, #2
 8001a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a6a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	2105      	movs	r1, #5
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f004 f8e9 	bl	8005c54 <HAL_RCC_ClockConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a88:	f000 fb3e 	bl	8002108 <Error_Handler>
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	3750      	adds	r7, #80	@ 0x50
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40007000 	.word	0x40007000

08001a9c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <MX_I2C3_Init+0x74>)
 8001aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b14 <MX_I2C3_Init+0x78>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b10 <MX_I2C3_Init+0x74>)
 8001aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b18 <MX_I2C3_Init+0x7c>)
 8001aaa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aac:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <MX_I2C3_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001ab2:	4b17      	ldr	r3, [pc, #92]	@ (8001b10 <MX_I2C3_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab8:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <MX_I2C3_Init+0x74>)
 8001aba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001abe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac0:	4b13      	ldr	r3, [pc, #76]	@ (8001b10 <MX_I2C3_Init+0x74>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001ac6:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <MX_I2C3_Init+0x74>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001acc:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <MX_I2C3_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <MX_I2C3_Init+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ad8:	480d      	ldr	r0, [pc, #52]	@ (8001b10 <MX_I2C3_Init+0x74>)
 8001ada:	f002 fafd 	bl	80040d8 <HAL_I2C_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ae4:	f000 fb10 	bl	8002108 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4809      	ldr	r0, [pc, #36]	@ (8001b10 <MX_I2C3_Init+0x74>)
 8001aec:	f003 fb18 	bl	8005120 <HAL_I2CEx_ConfigAnalogFilter>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001af6:	f000 fb07 	bl	8002108 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001afa:	2100      	movs	r1, #0
 8001afc:	4804      	ldr	r0, [pc, #16]	@ (8001b10 <MX_I2C3_Init+0x74>)
 8001afe:	f003 fb4b 	bl	8005198 <HAL_I2CEx_ConfigDigitalFilter>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001b08:	f000 fafe 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20025a0c 	.word	0x20025a0c
 8001b14:	40005c00 	.word	0x40005c00
 8001b18:	000186a0 	.word	0x000186a0

08001b1c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b09a      	sub	sp, #104	@ 0x68
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001b22:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b26:	2234      	movs	r2, #52	@ 0x34
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f005 fab8 	bl	80070a0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001b30:	463b      	mov	r3, r7
 8001b32:	2234      	movs	r2, #52	@ 0x34
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f005 fab2 	bl	80070a0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001b3c:	4b4e      	ldr	r3, [pc, #312]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001b3e:	4a4f      	ldr	r2, [pc, #316]	@ (8001c7c <MX_LTDC_Init+0x160>)
 8001b40:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b42:	4b4d      	ldr	r3, [pc, #308]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b48:	4b4b      	ldr	r3, [pc, #300]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b54:	4b48      	ldr	r3, [pc, #288]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001b5a:	4b47      	ldr	r3, [pc, #284]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001b60:	4b45      	ldr	r3, [pc, #276]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001b62:	2203      	movs	r2, #3
 8001b64:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001b66:	4b44      	ldr	r3, [pc, #272]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001b68:	220e      	movs	r2, #14
 8001b6a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001b6c:	4b42      	ldr	r3, [pc, #264]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001b6e:	2205      	movs	r2, #5
 8001b70:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001b72:	4b41      	ldr	r3, [pc, #260]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001b74:	f240 228e 	movw	r2, #654	@ 0x28e
 8001b78:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001b7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001b7c:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001b80:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001b82:	4b3d      	ldr	r3, [pc, #244]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001b84:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001b88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001b8c:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001b90:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001b92:	4b39      	ldr	r3, [pc, #228]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001b9a:	4b37      	ldr	r3, [pc, #220]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001ba2:	4b35      	ldr	r3, [pc, #212]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001baa:	4833      	ldr	r0, [pc, #204]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001bac:	f003 fb34 	bl	8005218 <HAL_LTDC_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001bb6:	f000 faa7 	bl	8002108 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001bd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bda:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001bdc:	2305      	movs	r3, #5
 8001bde:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001bfe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c02:	2200      	movs	r2, #0
 8001c04:	4619      	mov	r1, r3
 8001c06:	481c      	ldr	r0, [pc, #112]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001c08:	f003 fbd6 	bl	80053b8 <HAL_LTDC_ConfigLayer>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001c12:	f000 fa79 	bl	8002108 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c36:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001c38:	2305      	movs	r3, #5
 8001c3a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	@ (8001c78 <MX_LTDC_Init+0x15c>)
 8001c62:	f003 fba9 	bl	80053b8 <HAL_LTDC_ConfigLayer>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001c6c:	f000 fa4c 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	3768      	adds	r7, #104	@ 0x68
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20025a60 	.word	0x20025a60
 8001c7c:	40016800 	.word	0x40016800

08001c80 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001c84:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <MX_RNG_Init+0x20>)
 8001c86:	4a07      	ldr	r2, [pc, #28]	@ (8001ca4 <MX_RNG_Init+0x24>)
 8001c88:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001c8a:	4805      	ldr	r0, [pc, #20]	@ (8001ca0 <MX_RNG_Init+0x20>)
 8001c8c:	f004 fbae 	bl	80063ec <HAL_RNG_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001c96:	f000 fa37 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200259fc 	.word	0x200259fc
 8001ca4:	50060800 	.word	0x50060800

08001ca8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001cac:	4b17      	ldr	r3, [pc, #92]	@ (8001d0c <MX_SPI5_Init+0x64>)
 8001cae:	4a18      	ldr	r2, [pc, #96]	@ (8001d10 <MX_SPI5_Init+0x68>)
 8001cb0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001cb2:	4b16      	ldr	r3, [pc, #88]	@ (8001d0c <MX_SPI5_Init+0x64>)
 8001cb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cb8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001cba:	4b14      	ldr	r3, [pc, #80]	@ (8001d0c <MX_SPI5_Init+0x64>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc0:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <MX_SPI5_Init+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <MX_SPI5_Init+0x64>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <MX_SPI5_Init+0x64>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <MX_SPI5_Init+0x64>)
 8001cd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cd8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cda:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <MX_SPI5_Init+0x64>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <MX_SPI5_Init+0x64>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <MX_SPI5_Init+0x64>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cec:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <MX_SPI5_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001cf2:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <MX_SPI5_Init+0x64>)
 8001cf4:	220a      	movs	r2, #10
 8001cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001cf8:	4804      	ldr	r0, [pc, #16]	@ (8001d0c <MX_SPI5_Init+0x64>)
 8001cfa:	f004 fbf7 	bl	80064ec <HAL_SPI_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001d04:	f000 fa00 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20025b08 	.word	0x20025b08
 8001d10:	40015000 	.word	0x40015000

08001d14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d30:	4b1d      	ldr	r3, [pc, #116]	@ (8001da8 <MX_TIM2_Init+0x94>)
 8001d32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	@ (8001da8 <MX_TIM2_Init+0x94>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <MX_TIM2_Init+0x94>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d44:	4b18      	ldr	r3, [pc, #96]	@ (8001da8 <MX_TIM2_Init+0x94>)
 8001d46:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4c:	4b16      	ldr	r3, [pc, #88]	@ (8001da8 <MX_TIM2_Init+0x94>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <MX_TIM2_Init+0x94>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d58:	4813      	ldr	r0, [pc, #76]	@ (8001da8 <MX_TIM2_Init+0x94>)
 8001d5a:	f004 fea7 	bl	8006aac <HAL_TIM_Base_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d64:	f000 f9d0 	bl	8002108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d6e:	f107 0308 	add.w	r3, r7, #8
 8001d72:	4619      	mov	r1, r3
 8001d74:	480c      	ldr	r0, [pc, #48]	@ (8001da8 <MX_TIM2_Init+0x94>)
 8001d76:	f004 fee8 	bl	8006b4a <HAL_TIM_ConfigClockSource>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d80:	f000 f9c2 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4805      	ldr	r0, [pc, #20]	@ (8001da8 <MX_TIM2_Init+0x94>)
 8001d92:	f005 f8e7 	bl	8006f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d9c:	f000 f9b4 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20025b60 	.word	0x20025b60

08001dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08e      	sub	sp, #56	@ 0x38
 8001db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
 8001dc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
 8001dc6:	4bb2      	ldr	r3, [pc, #712]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	4ab1      	ldr	r2, [pc, #708]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd2:	4baf      	ldr	r3, [pc, #700]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	623b      	str	r3, [r7, #32]
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	4bab      	ldr	r3, [pc, #684]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	4aaa      	ldr	r2, [pc, #680]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001de8:	f043 0320 	orr.w	r3, r3, #32
 8001dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dee:	4ba8      	ldr	r3, [pc, #672]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	f003 0320 	and.w	r3, r3, #32
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
 8001dfe:	4ba4      	ldr	r3, [pc, #656]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	4aa3      	ldr	r2, [pc, #652]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0a:	4ba1      	ldr	r3, [pc, #644]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	4b9d      	ldr	r3, [pc, #628]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	4a9c      	ldr	r2, [pc, #624]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e26:	4b9a      	ldr	r3, [pc, #616]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	4b96      	ldr	r3, [pc, #600]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	4a95      	ldr	r2, [pc, #596]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e42:	4b93      	ldr	r3, [pc, #588]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b8f      	ldr	r3, [pc, #572]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	4a8e      	ldr	r2, [pc, #568]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5e:	4b8c      	ldr	r3, [pc, #560]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	4b88      	ldr	r3, [pc, #544]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	4a87      	ldr	r2, [pc, #540]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e74:	f043 0310 	orr.w	r3, r3, #16
 8001e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7a:	4b85      	ldr	r3, [pc, #532]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	4b81      	ldr	r3, [pc, #516]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	4a80      	ldr	r2, [pc, #512]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e90:	f043 0308 	orr.w	r3, r3, #8
 8001e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e96:	4b7e      	ldr	r3, [pc, #504]	@ (8002090 <MX_GPIO_Init+0x2e4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2116      	movs	r1, #22
 8001ea6:	487b      	ldr	r0, [pc, #492]	@ (8002094 <MX_GPIO_Init+0x2e8>)
 8001ea8:	f002 f8e4 	bl	8004074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2180      	movs	r1, #128	@ 0x80
 8001eb0:	4879      	ldr	r0, [pc, #484]	@ (8002098 <MX_GPIO_Init+0x2ec>)
 8001eb2:	f002 f8df 	bl	8004074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001ebc:	4877      	ldr	r0, [pc, #476]	@ (800209c <MX_GPIO_Init+0x2f0>)
 8001ebe:	f002 f8d9 	bl	8004074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001ec8:	4875      	ldr	r0, [pc, #468]	@ (80020a0 <MX_GPIO_Init+0x2f4>)
 8001eca:	f002 f8d3 	bl	8004074 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001ece:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ee0:	230c      	movs	r3, #12
 8001ee2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ee4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee8:	4619      	mov	r1, r3
 8001eea:	486e      	ldr	r0, [pc, #440]	@ (80020a4 <MX_GPIO_Init+0x2f8>)
 8001eec:	f001 fdf2 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efc:	2303      	movs	r3, #3
 8001efe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f00:	230c      	movs	r3, #12
 8001f02:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4862      	ldr	r0, [pc, #392]	@ (8002094 <MX_GPIO_Init+0x2e8>)
 8001f0c:	f001 fde2 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001f10:	2316      	movs	r3, #22
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f14:	2301      	movs	r3, #1
 8001f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f24:	4619      	mov	r1, r3
 8001f26:	485b      	ldr	r0, [pc, #364]	@ (8002094 <MX_GPIO_Init+0x2e8>)
 8001f28:	f001 fdd4 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001f2c:	f248 0306 	movw	r3, #32774	@ 0x8006
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f32:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f40:	4619      	mov	r1, r3
 8001f42:	4855      	ldr	r0, [pc, #340]	@ (8002098 <MX_GPIO_Init+0x2ec>)
 8001f44:	f001 fdc6 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f54:	2300      	movs	r3, #0
 8001f56:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	484e      	ldr	r0, [pc, #312]	@ (8002098 <MX_GPIO_Init+0x2ec>)
 8001f60:	f001 fdb8 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001f64:	2320      	movs	r3, #32
 8001f66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f68:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001f72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f76:	4619      	mov	r1, r3
 8001f78:	4846      	ldr	r0, [pc, #280]	@ (8002094 <MX_GPIO_Init+0x2e8>)
 8001f7a:	f001 fdab 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001f8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4845      	ldr	r0, [pc, #276]	@ (80020a8 <MX_GPIO_Init+0x2fc>)
 8001f92:	f001 fd9f 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001f96:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fa8:	230c      	movs	r3, #12
 8001faa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	483b      	ldr	r0, [pc, #236]	@ (80020a0 <MX_GPIO_Init+0x2f4>)
 8001fb4:	f001 fd8e 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001fb8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001fbc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fca:	230c      	movs	r3, #12
 8001fcc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4835      	ldr	r0, [pc, #212]	@ (80020ac <MX_GPIO_Init+0x300>)
 8001fd6:	f001 fd7d 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001fda:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001fec:	230c      	movs	r3, #12
 8001fee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	482c      	ldr	r0, [pc, #176]	@ (80020a8 <MX_GPIO_Init+0x2fc>)
 8001ff8:	f001 fd6c 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001ffc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002002:	2300      	movs	r3, #0
 8002004:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800200a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800200e:	4619      	mov	r1, r3
 8002010:	4825      	ldr	r0, [pc, #148]	@ (80020a8 <MX_GPIO_Init+0x2fc>)
 8002012:	f001 fd5f 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002016:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002028:	230c      	movs	r3, #12
 800202a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800202c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002030:	4619      	mov	r1, r3
 8002032:	481a      	ldr	r0, [pc, #104]	@ (800209c <MX_GPIO_Init+0x2f0>)
 8002034:	f001 fd4e 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002038:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800203e:	2300      	movs	r3, #0
 8002040:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002046:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800204a:	4619      	mov	r1, r3
 800204c:	4813      	ldr	r0, [pc, #76]	@ (800209c <MX_GPIO_Init+0x2f0>)
 800204e:	f001 fd41 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002052:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002058:	2301      	movs	r3, #1
 800205a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002068:	4619      	mov	r1, r3
 800206a:	480c      	ldr	r0, [pc, #48]	@ (800209c <MX_GPIO_Init+0x2f0>)
 800206c:	f001 fd32 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002070:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207e:	2303      	movs	r3, #3
 8002080:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002082:	2307      	movs	r3, #7
 8002084:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800208a:	4619      	mov	r1, r3
 800208c:	e010      	b.n	80020b0 <MX_GPIO_Init+0x304>
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800
 8002094:	40020800 	.word	0x40020800
 8002098:	40020000 	.word	0x40020000
 800209c:	40020c00 	.word	0x40020c00
 80020a0:	40021800 	.word	0x40021800
 80020a4:	40021400 	.word	0x40021400
 80020a8:	40020400 	.word	0x40020400
 80020ac:	40021000 	.word	0x40021000
 80020b0:	4812      	ldr	r0, [pc, #72]	@ (80020fc <MX_GPIO_Init+0x350>)
 80020b2:	f001 fd0f 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80020b6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020bc:	2301      	movs	r3, #1
 80020be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020cc:	4619      	mov	r1, r3
 80020ce:	480c      	ldr	r0, [pc, #48]	@ (8002100 <MX_GPIO_Init+0x354>)
 80020d0:	f001 fd00 	bl	8003ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80020d4:	2360      	movs	r3, #96	@ 0x60
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020e4:	230c      	movs	r3, #12
 80020e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ec:	4619      	mov	r1, r3
 80020ee:	4805      	ldr	r0, [pc, #20]	@ (8002104 <MX_GPIO_Init+0x358>)
 80020f0:	f001 fcf0 	bl	8003ad4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020f4:	bf00      	nop
 80020f6:	3738      	adds	r7, #56	@ 0x38
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40020000 	.word	0x40020000
 8002100:	40021800 	.word	0x40021800
 8002104:	40020400 	.word	0x40020400

08002108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800210c:	b672      	cpsid	i
}
 800210e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <Error_Handler+0x8>

08002114 <StartScreen>:
#define CELL_SPACING 4 // Smaller = more compact grid
#define ANCHOR_X 75    // Right edge base X
#define ANCHOR_Y 100   // Top edge base Y

void StartScreen(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_BLACK);
 800211a:	2100      	movs	r1, #0
 800211c:	2000      	movs	r0, #0
 800211e:	f7fe fcaf 	bl	8000a80 <LCD_Clear>
    LCD_SetTextColor(LCD_COLOR_YELLOW);
 8002122:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8002126:	f7fe fccd 	bl	8000ac4 <LCD_SetTextColor>

    // Title background
    for (int y = 60; y < 260; y++)
 800212a:	233c      	movs	r3, #60	@ 0x3c
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	e014      	b.n	800215a <StartScreen+0x46>
    {
        for (int x = 5; x < 45; x++)
 8002130:	2305      	movs	r3, #5
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	e00b      	b.n	800214e <StartScreen+0x3a>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_RED);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	b29b      	uxth	r3, r3
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	b291      	uxth	r1, r2
 800213e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fc08 	bl	8000958 <LCD_Draw_Pixel>
        for (int x = 5; x < 45; x++)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	3301      	adds	r3, #1
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2b2c      	cmp	r3, #44	@ 0x2c
 8002152:	ddf0      	ble.n	8002136 <StartScreen+0x22>
    for (int y = 60; y < 260; y++)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	3301      	adds	r3, #1
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002160:	dbe6      	blt.n	8002130 <StartScreen+0x1c>
        }
    }

    LCD_SetTextColor(LCD_COLOR_BLACK);
 8002162:	2000      	movs	r0, #0
 8002164:	f7fe fcae 	bl	8000ac4 <LCD_SetTextColor>

    // 1P button
    for (int y = 90; y < 230; y++)
 8002168:	235a      	movs	r3, #90	@ 0x5a
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	e014      	b.n	8002198 <StartScreen+0x84>
    {
        for (int x = 60; x < 100; x++)
 800216e:	233c      	movs	r3, #60	@ 0x3c
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	e00b      	b.n	800218c <StartScreen+0x78>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_YELLOW);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	b29b      	uxth	r3, r3
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	b291      	uxth	r1, r2
 800217c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fbe9 	bl	8000958 <LCD_Draw_Pixel>
        for (int x = 60; x < 100; x++)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	3301      	adds	r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b63      	cmp	r3, #99	@ 0x63
 8002190:	ddf0      	ble.n	8002174 <StartScreen+0x60>
    for (int y = 90; y < 230; y++)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3301      	adds	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2be5      	cmp	r3, #229	@ 0xe5
 800219c:	dde7      	ble.n	800216e <StartScreen+0x5a>
        }
    }

    // 2P button
    for (int y = 90; y < 230; y++)
 800219e:	235a      	movs	r3, #90	@ 0x5a
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	e014      	b.n	80021ce <StartScreen+0xba>
    {
        for (int x = 120; x < 160; x++)
 80021a4:	2378      	movs	r3, #120	@ 0x78
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	e00b      	b.n	80021c2 <StartScreen+0xae>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_RED);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	b291      	uxth	r1, r2
 80021b2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fbce 	bl	8000958 <LCD_Draw_Pixel>
        for (int x = 120; x < 160; x++)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	3301      	adds	r3, #1
 80021c0:	603b      	str	r3, [r7, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b9f      	cmp	r3, #159	@ 0x9f
 80021c6:	ddf0      	ble.n	80021aa <StartScreen+0x96>
    for (int y = 90; y < 230; y++)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3301      	adds	r3, #1
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2be5      	cmp	r3, #229	@ 0xe5
 80021d2:	dde7      	ble.n	80021a4 <StartScreen+0x90>
        }
    }

    LCD_DisplayString(70, 15, (uint8_t *)"CONNECT FOUR", CENTER_MODE);
 80021d4:	2301      	movs	r3, #1
 80021d6:	4a10      	ldr	r2, [pc, #64]	@ (8002218 <StartScreen+0x104>)
 80021d8:	210f      	movs	r1, #15
 80021da:	2046      	movs	r0, #70	@ 0x46
 80021dc:	f7fe fd06 	bl	8000bec <LCD_DisplayString>
    LCD_DisplayString(100, 70, (uint8_t *)"1 PLAYER", CENTER_MODE);
 80021e0:	2301      	movs	r3, #1
 80021e2:	4a0e      	ldr	r2, [pc, #56]	@ (800221c <StartScreen+0x108>)
 80021e4:	2146      	movs	r1, #70	@ 0x46
 80021e6:	2064      	movs	r0, #100	@ 0x64
 80021e8:	f7fe fd00 	bl	8000bec <LCD_DisplayString>
    LCD_DisplayString(100, 130, (uint8_t *)"2 PLAYER", CENTER_MODE);
 80021ec:	2301      	movs	r3, #1
 80021ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002220 <StartScreen+0x10c>)
 80021f0:	2182      	movs	r1, #130	@ 0x82
 80021f2:	2064      	movs	r0, #100	@ 0x64
 80021f4:	f7fe fcfa 	bl	8000bec <LCD_DisplayString>
    LCD_SetTextColor(LCD_COLOR_WHITE);
 80021f8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80021fc:	f7fe fc62 	bl	8000ac4 <LCD_SetTextColor>
    LCD_DisplayString(5, 215, (uint8_t *)"Brandon Schuster", LEFT_MODE);
 8002200:	2300      	movs	r3, #0
 8002202:	4a08      	ldr	r2, [pc, #32]	@ (8002224 <StartScreen+0x110>)
 8002204:	21d7      	movs	r1, #215	@ 0xd7
 8002206:	2005      	movs	r0, #5
 8002208:	f7fe fcf0 	bl	8000bec <LCD_DisplayString>
    DrawDebugBug(); // My attempt at a debug icon
 800220c:	f000 fb7a 	bl	8002904 <DrawDebugBug>
}
 8002210:	bf00      	nop
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	080079b4 	.word	0x080079b4
 800221c:	080079c4 	.word	0x080079c4
 8002220:	080079d0 	.word	0x080079d0
 8002224:	080079dc 	.word	0x080079dc

08002228 <GameScreen>:

void GameScreen(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
    // Blue board
    for (int y = 50; y < 265; y++)
 800222e:	2332      	movs	r3, #50	@ 0x32
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	e014      	b.n	800225e <GameScreen+0x36>
    {
        for (int x = 55; x < 240; x++)
 8002234:	2337      	movs	r3, #55	@ 0x37
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	e00b      	b.n	8002252 <GameScreen+0x2a>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_BLUE2);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	b29b      	uxth	r3, r3
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	b291      	uxth	r1, r2
 8002242:	f240 521f 	movw	r2, #1311	@ 0x51f
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fb86 	bl	8000958 <LCD_Draw_Pixel>
        for (int x = 55; x < 240; x++)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	3301      	adds	r3, #1
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2bef      	cmp	r3, #239	@ 0xef
 8002256:	ddf0      	ble.n	800223a <GameScreen+0x12>
    for (int y = 50; y < 265; y++)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	3301      	adds	r3, #1
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8002264:	dde6      	ble.n	8002234 <GameScreen+0xc>
        }
    }
    // Slots and pieces placed already
    for (int r = 0; r < ROWS; r++)
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	e032      	b.n	80022d2 <GameScreen+0xaa>
    {
        for (int c = 0; c < COLS; c++)
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	e029      	b.n	80022c6 <GameScreen+0x9e>
        {
            uint16_t color = LCD_COLOR_BLACK;
 8002272:	2300      	movs	r3, #0
 8002274:	80fb      	strh	r3, [r7, #6]

            if (board[r][c] == RED)
 8002276:	491b      	ldr	r1, [pc, #108]	@ (80022e4 <GameScreen+0xbc>)
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	18ca      	adds	r2, r1, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	4413      	add	r3, r2
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d103      	bne.n	8002294 <GameScreen+0x6c>
                color = LCD_COLOR_RED;
 800228c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002290:	80fb      	strh	r3, [r7, #6]
 8002292:	e00d      	b.n	80022b0 <GameScreen+0x88>
            else if (board[r][c] == YELLOW)
 8002294:	4913      	ldr	r1, [pc, #76]	@ (80022e4 <GameScreen+0xbc>)
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	18ca      	adds	r2, r1, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4413      	add	r3, r2
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d102      	bne.n	80022b0 <GameScreen+0x88>
                color = LCD_COLOR_YELLOW;
 80022aa:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80022ae:	80fb      	strh	r3, [r7, #6]

            DrawCircleAtCell(r, COLS - 1 - c, color);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f1c3 0306 	rsb	r3, r3, #6
 80022b6:	88fa      	ldrh	r2, [r7, #6]
 80022b8:	4619      	mov	r1, r3
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f814 	bl	80022e8 <DrawCircleAtCell>
        for (int c = 0; c < COLS; c++)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	3301      	adds	r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b06      	cmp	r3, #6
 80022ca:	ddd2      	ble.n	8002272 <GameScreen+0x4a>
    for (int r = 0; r < ROWS; r++)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3301      	adds	r3, #1
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	ddc9      	ble.n	800226c <GameScreen+0x44>
        }
    }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20025974 	.word	0x20025974

080022e8 <DrawCircleAtCell>:

void DrawCircleAtCell(int col, int row, uint16_t color)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	4613      	mov	r3, r2
 80022f4:	80fb      	strh	r3, [r7, #6]
    int x = ANCHOR_X + col * CELL_SIZE;              // Move left per column
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	334b      	adds	r3, #75	@ 0x4b
 8002302:	617b      	str	r3, [r7, #20]
    int y = ANCHOR_Y + (ROWS - 1 - row) * CELL_SIZE; // Move down per row
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f1c3 0205 	rsb	r2, r3, #5
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	3364      	adds	r3, #100	@ 0x64
 8002314:	613b      	str	r3, [r7, #16]
    LCD_Draw_Circle_Fill(x, y, CELL_RADIUS, color);
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	b298      	uxth	r0, r3
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	b299      	uxth	r1, r3
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	220c      	movs	r2, #12
 8002322:	f7fe fb59 	bl	80009d8 <LCD_Draw_Circle_Fill>
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <DrawToken>:

void DrawToken(int row, int col, uint8_t player)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	4613      	mov	r3, r2
 800233a:	71fb      	strb	r3, [r7, #7]
    uint16_t color = LCD_COLOR_WHITE;
 800233c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002340:	82fb      	strh	r3, [r7, #22]

    if (player == RED)
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d103      	bne.n	8002350 <DrawToken+0x22>
    {
        color = LCD_COLOR_RED;
 8002348:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800234c:	82fb      	strh	r3, [r7, #22]
 800234e:	e005      	b.n	800235c <DrawToken+0x2e>
    }
    else if (player == YELLOW)
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d102      	bne.n	800235c <DrawToken+0x2e>
    {
        color = LCD_COLOR_YELLOW;
 8002356:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800235a:	82fb      	strh	r3, [r7, #22]
    }

    DrawCircleAtCell(row, col, color);
 800235c:	8afb      	ldrh	r3, [r7, #22]
 800235e:	461a      	mov	r2, r3
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f7ff ffc0 	bl	80022e8 <DrawCircleAtCell>
}
 8002368:	bf00      	nop
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <DrawCursor>:

void DrawCursor(int currentCol, uint8_t currentPlayer)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	70fb      	strb	r3, [r7, #3]
    uint16_t color = (currentPlayer == RED) ? LCD_COLOR_RED : LCD_COLOR_YELLOW;
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d102      	bne.n	8002388 <DrawCursor+0x18>
 8002382:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002386:	e001      	b.n	800238c <DrawCursor+0x1c>
 8002388:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800238c:	82fb      	strh	r3, [r7, #22]

    // Draw hovering above +2 rows
    int row = ROWS + 2;
 800238e:	2308      	movs	r3, #8
 8002390:	613b      	str	r3, [r7, #16]

    int drawRow = currentCol;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	60fb      	str	r3, [r7, #12]
    int drawCol = COLS - 1 - row;
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f1c3 0306 	rsb	r3, r3, #6
 800239c:	60bb      	str	r3, [r7, #8]

    DrawCircleAtCell(drawCol, drawRow, color);
 800239e:	8afb      	ldrh	r3, [r7, #22]
 80023a0:	461a      	mov	r2, r3
 80023a2:	68f9      	ldr	r1, [r7, #12]
 80023a4:	68b8      	ldr	r0, [r7, #8]
 80023a6:	f7ff ff9f 	bl	80022e8 <DrawCircleAtCell>
}
 80023aa:	bf00      	nop
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <EraseCursor>:

void EraseCursor(int col)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
    int offset = -2;
 80023ba:	f06f 0301 	mvn.w	r3, #1
 80023be:	60fb      	str	r3, [r7, #12]
    DrawCircleAtCell(offset, col, LCD_COLOR_BLACK);
 80023c0:	2200      	movs	r2, #0
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f7ff ff8f 	bl	80022e8 <DrawCircleAtCell>
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <EndScreen>:

void EndScreen(uint8_t winner, uint32_t duration_ms, int redWins, int yellowWins)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b09c      	sub	sp, #112	@ 0x70
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	4603      	mov	r3, r0
 80023e2:	73fb      	strb	r3, [r7, #15]
    LCD_Clear(0, LCD_COLOR_BLACK);
 80023e4:	2100      	movs	r1, #0
 80023e6:	2000      	movs	r0, #0
 80023e8:	f7fe fb4a 	bl	8000a80 <LCD_Clear>
    LCD_SetTextColor(LCD_COLOR_WHITE);
 80023ec:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80023f0:	f7fe fb68 	bl	8000ac4 <LCD_SetTextColor>

    // Draw winner message
    if (winner == RED)
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d106      	bne.n	8002408 <EndScreen+0x34>
    {
        LCD_DisplayString(50, 20, (uint8_t *)"Red Wins!", LEFT_MODE);
 80023fa:	2300      	movs	r3, #0
 80023fc:	4a5c      	ldr	r2, [pc, #368]	@ (8002570 <EndScreen+0x19c>)
 80023fe:	2114      	movs	r1, #20
 8002400:	2032      	movs	r0, #50	@ 0x32
 8002402:	f7fe fbf3 	bl	8000bec <LCD_DisplayString>
 8002406:	e00f      	b.n	8002428 <EndScreen+0x54>
    }
    else if (winner == YELLOW)
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d106      	bne.n	800241c <EndScreen+0x48>
    {
        LCD_DisplayString(50, 20, (uint8_t *)"Yellow Wins!", LEFT_MODE);
 800240e:	2300      	movs	r3, #0
 8002410:	4a58      	ldr	r2, [pc, #352]	@ (8002574 <EndScreen+0x1a0>)
 8002412:	2114      	movs	r1, #20
 8002414:	2032      	movs	r0, #50	@ 0x32
 8002416:	f7fe fbe9 	bl	8000bec <LCD_DisplayString>
 800241a:	e005      	b.n	8002428 <EndScreen+0x54>
    }
    else
    {
        LCD_DisplayString(50, 20, (uint8_t *)"It's a Draw!", LEFT_MODE);
 800241c:	2300      	movs	r3, #0
 800241e:	4a56      	ldr	r2, [pc, #344]	@ (8002578 <EndScreen+0x1a4>)
 8002420:	2114      	movs	r1, #20
 8002422:	2032      	movs	r0, #50	@ 0x32
 8002424:	f7fe fbe2 	bl	8000bec <LCD_DisplayString>
    }

    // Draw duration
    char durationMessage[32];
    sprintf(durationMessage, "Time: %lu.%03lus sec", duration_ms / 1000, duration_ms % 1000);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4a54      	ldr	r2, [pc, #336]	@ (800257c <EndScreen+0x1a8>)
 800242c:	fba2 2303 	umull	r2, r3, r2, r3
 8002430:	0999      	lsrs	r1, r3, #6
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	4b51      	ldr	r3, [pc, #324]	@ (800257c <EndScreen+0x1a8>)
 8002436:	fba3 0302 	umull	r0, r3, r3, r2
 800243a:	099b      	lsrs	r3, r3, #6
 800243c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002440:	fb00 f303 	mul.w	r3, r0, r3
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800244a:	460a      	mov	r2, r1
 800244c:	494c      	ldr	r1, [pc, #304]	@ (8002580 <EndScreen+0x1ac>)
 800244e:	f004 fe05 	bl	800705c <siprintf>
    LCD_DisplayString(50, 60, (uint8_t *)durationMessage, LEFT_MODE);
 8002452:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8002456:	2300      	movs	r3, #0
 8002458:	213c      	movs	r1, #60	@ 0x3c
 800245a:	2032      	movs	r0, #50	@ 0x32
 800245c:	f7fe fbc6 	bl	8000bec <LCD_DisplayString>

    // Draw running score
    char scoreMessage[32];
    sprintf(scoreMessage, "Red: %d  Yellow: %d", redWins, yellowWins);
 8002460:	f107 001c 	add.w	r0, r7, #28
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4946      	ldr	r1, [pc, #280]	@ (8002584 <EndScreen+0x1b0>)
 800246a:	f004 fdf7 	bl	800705c <siprintf>
    LCD_DisplayString(50, 100, (uint8_t *)scoreMessage, LEFT_MODE);
 800246e:	f107 021c 	add.w	r2, r7, #28
 8002472:	2300      	movs	r3, #0
 8002474:	2164      	movs	r1, #100	@ 0x64
 8002476:	2032      	movs	r0, #50	@ 0x32
 8002478:	f7fe fbb8 	bl	8000bec <LCD_DisplayString>

    LCD_SetTextColor(LCD_COLOR_BLACK);
 800247c:	2000      	movs	r0, #0
 800247e:	f7fe fb21 	bl	8000ac4 <LCD_SetTextColor>
    // Draw Restart Button manually (green block)
    for (int y = 80; y < 240; y++)
 8002482:	2350      	movs	r3, #80	@ 0x50
 8002484:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002486:	e014      	b.n	80024b2 <EndScreen+0xde>
    {
        for (int x = 140; x < 170; x++)
 8002488:	238c      	movs	r3, #140	@ 0x8c
 800248a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800248c:	e00b      	b.n	80024a6 <EndScreen+0xd2>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_GREEN);
 800248e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002490:	b29b      	uxth	r3, r3
 8002492:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002494:	b291      	uxth	r1, r2
 8002496:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fa5c 	bl	8000958 <LCD_Draw_Pixel>
        for (int x = 140; x < 170; x++)
 80024a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024a2:	3301      	adds	r3, #1
 80024a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024a8:	2ba9      	cmp	r3, #169	@ 0xa9
 80024aa:	ddf0      	ble.n	800248e <EndScreen+0xba>
    for (int y = 80; y < 240; y++)
 80024ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ae:	3301      	adds	r3, #1
 80024b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80024b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024b4:	2bef      	cmp	r3, #239	@ 0xef
 80024b6:	dde7      	ble.n	8002488 <EndScreen+0xb4>
        }
    }
    LCD_DisplayString(85, 145, (uint8_t *)"Play Again", LEFT_MODE);
 80024b8:	2300      	movs	r3, #0
 80024ba:	4a33      	ldr	r2, [pc, #204]	@ (8002588 <EndScreen+0x1b4>)
 80024bc:	2191      	movs	r1, #145	@ 0x91
 80024be:	2055      	movs	r0, #85	@ 0x55
 80024c0:	f7fe fb94 	bl	8000bec <LCD_DisplayString>

    // Draw Exit Button manually (red block)
    for (int y = 80; y < 240; y++)
 80024c4:	2350      	movs	r3, #80	@ 0x50
 80024c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80024c8:	e014      	b.n	80024f4 <EndScreen+0x120>
    {
        for (int x = 190; x < 220; x++)
 80024ca:	23be      	movs	r3, #190	@ 0xbe
 80024cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80024ce:	e00b      	b.n	80024e8 <EndScreen+0x114>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_RED);
 80024d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80024d6:	b291      	uxth	r1, r2
 80024d8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe fa3b 	bl	8000958 <LCD_Draw_Pixel>
        for (int x = 190; x < 220; x++)
 80024e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024e4:	3301      	adds	r3, #1
 80024e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80024e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024ea:	2bdb      	cmp	r3, #219	@ 0xdb
 80024ec:	ddf0      	ble.n	80024d0 <EndScreen+0xfc>
    for (int y = 80; y < 240; y++)
 80024ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024f0:	3301      	adds	r3, #1
 80024f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80024f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024f6:	2bef      	cmp	r3, #239	@ 0xef
 80024f8:	dde7      	ble.n	80024ca <EndScreen+0xf6>
        }
    }
    LCD_DisplayString(95, 195, (uint8_t *)"Main Menu", LEFT_MODE);
 80024fa:	2300      	movs	r3, #0
 80024fc:	4a23      	ldr	r2, [pc, #140]	@ (800258c <EndScreen+0x1b8>)
 80024fe:	21c3      	movs	r1, #195	@ 0xc3
 8002500:	205f      	movs	r0, #95	@ 0x5f
 8002502:	f7fe fb73 	bl	8000bec <LCD_DisplayString>

    while (1)
    {
        STMPE811_TouchData touch;
        touch.orientation = STMPE811_Orientation_Portrait_1;
 8002506:	2300      	movs	r3, #0
 8002508:	76bb      	strb	r3, [r7, #26]

        STMPE811_State_t state = STMPE811_ReadTouch(&touch);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fe2c 	bl	800316c <STMPE811_ReadTouch>
 8002514:	4603      	mov	r3, r0
 8002516:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

        if (state == STMPE811_State_Pressed)
 800251a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800251e:	2b00      	cmp	r3, #0
 8002520:	d121      	bne.n	8002566 <EndScreen+0x192>
        {
            if (touch.x >= 140 && touch.x <= 170 && touch.y >= 80 && touch.y <= 240)
 8002522:	8abb      	ldrh	r3, [r7, #20]
 8002524:	2b8b      	cmp	r3, #139	@ 0x8b
 8002526:	d90d      	bls.n	8002544 <EndScreen+0x170>
 8002528:	8abb      	ldrh	r3, [r7, #20]
 800252a:	2baa      	cmp	r3, #170	@ 0xaa
 800252c:	d80a      	bhi.n	8002544 <EndScreen+0x170>
 800252e:	8afb      	ldrh	r3, [r7, #22]
 8002530:	2b4f      	cmp	r3, #79	@ 0x4f
 8002532:	d907      	bls.n	8002544 <EndScreen+0x170>
 8002534:	8afb      	ldrh	r3, [r7, #22]
 8002536:	2bf0      	cmp	r3, #240	@ 0xf0
 8002538:	d804      	bhi.n	8002544 <EndScreen+0x170>
            {
                HAL_Delay(200); // Debounce
 800253a:	20c8      	movs	r0, #200	@ 0xc8
 800253c:	f001 f994 	bl	8003868 <HAL_Delay>
                Restart_Game();
 8002540:	f7fe fbcc 	bl	8000cdc <Restart_Game>
            }

            if (touch.x >= 190 && touch.x <= 220 && touch.y >= 80 && touch.y <= 240)
 8002544:	8abb      	ldrh	r3, [r7, #20]
 8002546:	2bbd      	cmp	r3, #189	@ 0xbd
 8002548:	d90d      	bls.n	8002566 <EndScreen+0x192>
 800254a:	8abb      	ldrh	r3, [r7, #20]
 800254c:	2bdc      	cmp	r3, #220	@ 0xdc
 800254e:	d80a      	bhi.n	8002566 <EndScreen+0x192>
 8002550:	8afb      	ldrh	r3, [r7, #22]
 8002552:	2b4f      	cmp	r3, #79	@ 0x4f
 8002554:	d907      	bls.n	8002566 <EndScreen+0x192>
 8002556:	8afb      	ldrh	r3, [r7, #22]
 8002558:	2bf0      	cmp	r3, #240	@ 0xf0
 800255a:	d804      	bhi.n	8002566 <EndScreen+0x192>
            {
                HAL_Delay(200); // Debounce
 800255c:	20c8      	movs	r0, #200	@ 0xc8
 800255e:	f001 f983 	bl	8003868 <HAL_Delay>
                Start_Menu();
 8002562:	f7fe fbc7 	bl	8000cf4 <Start_Menu>
            }
        }

        HAL_Delay(50);
 8002566:	2032      	movs	r0, #50	@ 0x32
 8002568:	f001 f97e 	bl	8003868 <HAL_Delay>
    {
 800256c:	e7cb      	b.n	8002506 <EndScreen+0x132>
 800256e:	bf00      	nop
 8002570:	080079f0 	.word	0x080079f0
 8002574:	080079fc 	.word	0x080079fc
 8002578:	08007a0c 	.word	0x08007a0c
 800257c:	10624dd3 	.word	0x10624dd3
 8002580:	08007a1c 	.word	0x08007a1c
 8002584:	08007a34 	.word	0x08007a34
 8002588:	08007a48 	.word	0x08007a48
 800258c:	08007a54 	.word	0x08007a54

08002590 <Debug_Mode>:
    }
}

void Debug_Mode(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	@ 0x28
 8002594:	af00      	add	r7, sp, #0
    bool gridDrawn = false;
 8002596:	2300      	movs	r3, #0
 8002598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool cleanMode = false;
 800259c:	2300      	movs	r3, #0
 800259e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    bool wasTouching = false;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    uint32_t lastInteraction = HAL_GetTick(); // Track last interaction
 80025a8:	f001 f952 	bl	8003850 <HAL_GetTick>
 80025ac:	6238      	str	r0, [r7, #32]
    Point prev_p = {-1, -1};                  // Start invalid
 80025ae:	4a65      	ldr	r2, [pc, #404]	@ (8002744 <Debug_Mode+0x1b4>)
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025b8:	e883 0003 	stmia.w	r3, {r0, r1}

    STMPE811_TouchData touch;
    touch.orientation = STMPE811_Orientation_Portrait_1;
 80025bc:	2300      	movs	r3, #0
 80025be:	72bb      	strb	r3, [r7, #10]

    while (1)
    {
        STMPE811_State_t state = STMPE811_ReadTouch(&touch);
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fdd2 	bl	800316c <STMPE811_ReadTouch>
 80025c8:	4603      	mov	r3, r0
 80025ca:	75fb      	strb	r3, [r7, #23]

        if (state == STMPE811_State_Pressed)
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d102      	bne.n	80025d8 <Debug_Mode+0x48>
        {
            lastInteraction = HAL_GetTick(); // Reset timeout on touch
 80025d2:	f001 f93d 	bl	8003850 <HAL_GetTick>
 80025d6:	6238      	str	r0, [r7, #32]
        }

        // Exit debug mode after 10 seconds of no interaction
        if (HAL_GetTick() - lastInteraction >= 5000)
 80025d8:	f001 f93a 	bl	8003850 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d904      	bls.n	80025f4 <Debug_Mode+0x64>
        {
            LCD_Clear(0, LCD_COLOR_BLACK);
 80025ea:	2100      	movs	r1, #0
 80025ec:	2000      	movs	r0, #0
 80025ee:	f7fe fa47 	bl	8000a80 <LCD_Clear>
            return;
 80025f2:	e0a4      	b.n	800273e <Debug_Mode+0x1ae>
        }

        // Draw grid once on entry
        if (!gridDrawn && !cleanMode)
 80025f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025f8:	f083 0301 	eor.w	r3, r3, #1
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <Debug_Mode+0x8a>
 8002602:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002606:	f083 0301 	eor.w	r3, r3, #1
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d004      	beq.n	800261a <Debug_Mode+0x8a>
        {
            DrawDebugGrid();
 8002610:	f000 f89a 	bl	8002748 <DrawDebugGrid>
            gridDrawn = true;
 8002614:	2301      	movs	r3, #1
 8002616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        // On first touch, enter clean mode
        if (!cleanMode && state == STMPE811_State_Pressed)
 800261a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800261e:	f083 0301 	eor.w	r3, r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d009      	beq.n	800263c <Debug_Mode+0xac>
 8002628:	7dfb      	ldrb	r3, [r7, #23]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <Debug_Mode+0xac>
        {
            cleanMode = true;
 800262e:	2301      	movs	r3, #1
 8002630:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            LCD_Clear(0, LCD_COLOR_BLACK);
 8002634:	2100      	movs	r1, #0
 8002636:	2000      	movs	r0, #0
 8002638:	f7fe fa22 	bl	8000a80 <LCD_Clear>
        }

        if (cleanMode)
 800263c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002640:	2b00      	cmp	r3, #0
 8002642:	d078      	beq.n	8002736 <Debug_Mode+0x1a6>
        {
            if (state == STMPE811_State_Pressed)
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d15e      	bne.n	8002708 <Debug_Mode+0x178>
            {
                wasTouching = true;
 800264a:	2301      	movs	r3, #1
 800264c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

                // Erase prev crosshair
                if (prev_p.x >= 0 && prev_p.y >= 0)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db2b      	blt.n	80026ae <Debug_Mode+0x11e>
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	db28      	blt.n	80026ae <Debug_Mode+0x11e>
                {
                    for (uint16_t y = 0; y < LCD_PIXEL_HEIGHT; y++)
 800265c:	2300      	movs	r3, #0
 800265e:	83fb      	strh	r3, [r7, #30]
 8002660:	e009      	b.n	8002676 <Debug_Mode+0xe6>
                    {
                        LCD_Draw_Pixel(prev_p.x, y, LCD_COLOR_BLACK);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	b29b      	uxth	r3, r3
 8002666:	8bf9      	ldrh	r1, [r7, #30]
 8002668:	2200      	movs	r2, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe f974 	bl	8000958 <LCD_Draw_Pixel>
                    for (uint16_t y = 0; y < LCD_PIXEL_HEIGHT; y++)
 8002670:	8bfb      	ldrh	r3, [r7, #30]
 8002672:	3301      	adds	r3, #1
 8002674:	83fb      	strh	r3, [r7, #30]
 8002676:	8bfb      	ldrh	r3, [r7, #30]
 8002678:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800267c:	d3f1      	bcc.n	8002662 <Debug_Mode+0xd2>
                    }
                    for (uint16_t x = 0; x < LCD_PIXEL_WIDTH; x++)
 800267e:	2300      	movs	r3, #0
 8002680:	83bb      	strh	r3, [r7, #28]
 8002682:	e009      	b.n	8002698 <Debug_Mode+0x108>
                    {
                        LCD_Draw_Pixel(x, prev_p.y, LCD_COLOR_BLACK);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	b299      	uxth	r1, r3
 8002688:	8bbb      	ldrh	r3, [r7, #28]
 800268a:	2200      	movs	r2, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe f963 	bl	8000958 <LCD_Draw_Pixel>
                    for (uint16_t x = 0; x < LCD_PIXEL_WIDTH; x++)
 8002692:	8bbb      	ldrh	r3, [r7, #28]
 8002694:	3301      	adds	r3, #1
 8002696:	83bb      	strh	r3, [r7, #28]
 8002698:	8bbb      	ldrh	r3, [r7, #28]
 800269a:	2bef      	cmp	r3, #239	@ 0xef
 800269c:	d9f2      	bls.n	8002684 <Debug_Mode+0xf4>
                    }
                    LCD_Draw_Circle_Fill(prev_p.x, prev_p.y, 4, LCD_COLOR_BLACK);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	b298      	uxth	r0, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	b299      	uxth	r1, r3
 80026a6:	2300      	movs	r3, #0
 80026a8:	2204      	movs	r2, #4
 80026aa:	f7fe f995 	bl	80009d8 <LCD_Draw_Circle_Fill>
                }

                // Draw new crosshair
                for (uint16_t y = 0; y < LCD_PIXEL_HEIGHT; y++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	837b      	strh	r3, [r7, #26]
 80026b2:	e009      	b.n	80026c8 <Debug_Mode+0x138>
                {
                    LCD_Draw_Pixel(touch.x, y, LCD_COLOR_GREEN);
 80026b4:	88bb      	ldrh	r3, [r7, #4]
 80026b6:	8b79      	ldrh	r1, [r7, #26]
 80026b8:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe f94b 	bl	8000958 <LCD_Draw_Pixel>
                for (uint16_t y = 0; y < LCD_PIXEL_HEIGHT; y++)
 80026c2:	8b7b      	ldrh	r3, [r7, #26]
 80026c4:	3301      	adds	r3, #1
 80026c6:	837b      	strh	r3, [r7, #26]
 80026c8:	8b7b      	ldrh	r3, [r7, #26]
 80026ca:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80026ce:	d3f1      	bcc.n	80026b4 <Debug_Mode+0x124>
                }
                for (uint16_t x = 0; x < LCD_PIXEL_WIDTH; x++)
 80026d0:	2300      	movs	r3, #0
 80026d2:	833b      	strh	r3, [r7, #24]
 80026d4:	e009      	b.n	80026ea <Debug_Mode+0x15a>
                {
                    LCD_Draw_Pixel(x, touch.y, LCD_COLOR_GREEN);
 80026d6:	88f9      	ldrh	r1, [r7, #6]
 80026d8:	8b3b      	ldrh	r3, [r7, #24]
 80026da:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe f93a 	bl	8000958 <LCD_Draw_Pixel>
                for (uint16_t x = 0; x < LCD_PIXEL_WIDTH; x++)
 80026e4:	8b3b      	ldrh	r3, [r7, #24]
 80026e6:	3301      	adds	r3, #1
 80026e8:	833b      	strh	r3, [r7, #24]
 80026ea:	8b3b      	ldrh	r3, [r7, #24]
 80026ec:	2bef      	cmp	r3, #239	@ 0xef
 80026ee:	d9f2      	bls.n	80026d6 <Debug_Mode+0x146>
                }
                LCD_Draw_Circle_Fill(touch.x, touch.y, 4, LCD_COLOR_RED);
 80026f0:	88b8      	ldrh	r0, [r7, #4]
 80026f2:	88f9      	ldrh	r1, [r7, #6]
 80026f4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80026f8:	2204      	movs	r2, #4
 80026fa:	f7fe f96d 	bl	80009d8 <LCD_Draw_Circle_Fill>

                // Save pos
                prev_p.x = touch.x;
 80026fe:	88bb      	ldrh	r3, [r7, #4]
 8002700:	60fb      	str	r3, [r7, #12]
                prev_p.y = touch.y;
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	e016      	b.n	8002736 <Debug_Mode+0x1a6>
            }
            else if (wasTouching)
 8002708:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800270c:	2b00      	cmp	r3, #0
 800270e:	d012      	beq.n	8002736 <Debug_Mode+0x1a6>
            {
                // If touch is released, then just reset back to debug grid
                cleanMode = false;
 8002710:	2300      	movs	r3, #0
 8002712:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                gridDrawn = false;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                wasTouching = false;
 800271c:	2300      	movs	r3, #0
 800271e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                LCD_Clear(0, LCD_COLOR_BLACK);
 8002722:	2100      	movs	r1, #0
 8002724:	2000      	movs	r0, #0
 8002726:	f7fe f9ab 	bl	8000a80 <LCD_Clear>

                prev_p.x = -1;
 800272a:	f04f 33ff 	mov.w	r3, #4294967295
 800272e:	60fb      	str	r3, [r7, #12]
                prev_p.y = -1;
 8002730:	f04f 33ff 	mov.w	r3, #4294967295
 8002734:	613b      	str	r3, [r7, #16]
            }
        }

        HAL_Delay(25); // Frame pacing
 8002736:	2019      	movs	r0, #25
 8002738:	f001 f896 	bl	8003868 <HAL_Delay>
    {
 800273c:	e740      	b.n	80025c0 <Debug_Mode+0x30>
    }
}
 800273e:	3728      	adds	r7, #40	@ 0x28
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	08007a60 	.word	0x08007a60

08002748 <DrawDebugGrid>:

void DrawDebugGrid(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08c      	sub	sp, #48	@ 0x30
 800274c:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_BLACK);
 800274e:	2100      	movs	r1, #0
 8002750:	2000      	movs	r0, #0
 8002752:	f7fe f995 	bl	8000a80 <LCD_Clear>
    LCD_SetFont(&Font16x24);
 8002756:	4866      	ldr	r0, [pc, #408]	@ (80028f0 <DrawDebugGrid+0x1a8>)
 8002758:	f7fe f9c4 	bl	8000ae4 <LCD_SetFont>
    LCD_SetTextColor(LCD_COLOR_RED);
 800275c:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8002760:	f7fe f9b0 	bl	8000ac4 <LCD_SetTextColor>

    // Center mark
    LCD_Draw_Circle_Fill(LCD_PIXEL_WIDTH / 2, LCD_PIXEL_HEIGHT / 2, 4, LCD_COLOR_GREEN);
 8002764:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002768:	2204      	movs	r2, #4
 800276a:	21a0      	movs	r1, #160	@ 0xa0
 800276c:	2078      	movs	r0, #120	@ 0x78
 800276e:	f7fe f933 	bl	80009d8 <LCD_Draw_Circle_Fill>

    // Grid lines
    for (int x = 0; x < LCD_PIXEL_WIDTH; x += 20)
 8002772:	2300      	movs	r3, #0
 8002774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002776:	e015      	b.n	80027a4 <DrawDebugGrid+0x5c>
    {
        for (int y = 0; y < LCD_PIXEL_HEIGHT; y++)
 8002778:	2300      	movs	r3, #0
 800277a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800277c:	e00b      	b.n	8002796 <DrawDebugGrid+0x4e>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_GREY);
 800277e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002780:	b29b      	uxth	r3, r3
 8002782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002784:	b291      	uxth	r1, r2
 8002786:	f24f 72de 	movw	r2, #63454	@ 0xf7de
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe f8e4 	bl	8000958 <LCD_Draw_Pixel>
        for (int y = 0; y < LCD_PIXEL_HEIGHT; y++)
 8002790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002792:	3301      	adds	r3, #1
 8002794:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002798:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800279c:	dbef      	blt.n	800277e <DrawDebugGrid+0x36>
    for (int x = 0; x < LCD_PIXEL_WIDTH; x += 20)
 800279e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a0:	3314      	adds	r3, #20
 80027a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a6:	2bef      	cmp	r3, #239	@ 0xef
 80027a8:	dde6      	ble.n	8002778 <DrawDebugGrid+0x30>
        }
    }

    for (int y = 0; y < LCD_PIXEL_HEIGHT; y += 20)
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ae:	e014      	b.n	80027da <DrawDebugGrid+0x92>
    {
        for (int x = 0; x < LCD_PIXEL_WIDTH; x++)
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
 80027b4:	e00b      	b.n	80027ce <DrawDebugGrid+0x86>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_GREY);
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027bc:	b291      	uxth	r1, r2
 80027be:	f24f 72de 	movw	r2, #63454	@ 0xf7de
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe f8c8 	bl	8000958 <LCD_Draw_Pixel>
        for (int x = 0; x < LCD_PIXEL_WIDTH; x++)
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	3301      	adds	r3, #1
 80027cc:	623b      	str	r3, [r7, #32]
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	2bef      	cmp	r3, #239	@ 0xef
 80027d2:	ddf0      	ble.n	80027b6 <DrawDebugGrid+0x6e>
    for (int y = 0; y < LCD_PIXEL_HEIGHT; y += 20)
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	3314      	adds	r3, #20
 80027d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80027e0:	dbe6      	blt.n	80027b0 <DrawDebugGrid+0x68>
        }
    }
    // Boxes behind coordinates
    for (int y = 0; y < 80; y++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	e013      	b.n	8002810 <DrawDebugGrid+0xc8>
    {
        for (int x = 0; x < 40; x++)
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	e00a      	b.n	8002804 <DrawDebugGrid+0xbc>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_BLACK);
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	b291      	uxth	r1, r2
 80027f6:	2200      	movs	r2, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe f8ad 	bl	8000958 <LCD_Draw_Pixel>
        for (int x = 0; x < 40; x++)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	3301      	adds	r3, #1
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b27      	cmp	r3, #39	@ 0x27
 8002808:	ddf1      	ble.n	80027ee <DrawDebugGrid+0xa6>
    for (int y = 0; y < 80; y++)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3301      	adds	r3, #1
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	2b4f      	cmp	r3, #79	@ 0x4f
 8002814:	dde8      	ble.n	80027e8 <DrawDebugGrid+0xa0>
        }
    }

    for (int y = 221; y < 320; y++)
 8002816:	23dd      	movs	r3, #221	@ 0xdd
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e013      	b.n	8002844 <DrawDebugGrid+0xfc>
    {
        for (int x = 0; x < 40; x++)
 800281c:	2300      	movs	r3, #0
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	e00a      	b.n	8002838 <DrawDebugGrid+0xf0>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_BLACK);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	b29b      	uxth	r3, r3
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	b291      	uxth	r1, r2
 800282a:	2200      	movs	r2, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe f893 	bl	8000958 <LCD_Draw_Pixel>
        for (int x = 0; x < 40; x++)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	3301      	adds	r3, #1
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b27      	cmp	r3, #39	@ 0x27
 800283c:	ddf1      	ble.n	8002822 <DrawDebugGrid+0xda>
    for (int y = 221; y < 320; y++)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	3301      	adds	r3, #1
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800284a:	dbe7      	blt.n	800281c <DrawDebugGrid+0xd4>
        }
    }
    for (int y = 0; y < 100; y++)
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	e013      	b.n	800287a <DrawDebugGrid+0x132>
    {
        for (int x = 201; x < 240; x++)
 8002852:	23c9      	movs	r3, #201	@ 0xc9
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	e00a      	b.n	800286e <DrawDebugGrid+0x126>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_BLACK);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	b29b      	uxth	r3, r3
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	b291      	uxth	r1, r2
 8002860:	2200      	movs	r2, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe f878 	bl	8000958 <LCD_Draw_Pixel>
        for (int x = 201; x < 240; x++)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	3301      	adds	r3, #1
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2bef      	cmp	r3, #239	@ 0xef
 8002872:	ddf1      	ble.n	8002858 <DrawDebugGrid+0x110>
    for (int y = 0; y < 100; y++)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3301      	adds	r3, #1
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b63      	cmp	r3, #99	@ 0x63
 800287e:	dde8      	ble.n	8002852 <DrawDebugGrid+0x10a>
        }
    }
    for (int y = 201; y < 320; y++)
 8002880:	23c9      	movs	r3, #201	@ 0xc9
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	e013      	b.n	80028ae <DrawDebugGrid+0x166>
    {
        for (int x = 201; x < 240; x++)
 8002886:	23c9      	movs	r3, #201	@ 0xc9
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	e00a      	b.n	80028a2 <DrawDebugGrid+0x15a>
        {
            LCD_Draw_Pixel(x, y, LCD_COLOR_BLACK);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	b291      	uxth	r1, r2
 8002894:	2200      	movs	r2, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe f85e 	bl	8000958 <LCD_Draw_Pixel>
        for (int x = 201; x < 240; x++)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	3301      	adds	r3, #1
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2bef      	cmp	r3, #239	@ 0xef
 80028a6:	ddf1      	ble.n	800288c <DrawDebugGrid+0x144>
    for (int y = 201; y < 320; y++)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3301      	adds	r3, #1
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80028b4:	dbe7      	blt.n	8002886 <DrawDebugGrid+0x13e>
        }
    }
    LCD_DisplayString(5, 7, (uint8_t *)"(0,0)", LEFT_MODE);
 80028b6:	2300      	movs	r3, #0
 80028b8:	4a0e      	ldr	r2, [pc, #56]	@ (80028f4 <DrawDebugGrid+0x1ac>)
 80028ba:	2107      	movs	r1, #7
 80028bc:	2005      	movs	r0, #5
 80028be:	f7fe f995 	bl	8000bec <LCD_DisplayString>
    LCD_DisplayString(225, 7, (uint8_t *)"(320,0)", LEFT_MODE);
 80028c2:	2300      	movs	r3, #0
 80028c4:	4a0c      	ldr	r2, [pc, #48]	@ (80028f8 <DrawDebugGrid+0x1b0>)
 80028c6:	2107      	movs	r1, #7
 80028c8:	20e1      	movs	r0, #225	@ 0xe1
 80028ca:	f7fe f98f 	bl	8000bec <LCD_DisplayString>
    LCD_DisplayString(2, 210, (uint8_t *)"(0,240)", LEFT_MODE);
 80028ce:	2300      	movs	r3, #0
 80028d0:	4a0a      	ldr	r2, [pc, #40]	@ (80028fc <DrawDebugGrid+0x1b4>)
 80028d2:	21d2      	movs	r1, #210	@ 0xd2
 80028d4:	2002      	movs	r0, #2
 80028d6:	f7fe f989 	bl	8000bec <LCD_DisplayString>
    LCD_DisplayString(202, 210, (uint8_t *)"(320,240)", LEFT_MODE);
 80028da:	2300      	movs	r3, #0
 80028dc:	4a08      	ldr	r2, [pc, #32]	@ (8002900 <DrawDebugGrid+0x1b8>)
 80028de:	21d2      	movs	r1, #210	@ 0xd2
 80028e0:	20ca      	movs	r0, #202	@ 0xca
 80028e2:	f7fe f983 	bl	8000bec <LCD_DisplayString>
}
 80028e6:	bf00      	nop
 80028e8:	3730      	adds	r7, #48	@ 0x30
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000004 	.word	0x20000004
 80028f4:	08007a68 	.word	0x08007a68
 80028f8:	08007a70 	.word	0x08007a70
 80028fc:	08007a78 	.word	0x08007a78
 8002900:	08007a80 	.word	0x08007a80

08002904 <DrawDebugBug>:

void DrawDebugBug(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
    // Head
    for (int y = -5; y <= 5; y++)
 800290a:	f06f 0304 	mvn.w	r3, #4
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	e023      	b.n	800295a <DrawDebugBug+0x56>
    {
        for (int x = -5; x <= 5; x++)
 8002912:	f06f 0304 	mvn.w	r3, #4
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	e019      	b.n	800294e <DrawDebugBug+0x4a>
        {
            if (x * x + y * y <= 25)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	fb03 f203 	mul.w	r2, r3, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fb03 f303 	mul.w	r3, r3, r3
 8002926:	4413      	add	r3, r2
 8002928:	2b19      	cmp	r3, #25
 800292a:	dc0d      	bgt.n	8002948 <DrawDebugBug+0x44>
            {
                LCD_Draw_Pixel(208 + y, 300 - x, LCD_COLOR_DARKGREEN);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	b29b      	uxth	r3, r3
 8002930:	33d0      	adds	r3, #208	@ 0xd0
 8002932:	b298      	uxth	r0, r3
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	b29b      	uxth	r3, r3
 8002938:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 800293c:	b29b      	uxth	r3, r3
 800293e:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8002942:	4619      	mov	r1, r3
 8002944:	f7fe f808 	bl	8000958 <LCD_Draw_Pixel>
        for (int x = -5; x <= 5; x++)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	3301      	adds	r3, #1
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b05      	cmp	r3, #5
 8002952:	dde2      	ble.n	800291a <DrawDebugBug+0x16>
    for (int y = -5; y <= 5; y++)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	3301      	adds	r3, #1
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b05      	cmp	r3, #5
 800295e:	ddd8      	ble.n	8002912 <DrawDebugBug+0xe>
            }
        }
    }

    // Eyes
    LCD_Draw_Pixel(210, 298, LCD_COLOR_MAGENTA); // Top eye
 8002960:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002964:	f44f 7195 	mov.w	r1, #298	@ 0x12a
 8002968:	20d2      	movs	r0, #210	@ 0xd2
 800296a:	f7fd fff5 	bl	8000958 <LCD_Draw_Pixel>
    LCD_Draw_Pixel(210, 302, LCD_COLOR_MAGENTA); // Bottom eye
 800296e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002972:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8002976:	20d2      	movs	r0, #210	@ 0xd2
 8002978:	f7fd ffee 	bl	8000958 <LCD_Draw_Pixel>

    // Body
    for (int y = -10; y <= 10; y++)
 800297c:	f06f 0309 	mvn.w	r3, #9
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	e023      	b.n	80029cc <DrawDebugBug+0xc8>
    {
        for (int x = -10; x <= 10; x++)
 8002984:	f06f 0309 	mvn.w	r3, #9
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	e019      	b.n	80029c0 <DrawDebugBug+0xbc>
        {
            if (x * x + y * y <= 100)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	fb03 f203 	mul.w	r2, r3, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	fb03 f303 	mul.w	r3, r3, r3
 8002998:	4413      	add	r3, r2
 800299a:	2b64      	cmp	r3, #100	@ 0x64
 800299c:	dc0d      	bgt.n	80029ba <DrawDebugBug+0xb6>
            {
                LCD_Draw_Pixel(220 + y, 300 - x, LCD_COLOR_GREEN);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	33dc      	adds	r3, #220	@ 0xdc
 80029a4:	b298      	uxth	r0, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80029b4:	4619      	mov	r1, r3
 80029b6:	f7fd ffcf 	bl	8000958 <LCD_Draw_Pixel>
        for (int x = -10; x <= 10; x++)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	3301      	adds	r3, #1
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b0a      	cmp	r3, #10
 80029c4:	dde2      	ble.n	800298c <DrawDebugBug+0x88>
    for (int y = -10; y <= 10; y++)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3301      	adds	r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b0a      	cmp	r3, #10
 80029d0:	ddd8      	ble.n	8002984 <DrawDebugBug+0x80>
            }
        }
    }

    // Legs, 3 on each side
    for (int i = -1; i <= 1; i++)
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	e062      	b.n	8002aa0 <DrawDebugBug+0x19c>
    {
        LCD_Draw_Pixel(220 + i * 6, 287, LCD_COLOR_WHITE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	0052      	lsls	r2, r2, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	33dc      	adds	r3, #220	@ 0xdc
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029f0:	f240 111f 	movw	r1, #287	@ 0x11f
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fd ffaf 	bl	8000958 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(220 + i * 6, 286, LCD_COLOR_WHITE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	0052      	lsls	r2, r2, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	33dc      	adds	r3, #220	@ 0xdc
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a10:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd ff9f 	bl	8000958 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(220 + i * 6, 285, LCD_COLOR_WHITE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	0052      	lsls	r2, r2, #1
 8002a22:	4413      	add	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	33dc      	adds	r3, #220	@ 0xdc
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a30:	f240 111d 	movw	r1, #285	@ 0x11d
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd ff8f 	bl	8000958 <LCD_Draw_Pixel>

        LCD_Draw_Pixel(220 + i * 6, 313, LCD_COLOR_WHITE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	0052      	lsls	r2, r2, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	33dc      	adds	r3, #220	@ 0xdc
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a50:	f240 1139 	movw	r1, #313	@ 0x139
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd ff7f 	bl	8000958 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(220 + i * 6, 314, LCD_COLOR_WHITE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	0052      	lsls	r2, r2, #1
 8002a62:	4413      	add	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	33dc      	adds	r3, #220	@ 0xdc
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a70:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fd ff6f 	bl	8000958 <LCD_Draw_Pixel>
        LCD_Draw_Pixel(220 + i * 6, 315, LCD_COLOR_WHITE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	0052      	lsls	r2, r2, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	33dc      	adds	r3, #220	@ 0xdc
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a90:	f240 113b 	movw	r1, #315	@ 0x13b
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fd ff5f 	bl	8000958 <LCD_Draw_Pixel>
    for (int i = -1; i <= 1; i++)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	dd99      	ble.n	80029da <DrawDebugBug+0xd6>
    }

    // Antennae or sumthin, idk dude
    LCD_Draw_Pixel(207, 297, LCD_COLOR_LIGHTGRAY);
 8002aa6:	f24d 32d3 	movw	r2, #54227	@ 0xd3d3
 8002aaa:	f240 1129 	movw	r1, #297	@ 0x129
 8002aae:	20cf      	movs	r0, #207	@ 0xcf
 8002ab0:	f7fd ff52 	bl	8000958 <LCD_Draw_Pixel>
    LCD_Draw_Pixel(207, 303, LCD_COLOR_LIGHTGRAY);
 8002ab4:	f24d 32d3 	movw	r2, #54227	@ 0xd3d3
 8002ab8:	f240 112f 	movw	r1, #303	@ 0x12f
 8002abc:	20cf      	movs	r0, #207	@ 0xcf
 8002abe:	f7fd ff4b 	bl	8000958 <LCD_Draw_Pixel>
}
 8002ac2:	bf00      	nop
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	4b10      	ldr	r3, [pc, #64]	@ (8002b18 <HAL_MspInit+0x4c>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	4a0f      	ldr	r2, [pc, #60]	@ (8002b18 <HAL_MspInit+0x4c>)
 8002adc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b18 <HAL_MspInit+0x4c>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aea:	607b      	str	r3, [r7, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	603b      	str	r3, [r7, #0]
 8002af2:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <HAL_MspInit+0x4c>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	4a08      	ldr	r2, [pc, #32]	@ (8002b18 <HAL_MspInit+0x4c>)
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002afe:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_MspInit+0x4c>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b0a:	2007      	movs	r0, #7
 8002b0c:	f000 ffa0 	bl	8003a50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40023800 	.word	0x40023800

08002b1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	@ 0x28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a29      	ldr	r2, [pc, #164]	@ (8002be0 <HAL_I2C_MspInit+0xc4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d14b      	bne.n	8002bd6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	4b28      	ldr	r3, [pc, #160]	@ (8002be4 <HAL_I2C_MspInit+0xc8>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	4a27      	ldr	r2, [pc, #156]	@ (8002be4 <HAL_I2C_MspInit+0xc8>)
 8002b48:	f043 0304 	orr.w	r3, r3, #4
 8002b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4e:	4b25      	ldr	r3, [pc, #148]	@ (8002be4 <HAL_I2C_MspInit+0xc8>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	4b21      	ldr	r3, [pc, #132]	@ (8002be4 <HAL_I2C_MspInit+0xc8>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	4a20      	ldr	r2, [pc, #128]	@ (8002be4 <HAL_I2C_MspInit+0xc8>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002be4 <HAL_I2C_MspInit+0xc8>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002b76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b7c:	2312      	movs	r3, #18
 8002b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b84:	2300      	movs	r3, #0
 8002b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b88:	2304      	movs	r3, #4
 8002b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	4619      	mov	r1, r3
 8002b92:	4815      	ldr	r0, [pc, #84]	@ (8002be8 <HAL_I2C_MspInit+0xcc>)
 8002b94:	f000 ff9e 	bl	8003ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002b98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b9e:	2312      	movs	r3, #18
 8002ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002baa:	2304      	movs	r3, #4
 8002bac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002bae:	f107 0314 	add.w	r3, r7, #20
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	480d      	ldr	r0, [pc, #52]	@ (8002bec <HAL_I2C_MspInit+0xd0>)
 8002bb6:	f000 ff8d 	bl	8003ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	4b09      	ldr	r3, [pc, #36]	@ (8002be4 <HAL_I2C_MspInit+0xc8>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	4a08      	ldr	r2, [pc, #32]	@ (8002be4 <HAL_I2C_MspInit+0xc8>)
 8002bc4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bca:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <HAL_I2C_MspInit+0xc8>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002bd6:	bf00      	nop
 8002bd8:	3728      	adds	r7, #40	@ 0x28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40005c00 	.word	0x40005c00
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40020800 	.word	0x40020800
 8002bec:	40020000 	.word	0x40020000

08002bf0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b09a      	sub	sp, #104	@ 0x68
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c0c:	2230      	movs	r2, #48	@ 0x30
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f004 fa45 	bl	80070a0 <memset>
  if(hltdc->Instance==LTDC)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a81      	ldr	r2, [pc, #516]	@ (8002e20 <HAL_LTDC_MspInit+0x230>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	f040 80fb 	bne.w	8002e18 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002c22:	2308      	movs	r3, #8
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8002c26:	23c8      	movs	r3, #200	@ 0xc8
 8002c28:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002c2e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002c32:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f003 fa17 	bl	800606c <HAL_RCCEx_PeriphCLKConfig>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002c44:	f7ff fa60 	bl	8002108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002c48:	2300      	movs	r3, #0
 8002c4a:	623b      	str	r3, [r7, #32]
 8002c4c:	4b75      	ldr	r3, [pc, #468]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c50:	4a74      	ldr	r2, [pc, #464]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002c52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c56:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c58:	4b72      	ldr	r3, [pc, #456]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c60:	623b      	str	r3, [r7, #32]
 8002c62:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	4b6e      	ldr	r3, [pc, #440]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6c:	4a6d      	ldr	r2, [pc, #436]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002c6e:	f043 0320 	orr.w	r3, r3, #32
 8002c72:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c74:	4b6b      	ldr	r3, [pc, #428]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c80:	2300      	movs	r3, #0
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	4b67      	ldr	r3, [pc, #412]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	4a66      	ldr	r2, [pc, #408]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c90:	4b64      	ldr	r3, [pc, #400]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	4b60      	ldr	r3, [pc, #384]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca4:	4a5f      	ldr	r2, [pc, #380]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002ca6:	f043 0302 	orr.w	r3, r3, #2
 8002caa:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cac:	4b5d      	ldr	r3, [pc, #372]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cb8:	2300      	movs	r3, #0
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	4b59      	ldr	r3, [pc, #356]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc0:	4a58      	ldr	r2, [pc, #352]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc8:	4b56      	ldr	r3, [pc, #344]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	4b52      	ldr	r3, [pc, #328]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cdc:	4a51      	ldr	r2, [pc, #324]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002cde:	f043 0304 	orr.w	r3, r3, #4
 8002ce2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce4:	4b4f      	ldr	r3, [pc, #316]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	4b4b      	ldr	r3, [pc, #300]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf8:	4a4a      	ldr	r2, [pc, #296]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002cfa:	f043 0308 	orr.w	r3, r3, #8
 8002cfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d00:	4b48      	ldr	r3, [pc, #288]	@ (8002e24 <HAL_LTDC_MspInit+0x234>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002d0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d10:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d12:	2302      	movs	r3, #2
 8002d14:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d1e:	230e      	movs	r3, #14
 8002d20:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002d22:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d26:	4619      	mov	r1, r3
 8002d28:	483f      	ldr	r0, [pc, #252]	@ (8002e28 <HAL_LTDC_MspInit+0x238>)
 8002d2a:	f000 fed3 	bl	8003ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002d2e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002d32:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d40:	230e      	movs	r3, #14
 8002d42:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4838      	ldr	r0, [pc, #224]	@ (8002e2c <HAL_LTDC_MspInit+0x23c>)
 8002d4c:	f000 fec2 	bl	8003ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002d50:	2303      	movs	r3, #3
 8002d52:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	2302      	movs	r3, #2
 8002d56:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002d60:	2309      	movs	r3, #9
 8002d62:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d64:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4831      	ldr	r0, [pc, #196]	@ (8002e30 <HAL_LTDC_MspInit+0x240>)
 8002d6c:	f000 feb2 	bl	8003ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002d70:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002d74:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d76:	2302      	movs	r3, #2
 8002d78:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d82:	230e      	movs	r3, #14
 8002d84:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d86:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4828      	ldr	r0, [pc, #160]	@ (8002e30 <HAL_LTDC_MspInit+0x240>)
 8002d8e:	f000 fea1 	bl	8003ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002d92:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002d96:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da0:	2300      	movs	r3, #0
 8002da2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002da4:	230e      	movs	r3, #14
 8002da6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002da8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002dac:	4619      	mov	r1, r3
 8002dae:	4821      	ldr	r0, [pc, #132]	@ (8002e34 <HAL_LTDC_MspInit+0x244>)
 8002db0:	f000 fe90 	bl	8003ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002db4:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002db8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002dc6:	230e      	movs	r3, #14
 8002dc8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4819      	ldr	r0, [pc, #100]	@ (8002e38 <HAL_LTDC_MspInit+0x248>)
 8002dd2:	f000 fe7f 	bl	8003ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002dd6:	2348      	movs	r3, #72	@ 0x48
 8002dd8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de2:	2300      	movs	r3, #0
 8002de4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002de6:	230e      	movs	r3, #14
 8002de8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002dee:	4619      	mov	r1, r3
 8002df0:	4812      	ldr	r0, [pc, #72]	@ (8002e3c <HAL_LTDC_MspInit+0x24c>)
 8002df2:	f000 fe6f 	bl	8003ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002df6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002dfa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e04:	2300      	movs	r3, #0
 8002e06:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002e08:	2309      	movs	r3, #9
 8002e0a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e10:	4619      	mov	r1, r3
 8002e12:	4808      	ldr	r0, [pc, #32]	@ (8002e34 <HAL_LTDC_MspInit+0x244>)
 8002e14:	f000 fe5e 	bl	8003ad4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002e18:	bf00      	nop
 8002e1a:	3768      	adds	r7, #104	@ 0x68
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40016800 	.word	0x40016800
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40021400 	.word	0x40021400
 8002e2c:	40020000 	.word	0x40020000
 8002e30:	40020400 	.word	0x40020400
 8002e34:	40021800 	.word	0x40021800
 8002e38:	40020800 	.word	0x40020800
 8002e3c:	40020c00 	.word	0x40020c00

08002e40 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e7c <HAL_RNG_MspInit+0x3c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d10d      	bne.n	8002e6e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	4b0a      	ldr	r3, [pc, #40]	@ (8002e80 <HAL_RNG_MspInit+0x40>)
 8002e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e5a:	4a09      	ldr	r2, [pc, #36]	@ (8002e80 <HAL_RNG_MspInit+0x40>)
 8002e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e60:	6353      	str	r3, [r2, #52]	@ 0x34
 8002e62:	4b07      	ldr	r3, [pc, #28]	@ (8002e80 <HAL_RNG_MspInit+0x40>)
 8002e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002e6e:	bf00      	nop
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	50060800 	.word	0x50060800
 8002e80:	40023800 	.word	0x40023800

08002e84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	@ 0x28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a19      	ldr	r2, [pc, #100]	@ (8002f08 <HAL_SPI_MspInit+0x84>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d12c      	bne.n	8002f00 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	4b18      	ldr	r3, [pc, #96]	@ (8002f0c <HAL_SPI_MspInit+0x88>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	4a17      	ldr	r2, [pc, #92]	@ (8002f0c <HAL_SPI_MspInit+0x88>)
 8002eb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eb6:	4b15      	ldr	r3, [pc, #84]	@ (8002f0c <HAL_SPI_MspInit+0x88>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b11      	ldr	r3, [pc, #68]	@ (8002f0c <HAL_SPI_MspInit+0x88>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	4a10      	ldr	r2, [pc, #64]	@ (8002f0c <HAL_SPI_MspInit+0x88>)
 8002ecc:	f043 0320 	orr.w	r3, r3, #32
 8002ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f0c <HAL_SPI_MspInit+0x88>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002ede:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2300      	movs	r3, #0
 8002eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002ef0:	2305      	movs	r3, #5
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ef4:	f107 0314 	add.w	r3, r7, #20
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4805      	ldr	r0, [pc, #20]	@ (8002f10 <HAL_SPI_MspInit+0x8c>)
 8002efc:	f000 fdea 	bl	8003ad4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002f00:	bf00      	nop
 8002f02:	3728      	adds	r7, #40	@ 0x28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40015000 	.word	0x40015000
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40021400 	.word	0x40021400

08002f14 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a08      	ldr	r2, [pc, #32]	@ (8002f44 <HAL_SPI_MspDeInit+0x30>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10a      	bne.n	8002f3c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002f26:	4b08      	ldr	r3, [pc, #32]	@ (8002f48 <HAL_SPI_MspDeInit+0x34>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	4a07      	ldr	r2, [pc, #28]	@ (8002f48 <HAL_SPI_MspDeInit+0x34>)
 8002f2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002f30:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002f32:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002f36:	4805      	ldr	r0, [pc, #20]	@ (8002f4c <HAL_SPI_MspDeInit+0x38>)
 8002f38:	f000 ff78 	bl	8003e2c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40015000 	.word	0x40015000
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40021400 	.word	0x40021400

08002f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f60:	d10d      	bne.n	8002f7e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	4b09      	ldr	r3, [pc, #36]	@ (8002f8c <HAL_TIM_Base_MspInit+0x3c>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	4a08      	ldr	r2, [pc, #32]	@ (8002f8c <HAL_TIM_Base_MspInit+0x3c>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f72:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <HAL_TIM_Base_MspInit+0x3c>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800

08002f90 <EXTI0_IRQHandler>:

/* USER CODE END 0 */

/* External variables --------------------------------------------------------*/
void EXTI0_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);   // hands control to HAL
 8002f94:	2001      	movs	r0, #1
 8002f96:	f001 f887 	bl	80040a8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fa2:	bf00      	nop
 8002fa4:	e7fd      	b.n	8002fa2 <NMI_Handler+0x4>

08002fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002faa:	bf00      	nop
 8002fac:	e7fd      	b.n	8002faa <HardFault_Handler+0x4>

08002fae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fb2:	bf00      	nop
 8002fb4:	e7fd      	b.n	8002fb2 <MemManage_Handler+0x4>

08002fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fba:	bf00      	nop
 8002fbc:	e7fd      	b.n	8002fba <BusFault_Handler+0x4>

08002fbe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fc2:	bf00      	nop
 8002fc4:	e7fd      	b.n	8002fc2 <UsageFault_Handler+0x4>

08002fc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ff4:	f000 fc18 	bl	8003828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ff8:	bf00      	nop
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8003002:	f000 f9cd 	bl	80033a0 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8003006:	f000 f98d 	bl	8003324 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800300a:	2202      	movs	r2, #2
 800300c:	2103      	movs	r1, #3
 800300e:	2082      	movs	r0, #130	@ 0x82
 8003010:	f000 fa1a 	bl	8003448 <I2C3_Write>
    HAL_Delay(5);
 8003014:	2005      	movs	r0, #5
 8003016:	f000 fc27 	bl	8003868 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800301a:	2200      	movs	r2, #0
 800301c:	2103      	movs	r1, #3
 800301e:	2082      	movs	r0, #130	@ 0x82
 8003020:	f000 fa12 	bl	8003448 <I2C3_Write>
    HAL_Delay(2);
 8003024:	2002      	movs	r0, #2
 8003026:	f000 fc1f 	bl	8003868 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 800302a:	1cba      	adds	r2, r7, #2
 800302c:	2302      	movs	r3, #2
 800302e:	2100      	movs	r1, #0
 8003030:	2082      	movs	r0, #130	@ 0x82
 8003032:	f000 fa59 	bl	80034e8 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8003036:	887b      	ldrh	r3, [r7, #2]
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 800303c:	887b      	ldrh	r3, [r7, #2]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	b29a      	uxth	r2, r3
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	4313      	orrs	r3, r2
 8003046:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	f640 0211 	movw	r2, #2065	@ 0x811
 800304e:	4293      	cmp	r3, r2
 8003050:	d001      	beq.n	8003056 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8003052:	2303      	movs	r3, #3
 8003054:	e075      	b.n	8003142 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003056:	2202      	movs	r2, #2
 8003058:	2103      	movs	r1, #3
 800305a:	2082      	movs	r0, #130	@ 0x82
 800305c:	f000 f9f4 	bl	8003448 <I2C3_Write>
    HAL_Delay(5);
 8003060:	2005      	movs	r0, #5
 8003062:	f000 fc01 	bl	8003868 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003066:	2200      	movs	r2, #0
 8003068:	2103      	movs	r1, #3
 800306a:	2082      	movs	r0, #130	@ 0x82
 800306c:	f000 f9ec 	bl	8003448 <I2C3_Write>
    HAL_Delay(2);
 8003070:	2002      	movs	r0, #2
 8003072:	f000 fbf9 	bl	8003868 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003076:	2004      	movs	r0, #4
 8003078:	f000 f867 	bl	800314a <STMPE811_Read>
 800307c:	4603      	mov	r3, r0
 800307e:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8003080:	797b      	ldrb	r3, [r7, #5]
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8003088:	797b      	ldrb	r3, [r7, #5]
 800308a:	461a      	mov	r2, r3
 800308c:	2104      	movs	r1, #4
 800308e:	2082      	movs	r0, #130	@ 0x82
 8003090:	f000 f9da 	bl	8003448 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8003094:	2004      	movs	r0, #4
 8003096:	f000 f858 	bl	800314a <STMPE811_Read>
 800309a:	4603      	mov	r3, r0
 800309c:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 800309e:	797b      	ldrb	r3, [r7, #5]
 80030a0:	f023 0302 	bic.w	r3, r3, #2
 80030a4:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80030a6:	797b      	ldrb	r3, [r7, #5]
 80030a8:	461a      	mov	r2, r3
 80030aa:	2104      	movs	r1, #4
 80030ac:	2082      	movs	r0, #130	@ 0x82
 80030ae:	f000 f9cb 	bl	8003448 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80030b2:	2249      	movs	r2, #73	@ 0x49
 80030b4:	2120      	movs	r1, #32
 80030b6:	2082      	movs	r0, #130	@ 0x82
 80030b8:	f000 f9c6 	bl	8003448 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80030bc:	2002      	movs	r0, #2
 80030be:	f000 fbd3 	bl	8003868 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80030c2:	2201      	movs	r2, #1
 80030c4:	2121      	movs	r1, #33	@ 0x21
 80030c6:	2082      	movs	r0, #130	@ 0x82
 80030c8:	f000 f9be 	bl	8003448 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80030cc:	2017      	movs	r0, #23
 80030ce:	f000 f83c 	bl	800314a <STMPE811_Read>
 80030d2:	4603      	mov	r3, r0
 80030d4:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80030d6:	797b      	ldrb	r3, [r7, #5]
 80030d8:	f043 031e 	orr.w	r3, r3, #30
 80030dc:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80030de:	797b      	ldrb	r3, [r7, #5]
 80030e0:	461a      	mov	r2, r3
 80030e2:	2117      	movs	r1, #23
 80030e4:	2082      	movs	r0, #130	@ 0x82
 80030e6:	f000 f9af 	bl	8003448 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80030ea:	229a      	movs	r2, #154	@ 0x9a
 80030ec:	2141      	movs	r1, #65	@ 0x41
 80030ee:	2082      	movs	r0, #130	@ 0x82
 80030f0:	f000 f9aa 	bl	8003448 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80030f4:	2201      	movs	r2, #1
 80030f6:	214a      	movs	r1, #74	@ 0x4a
 80030f8:	2082      	movs	r0, #130	@ 0x82
 80030fa:	f000 f9a5 	bl	8003448 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80030fe:	2201      	movs	r2, #1
 8003100:	214b      	movs	r1, #75	@ 0x4b
 8003102:	2082      	movs	r0, #130	@ 0x82
 8003104:	f000 f9a0 	bl	8003448 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003108:	2200      	movs	r2, #0
 800310a:	214b      	movs	r1, #75	@ 0x4b
 800310c:	2082      	movs	r0, #130	@ 0x82
 800310e:	f000 f99b 	bl	8003448 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8003112:	2201      	movs	r2, #1
 8003114:	2156      	movs	r1, #86	@ 0x56
 8003116:	2082      	movs	r0, #130	@ 0x82
 8003118:	f000 f996 	bl	8003448 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 800311c:	2201      	movs	r2, #1
 800311e:	2158      	movs	r1, #88	@ 0x58
 8003120:	2082      	movs	r0, #130	@ 0x82
 8003122:	f000 f991 	bl	8003448 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8003126:	2203      	movs	r2, #3
 8003128:	2140      	movs	r1, #64	@ 0x40
 800312a:	2082      	movs	r0, #130	@ 0x82
 800312c:	f000 f98c 	bl	8003448 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8003130:	22ff      	movs	r2, #255	@ 0xff
 8003132:	210b      	movs	r1, #11
 8003134:	2082      	movs	r0, #130	@ 0x82
 8003136:	f000 f987 	bl	8003448 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800313a:	20c8      	movs	r0, #200	@ 0xc8
 800313c:	f000 fb94 	bl	8003868 <HAL_Delay>

    return STMPE811_State_Ok;
 8003140:	2302      	movs	r3, #2

}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <STMPE811_Read>:




uint8_t STMPE811_Read(uint8_t reg)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	4603      	mov	r3, r0
 8003152:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8003154:	f107 020f 	add.w	r2, r7, #15
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	4619      	mov	r1, r3
 800315c:	2082      	movs	r0, #130	@ 0x82
 800315e:	f000 f99d 	bl	800349c <I2C3_Read>

    return readData;
 8003162:	7bfb      	ldrb	r3, [r7, #15]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	791a      	ldrb	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 800317c:	2040      	movs	r0, #64	@ 0x40
 800317e:	f7ff ffe4 	bl	800314a <STMPE811_Read>
 8003182:	4603      	mov	r3, r0
 8003184:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8003186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800318a:	2b00      	cmp	r3, #0
 800318c:	db0e      	blt.n	80031ac <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003194:	2201      	movs	r2, #1
 8003196:	214b      	movs	r1, #75	@ 0x4b
 8003198:	2082      	movs	r0, #130	@ 0x82
 800319a:	f000 f955 	bl	8003448 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800319e:	2200      	movs	r2, #0
 80031a0:	214b      	movs	r1, #75	@ 0x4b
 80031a2:	2082      	movs	r0, #130	@ 0x82
 80031a4:	f000 f950 	bl	8003448 <I2C3_Write>

        return STMPE811_State_Released;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0a7      	b.n	80032fc <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	799b      	ldrb	r3, [r3, #6]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d117      	bne.n	80031e4 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f9b7 	bl	800352c <TM_STMPE811_ReadX>
 80031be:	4603      	mov	r3, r0
 80031c0:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	885b      	ldrh	r3, [r3, #2]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fa0c 	bl	80035ec <TM_STMPE811_ReadY>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80031da:	3301      	adds	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	805a      	strh	r2, [r3, #2]
 80031e2:	e048      	b.n	8003276 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	799b      	ldrb	r3, [r3, #6]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d112      	bne.n	8003212 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 f99b 	bl	800352c <TM_STMPE811_ReadX>
 80031f6:	4603      	mov	r3, r0
 80031f8:	461a      	mov	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	885b      	ldrh	r3, [r3, #2]
 8003202:	4618      	mov	r0, r3
 8003204:	f000 f9f2 	bl	80035ec <TM_STMPE811_ReadY>
 8003208:	4603      	mov	r3, r0
 800320a:	461a      	mov	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	805a      	strh	r2, [r3, #2]
 8003210:	e031      	b.n	8003276 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	799b      	ldrb	r3, [r3, #6]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d115      	bne.n	8003246 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	885b      	ldrh	r3, [r3, #2]
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f984 	bl	800352c <TM_STMPE811_ReadX>
 8003224:	4603      	mov	r3, r0
 8003226:	461a      	mov	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f9db 	bl	80035ec <TM_STMPE811_ReadY>
 8003236:	4603      	mov	r3, r0
 8003238:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800323c:	3301      	adds	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	801a      	strh	r2, [r3, #0]
 8003244:	e017      	b.n	8003276 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	799b      	ldrb	r3, [r3, #6]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d113      	bne.n	8003276 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f96a 	bl	800352c <TM_STMPE811_ReadX>
 8003258:	4603      	mov	r3, r0
 800325a:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800325e:	b29a      	uxth	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f000 f9bf 	bl	80035ec <TM_STMPE811_ReadY>
 800326e:	4603      	mov	r3, r0
 8003270:	461a      	mov	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003276:	2201      	movs	r2, #1
 8003278:	214b      	movs	r1, #75	@ 0x4b
 800327a:	2082      	movs	r0, #130	@ 0x82
 800327c:	f000 f8e4 	bl	8003448 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003280:	2200      	movs	r2, #0
 8003282:	214b      	movs	r1, #75	@ 0x4b
 8003284:	2082      	movs	r0, #130	@ 0x82
 8003286:	f000 f8df 	bl	8003448 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	799b      	ldrb	r3, [r3, #6]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <STMPE811_ReadTouch+0x12e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	799b      	ldrb	r3, [r3, #6]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d115      	bne.n	80032c6 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d027      	beq.n	80032f2 <STMPE811_ReadTouch+0x186>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	2bee      	cmp	r3, #238	@ 0xee
 80032a8:	d823      	bhi.n	80032f2 <STMPE811_ReadTouch+0x186>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	885b      	ldrh	r3, [r3, #2]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01f      	beq.n	80032f2 <STMPE811_ReadTouch+0x186>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	885b      	ldrh	r3, [r3, #2]
 80032b6:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80032ba:	d81a      	bhi.n	80032f2 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e01a      	b.n	80032fc <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d012      	beq.n	80032f4 <STMPE811_ReadTouch+0x188>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80032d6:	d80d      	bhi.n	80032f4 <STMPE811_ReadTouch+0x188>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	885b      	ldrh	r3, [r3, #2]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d009      	beq.n	80032f4 <STMPE811_ReadTouch+0x188>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	885b      	ldrh	r3, [r3, #2]
 80032e4:	2bee      	cmp	r3, #238	@ 0xee
 80032e6:	d805      	bhi.n	80032f4 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e004      	b.n	80032fc <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80032f2:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 80032fa:	2301      	movs	r3, #1
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8003308:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003310:	bf00      	nop
 8003312:	e7fd      	b.n	8003310 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20025bfc 	.word	0x20025bfc

08003324 <I2C3_Init>:

static void I2C3_Init()
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	4b18      	ldr	r3, [pc, #96]	@ (8003390 <I2C3_Init+0x6c>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	4a17      	ldr	r2, [pc, #92]	@ (8003390 <I2C3_Init+0x6c>)
 8003334:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003338:	6413      	str	r3, [r2, #64]	@ 0x40
 800333a:	4b15      	ldr	r3, [pc, #84]	@ (8003390 <I2C3_Init+0x6c>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8003346:	4b13      	ldr	r3, [pc, #76]	@ (8003394 <I2C3_Init+0x70>)
 8003348:	4a13      	ldr	r2, [pc, #76]	@ (8003398 <I2C3_Init+0x74>)
 800334a:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 800334c:	4b11      	ldr	r3, [pc, #68]	@ (8003394 <I2C3_Init+0x70>)
 800334e:	4a13      	ldr	r2, [pc, #76]	@ (800339c <I2C3_Init+0x78>)
 8003350:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003352:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <I2C3_Init+0x70>)
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8003358:	4b0e      	ldr	r3, [pc, #56]	@ (8003394 <I2C3_Init+0x70>)
 800335a:	2200      	movs	r2, #0
 800335c:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800335e:	4b0d      	ldr	r3, [pc, #52]	@ (8003394 <I2C3_Init+0x70>)
 8003360:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003364:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8003366:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <I2C3_Init+0x70>)
 8003368:	2200      	movs	r2, #0
 800336a:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800336c:	4b09      	ldr	r3, [pc, #36]	@ (8003394 <I2C3_Init+0x70>)
 800336e:	2200      	movs	r2, #0
 8003370:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8003372:	4808      	ldr	r0, [pc, #32]	@ (8003394 <I2C3_Init+0x70>)
 8003374:	f000 feb0 	bl	80040d8 <HAL_I2C_Init>
 8003378:	4603      	mov	r3, r0
 800337a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8003382:	bf00      	nop
 8003384:	e7fd      	b.n	8003382 <I2C3_Init+0x5e>
    }
    return;
 8003386:	bf00      	nop
}
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40023800 	.word	0x40023800
 8003394:	20025ba8 	.word	0x20025ba8
 8003398:	40005c00 	.word	0x40005c00
 800339c:	000186a0 	.word	0x000186a0

080033a0 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a6:	f107 030c 	add.w	r3, r7, #12
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	605a      	str	r2, [r3, #4]
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	60da      	str	r2, [r3, #12]
 80033b4:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	4b20      	ldr	r3, [pc, #128]	@ (800343c <I2C3_MspInit+0x9c>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033be:	4a1f      	ldr	r2, [pc, #124]	@ (800343c <I2C3_MspInit+0x9c>)
 80033c0:	f043 0304 	orr.w	r3, r3, #4
 80033c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033c6:	4b1d      	ldr	r3, [pc, #116]	@ (800343c <I2C3_MspInit+0x9c>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	4b19      	ldr	r3, [pc, #100]	@ (800343c <I2C3_MspInit+0x9c>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033da:	4a18      	ldr	r2, [pc, #96]	@ (800343c <I2C3_MspInit+0x9c>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033e2:	4b16      	ldr	r3, [pc, #88]	@ (800343c <I2C3_MspInit+0x9c>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	607b      	str	r3, [r7, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80033ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033f4:	2312      	movs	r3, #18
 80033f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003400:	2304      	movs	r3, #4
 8003402:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003404:	f107 030c 	add.w	r3, r7, #12
 8003408:	4619      	mov	r1, r3
 800340a:	480d      	ldr	r0, [pc, #52]	@ (8003440 <I2C3_MspInit+0xa0>)
 800340c:	f000 fb62 	bl	8003ad4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003410:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003414:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003416:	2312      	movs	r3, #18
 8003418:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341e:	2300      	movs	r3, #0
 8003420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003422:	2304      	movs	r3, #4
 8003424:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003426:	f107 030c 	add.w	r3, r7, #12
 800342a:	4619      	mov	r1, r3
 800342c:	4805      	ldr	r0, [pc, #20]	@ (8003444 <I2C3_MspInit+0xa4>)
 800342e:	f000 fb51 	bl	8003ad4 <HAL_GPIO_Init>
    
}
 8003432:	bf00      	nop
 8003434:	3720      	adds	r7, #32
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800
 8003440:	40020800 	.word	0x40020800
 8003444:	40020000 	.word	0x40020000

08003448 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af04      	add	r7, sp, #16
 800344e:	4603      	mov	r3, r0
 8003450:	80fb      	strh	r3, [r7, #6]
 8003452:	460b      	mov	r3, r1
 8003454:	717b      	strb	r3, [r7, #5]
 8003456:	4613      	mov	r3, r2
 8003458:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800345a:	793b      	ldrb	r3, [r7, #4]
 800345c:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800345e:	797b      	ldrb	r3, [r7, #5]
 8003460:	b29a      	uxth	r2, r3
 8003462:	88f9      	ldrh	r1, [r7, #6]
 8003464:	4b0a      	ldr	r3, [pc, #40]	@ (8003490 <I2C3_Write+0x48>)
 8003466:	9302      	str	r3, [sp, #8]
 8003468:	2301      	movs	r3, #1
 800346a:	9301      	str	r3, [sp, #4]
 800346c:	f107 030f 	add.w	r3, r7, #15
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2301      	movs	r3, #1
 8003474:	4807      	ldr	r0, [pc, #28]	@ (8003494 <I2C3_Write+0x4c>)
 8003476:	f000 ff73 	bl	8004360 <HAL_I2C_Mem_Write>
 800347a:	4603      	mov	r3, r0
 800347c:	461a      	mov	r2, r3
 800347e:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <I2C3_Write+0x50>)
 8003480:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003482:	f7ff ff3f 	bl	8003304 <verifyHAL_I2C_IS_OKAY>
}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	0003d090 	.word	0x0003d090
 8003494:	20025ba8 	.word	0x20025ba8
 8003498:	20025bfc 	.word	0x20025bfc

0800349c <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af04      	add	r7, sp, #16
 80034a2:	4603      	mov	r3, r0
 80034a4:	603a      	str	r2, [r7, #0]
 80034a6:	71fb      	strb	r3, [r7, #7]
 80034a8:	460b      	mov	r3, r1
 80034aa:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	b299      	uxth	r1, r3
 80034b0:	79bb      	ldrb	r3, [r7, #6]
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	4b09      	ldr	r3, [pc, #36]	@ (80034dc <I2C3_Read+0x40>)
 80034b6:	9302      	str	r3, [sp, #8]
 80034b8:	2301      	movs	r3, #1
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2301      	movs	r3, #1
 80034c2:	4807      	ldr	r0, [pc, #28]	@ (80034e0 <I2C3_Read+0x44>)
 80034c4:	f001 f846 	bl	8004554 <HAL_I2C_Mem_Read>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461a      	mov	r2, r3
 80034cc:	4b05      	ldr	r3, [pc, #20]	@ (80034e4 <I2C3_Read+0x48>)
 80034ce:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80034d0:	f7ff ff18 	bl	8003304 <verifyHAL_I2C_IS_OKAY>
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	0003d090 	.word	0x0003d090
 80034e0:	20025ba8 	.word	0x20025ba8
 80034e4:	20025bfc 	.word	0x20025bfc

080034e8 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af04      	add	r7, sp, #16
 80034ee:	603a      	str	r2, [r7, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
 80034f6:	460b      	mov	r3, r1
 80034f8:	71bb      	strb	r3, [r7, #6]
 80034fa:	4613      	mov	r3, r2
 80034fc:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	b299      	uxth	r1, r3
 8003502:	79bb      	ldrb	r3, [r7, #6]
 8003504:	b29a      	uxth	r2, r3
 8003506:	4b07      	ldr	r3, [pc, #28]	@ (8003524 <I2C3_MulitByteRead+0x3c>)
 8003508:	9302      	str	r3, [sp, #8]
 800350a:	88bb      	ldrh	r3, [r7, #4]
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	2301      	movs	r3, #1
 8003514:	4804      	ldr	r0, [pc, #16]	@ (8003528 <I2C3_MulitByteRead+0x40>)
 8003516:	f001 f81d 	bl	8004554 <HAL_I2C_Mem_Read>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	0003d090 	.word	0x0003d090
 8003528:	20025ba8 	.word	0x20025ba8

0800352c <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8003536:	204d      	movs	r0, #77	@ 0x4d
 8003538:	f7ff fe07 	bl	800314a <STMPE811_Read>
 800353c:	4603      	mov	r3, r0
 800353e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003540:	204e      	movs	r0, #78	@ 0x4e
 8003542:	f7ff fe02 	bl	800314a <STMPE811_Read>
 8003546:	4603      	mov	r3, r0
 8003548:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800354a:	7a7b      	ldrb	r3, [r7, #9]
 800354c:	b21b      	sxth	r3, r3
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	b21a      	sxth	r2, r3
 8003552:	7a3b      	ldrb	r3, [r7, #8]
 8003554:	b21b      	sxth	r3, r3
 8003556:	4313      	orrs	r3, r2
 8003558:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800355a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800355e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003562:	4293      	cmp	r3, r2
 8003564:	dc06      	bgt.n	8003574 <TM_STMPE811_ReadX+0x48>
        val = 3900 - val;
 8003566:	89fb      	ldrh	r3, [r7, #14]
 8003568:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800356c:	330c      	adds	r3, #12
 800356e:	b29b      	uxth	r3, r3
 8003570:	81fb      	strh	r3, [r7, #14]
 8003572:	e005      	b.n	8003580 <TM_STMPE811_ReadX+0x54>
    } else {
        val = 3800 - val;
 8003574:	89fb      	ldrh	r3, [r7, #14]
 8003576:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800357a:	3308      	adds	r3, #8
 800357c:	b29b      	uxth	r3, r3
 800357e:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8003580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003584:	4a18      	ldr	r2, [pc, #96]	@ (80035e8 <TM_STMPE811_ReadX+0xbc>)
 8003586:	fb82 1203 	smull	r1, r2, r2, r3
 800358a:	441a      	add	r2, r3
 800358c:	10d2      	asrs	r2, r2, #3
 800358e:	17db      	asrs	r3, r3, #31
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8003594:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003598:	2bef      	cmp	r3, #239	@ 0xef
 800359a:	dd02      	ble.n	80035a2 <TM_STMPE811_ReadX+0x76>
        val = 239;
 800359c:	23ef      	movs	r3, #239	@ 0xef
 800359e:	81fb      	strh	r3, [r7, #14]
 80035a0:	e005      	b.n	80035ae <TM_STMPE811_ReadX+0x82>
    } else if (val < 0) {
 80035a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	da01      	bge.n	80035ae <TM_STMPE811_ReadX+0x82>
        val = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80035ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	dd05      	ble.n	80035c4 <TM_STMPE811_ReadX+0x98>
 80035b8:	89fa      	ldrh	r2, [r7, #14]
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	b29b      	uxth	r3, r3
 80035c0:	b21b      	sxth	r3, r3
 80035c2:	e004      	b.n	80035ce <TM_STMPE811_ReadX+0xa2>
 80035c4:	89fb      	ldrh	r3, [r7, #14]
 80035c6:	88fa      	ldrh	r2, [r7, #6]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	b21b      	sxth	r3, r3
 80035ce:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80035d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	dd01      	ble.n	80035dc <TM_STMPE811_ReadX+0xb0>
        return val;
 80035d8:	89fb      	ldrh	r3, [r7, #14]
 80035da:	e000      	b.n	80035de <TM_STMPE811_ReadX+0xb2>
    }
    return x;
 80035dc:	88fb      	ldrh	r3, [r7, #6]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	88888889 	.word	0x88888889

080035ec <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80035f6:	204f      	movs	r0, #79	@ 0x4f
 80035f8:	f7ff fda7 	bl	800314a <STMPE811_Read>
 80035fc:	4603      	mov	r3, r0
 80035fe:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003600:	2050      	movs	r0, #80	@ 0x50
 8003602:	f7ff fda2 	bl	800314a <STMPE811_Read>
 8003606:	4603      	mov	r3, r0
 8003608:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800360a:	7a7b      	ldrb	r3, [r7, #9]
 800360c:	b21b      	sxth	r3, r3
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	b21a      	sxth	r2, r3
 8003612:	7a3b      	ldrb	r3, [r7, #8]
 8003614:	b21b      	sxth	r3, r3
 8003616:	4313      	orrs	r3, r2
 8003618:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 800361a:	89fb      	ldrh	r3, [r7, #14]
 800361c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003620:	b29b      	uxth	r3, r3
 8003622:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003624:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003628:	4a18      	ldr	r2, [pc, #96]	@ (800368c <TM_STMPE811_ReadY+0xa0>)
 800362a:	fb82 1203 	smull	r1, r2, r2, r3
 800362e:	1052      	asrs	r2, r2, #1
 8003630:	17db      	asrs	r3, r3, #31
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003636:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800363a:	2b00      	cmp	r3, #0
 800363c:	dc02      	bgt.n	8003644 <TM_STMPE811_ReadY+0x58>
        val = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	81fb      	strh	r3, [r7, #14]
 8003642:	e007      	b.n	8003654 <TM_STMPE811_ReadY+0x68>
    } else if (val >= 320) {
 8003644:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003648:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800364c:	db02      	blt.n	8003654 <TM_STMPE811_ReadY+0x68>
        val = 319;
 800364e:	f240 133f 	movw	r3, #319	@ 0x13f
 8003652:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003654:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003658:	88fb      	ldrh	r3, [r7, #6]
 800365a:	429a      	cmp	r2, r3
 800365c:	dd05      	ble.n	800366a <TM_STMPE811_ReadY+0x7e>
 800365e:	89fa      	ldrh	r2, [r7, #14]
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	b29b      	uxth	r3, r3
 8003666:	b21b      	sxth	r3, r3
 8003668:	e004      	b.n	8003674 <TM_STMPE811_ReadY+0x88>
 800366a:	89fb      	ldrh	r3, [r7, #14]
 800366c:	88fa      	ldrh	r2, [r7, #6]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	b29b      	uxth	r3, r3
 8003672:	b21b      	sxth	r3, r3
 8003674:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8003676:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800367a:	2b04      	cmp	r3, #4
 800367c:	dd01      	ble.n	8003682 <TM_STMPE811_ReadY+0x96>
        return val;
 800367e:	89fb      	ldrh	r3, [r7, #14]
 8003680:	e000      	b.n	8003684 <TM_STMPE811_ReadY+0x98>
    }
    return y;
 8003682:	88fb      	ldrh	r3, [r7, #6]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	2e8ba2e9 	.word	0x2e8ba2e9

08003690 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
	...

080036a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036a8:	4a14      	ldr	r2, [pc, #80]	@ (80036fc <_sbrk+0x5c>)
 80036aa:	4b15      	ldr	r3, [pc, #84]	@ (8003700 <_sbrk+0x60>)
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036b4:	4b13      	ldr	r3, [pc, #76]	@ (8003704 <_sbrk+0x64>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d102      	bne.n	80036c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036bc:	4b11      	ldr	r3, [pc, #68]	@ (8003704 <_sbrk+0x64>)
 80036be:	4a12      	ldr	r2, [pc, #72]	@ (8003708 <_sbrk+0x68>)
 80036c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036c2:	4b10      	ldr	r3, [pc, #64]	@ (8003704 <_sbrk+0x64>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4413      	add	r3, r2
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d207      	bcs.n	80036e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036d0:	f003 fcee 	bl	80070b0 <__errno>
 80036d4:	4603      	mov	r3, r0
 80036d6:	220c      	movs	r2, #12
 80036d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036da:	f04f 33ff 	mov.w	r3, #4294967295
 80036de:	e009      	b.n	80036f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036e0:	4b08      	ldr	r3, [pc, #32]	@ (8003704 <_sbrk+0x64>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036e6:	4b07      	ldr	r3, [pc, #28]	@ (8003704 <_sbrk+0x64>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	4a05      	ldr	r2, [pc, #20]	@ (8003704 <_sbrk+0x64>)
 80036f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036f2:	68fb      	ldr	r3, [r7, #12]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20030000 	.word	0x20030000
 8003700:	00000400 	.word	0x00000400
 8003704:	20025c00 	.word	0x20025c00
 8003708:	20025d50 	.word	0x20025d50

0800370c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003710:	4b06      	ldr	r3, [pc, #24]	@ (800372c <SystemInit+0x20>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003716:	4a05      	ldr	r2, [pc, #20]	@ (800372c <SystemInit+0x20>)
 8003718:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800371c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003720:	bf00      	nop
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003730:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003768 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003734:	f7ff ffea 	bl	800370c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003738:	480c      	ldr	r0, [pc, #48]	@ (800376c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800373a:	490d      	ldr	r1, [pc, #52]	@ (8003770 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800373c:	4a0d      	ldr	r2, [pc, #52]	@ (8003774 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800373e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003740:	e002      	b.n	8003748 <LoopCopyDataInit>

08003742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003746:	3304      	adds	r3, #4

08003748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800374a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800374c:	d3f9      	bcc.n	8003742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800374e:	4a0a      	ldr	r2, [pc, #40]	@ (8003778 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003750:	4c0a      	ldr	r4, [pc, #40]	@ (800377c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003754:	e001      	b.n	800375a <LoopFillZerobss>

08003756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003758:	3204      	adds	r2, #4

0800375a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800375a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800375c:	d3fb      	bcc.n	8003756 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800375e:	f003 fcad 	bl	80070bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003762:	f7fe f916 	bl	8001992 <main>
  bx  lr    
 8003766:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003768:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800376c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003770:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003774:	08008cb8 	.word	0x08008cb8
  ldr r2, =_sbss
 8003778:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800377c:	20025d50 	.word	0x20025d50

08003780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003780:	e7fe      	b.n	8003780 <ADC_IRQHandler>
	...

08003784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003788:	4b0e      	ldr	r3, [pc, #56]	@ (80037c4 <HAL_Init+0x40>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a0d      	ldr	r2, [pc, #52]	@ (80037c4 <HAL_Init+0x40>)
 800378e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003794:	4b0b      	ldr	r3, [pc, #44]	@ (80037c4 <HAL_Init+0x40>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a0a      	ldr	r2, [pc, #40]	@ (80037c4 <HAL_Init+0x40>)
 800379a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800379e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037a0:	4b08      	ldr	r3, [pc, #32]	@ (80037c4 <HAL_Init+0x40>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a07      	ldr	r2, [pc, #28]	@ (80037c4 <HAL_Init+0x40>)
 80037a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037ac:	2003      	movs	r0, #3
 80037ae:	f000 f94f 	bl	8003a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037b2:	2000      	movs	r0, #0
 80037b4:	f000 f808 	bl	80037c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037b8:	f7ff f988 	bl	8002acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40023c00 	.word	0x40023c00

080037c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037d0:	4b12      	ldr	r3, [pc, #72]	@ (800381c <HAL_InitTick+0x54>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b12      	ldr	r3, [pc, #72]	@ (8003820 <HAL_InitTick+0x58>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	4619      	mov	r1, r3
 80037da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037de:	fbb3 f3f1 	udiv	r3, r3, r1
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 f967 	bl	8003aba <HAL_SYSTICK_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e00e      	b.n	8003814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b0f      	cmp	r3, #15
 80037fa:	d80a      	bhi.n	8003812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037fc:	2200      	movs	r2, #0
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	f000 f92f 	bl	8003a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003808:	4a06      	ldr	r2, [pc, #24]	@ (8003824 <HAL_InitTick+0x5c>)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	e000      	b.n	8003814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
}
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20000014 	.word	0x20000014
 8003820:	2000001c 	.word	0x2000001c
 8003824:	20000018 	.word	0x20000018

08003828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800382c:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <HAL_IncTick+0x20>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	4b06      	ldr	r3, [pc, #24]	@ (800384c <HAL_IncTick+0x24>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4413      	add	r3, r2
 8003838:	4a04      	ldr	r2, [pc, #16]	@ (800384c <HAL_IncTick+0x24>)
 800383a:	6013      	str	r3, [r2, #0]
}
 800383c:	bf00      	nop
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	2000001c 	.word	0x2000001c
 800384c:	20025c04 	.word	0x20025c04

08003850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return uwTick;
 8003854:	4b03      	ldr	r3, [pc, #12]	@ (8003864 <HAL_GetTick+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20025c04 	.word	0x20025c04

08003868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003870:	f7ff ffee 	bl	8003850 <HAL_GetTick>
 8003874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d005      	beq.n	800388e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003882:	4b0a      	ldr	r3, [pc, #40]	@ (80038ac <HAL_Delay+0x44>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800388e:	bf00      	nop
 8003890:	f7ff ffde 	bl	8003850 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	429a      	cmp	r2, r3
 800389e:	d8f7      	bhi.n	8003890 <HAL_Delay+0x28>
  {
  }
}
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	2000001c 	.word	0x2000001c

080038b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038c0:	4b0c      	ldr	r3, [pc, #48]	@ (80038f4 <__NVIC_SetPriorityGrouping+0x44>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038cc:	4013      	ands	r3, r2
 80038ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038e2:	4a04      	ldr	r2, [pc, #16]	@ (80038f4 <__NVIC_SetPriorityGrouping+0x44>)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	60d3      	str	r3, [r2, #12]
}
 80038e8:	bf00      	nop
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038fc:	4b04      	ldr	r3, [pc, #16]	@ (8003910 <__NVIC_GetPriorityGrouping+0x18>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	0a1b      	lsrs	r3, r3, #8
 8003902:	f003 0307 	and.w	r3, r3, #7
}
 8003906:	4618      	mov	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	2b00      	cmp	r3, #0
 8003924:	db0b      	blt.n	800393e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	f003 021f 	and.w	r2, r3, #31
 800392c:	4907      	ldr	r1, [pc, #28]	@ (800394c <__NVIC_EnableIRQ+0x38>)
 800392e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	2001      	movs	r0, #1
 8003936:	fa00 f202 	lsl.w	r2, r0, r2
 800393a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	e000e100 	.word	0xe000e100

08003950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	6039      	str	r1, [r7, #0]
 800395a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800395c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003960:	2b00      	cmp	r3, #0
 8003962:	db0a      	blt.n	800397a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	b2da      	uxtb	r2, r3
 8003968:	490c      	ldr	r1, [pc, #48]	@ (800399c <__NVIC_SetPriority+0x4c>)
 800396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396e:	0112      	lsls	r2, r2, #4
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	440b      	add	r3, r1
 8003974:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003978:	e00a      	b.n	8003990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	b2da      	uxtb	r2, r3
 800397e:	4908      	ldr	r1, [pc, #32]	@ (80039a0 <__NVIC_SetPriority+0x50>)
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	3b04      	subs	r3, #4
 8003988:	0112      	lsls	r2, r2, #4
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	440b      	add	r3, r1
 800398e:	761a      	strb	r2, [r3, #24]
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000e100 	.word	0xe000e100
 80039a0:	e000ed00 	.word	0xe000ed00

080039a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b089      	sub	sp, #36	@ 0x24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f1c3 0307 	rsb	r3, r3, #7
 80039be:	2b04      	cmp	r3, #4
 80039c0:	bf28      	it	cs
 80039c2:	2304      	movcs	r3, #4
 80039c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	3304      	adds	r3, #4
 80039ca:	2b06      	cmp	r3, #6
 80039cc:	d902      	bls.n	80039d4 <NVIC_EncodePriority+0x30>
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3b03      	subs	r3, #3
 80039d2:	e000      	b.n	80039d6 <NVIC_EncodePriority+0x32>
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d8:	f04f 32ff 	mov.w	r2, #4294967295
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43da      	mvns	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	401a      	ands	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039ec:	f04f 31ff 	mov.w	r1, #4294967295
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	fa01 f303 	lsl.w	r3, r1, r3
 80039f6:	43d9      	mvns	r1, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039fc:	4313      	orrs	r3, r2
         );
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3724      	adds	r7, #36	@ 0x24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a1c:	d301      	bcc.n	8003a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e00f      	b.n	8003a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a22:	4a0a      	ldr	r2, [pc, #40]	@ (8003a4c <SysTick_Config+0x40>)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a2a:	210f      	movs	r1, #15
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a30:	f7ff ff8e 	bl	8003950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a34:	4b05      	ldr	r3, [pc, #20]	@ (8003a4c <SysTick_Config+0x40>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a3a:	4b04      	ldr	r3, [pc, #16]	@ (8003a4c <SysTick_Config+0x40>)
 8003a3c:	2207      	movs	r2, #7
 8003a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	e000e010 	.word	0xe000e010

08003a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff ff29 	bl	80038b0 <__NVIC_SetPriorityGrouping>
}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b086      	sub	sp, #24
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a78:	f7ff ff3e 	bl	80038f8 <__NVIC_GetPriorityGrouping>
 8003a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	6978      	ldr	r0, [r7, #20]
 8003a84:	f7ff ff8e 	bl	80039a4 <NVIC_EncodePriority>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a8e:	4611      	mov	r1, r2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ff5d 	bl	8003950 <__NVIC_SetPriority>
}
 8003a96:	bf00      	nop
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ff31 	bl	8003914 <__NVIC_EnableIRQ>
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff ffa2 	bl	8003a0c <SysTick_Config>
 8003ac8:	4603      	mov	r3, r0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b089      	sub	sp, #36	@ 0x24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	e177      	b.n	8003de0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003af0:	2201      	movs	r2, #1
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4013      	ands	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	f040 8166 	bne.w	8003dda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d005      	beq.n	8003b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d130      	bne.n	8003b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	2203      	movs	r2, #3
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f003 0201 	and.w	r2, r3, #1
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d017      	beq.n	8003bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d123      	bne.n	8003c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	08da      	lsrs	r2, r3, #3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3208      	adds	r2, #8
 8003bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	220f      	movs	r2, #15
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	08da      	lsrs	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3208      	adds	r2, #8
 8003c12:	69b9      	ldr	r1, [r7, #24]
 8003c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	2203      	movs	r2, #3
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 0203 	and.w	r2, r3, #3
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80c0 	beq.w	8003dda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	4b66      	ldr	r3, [pc, #408]	@ (8003df8 <HAL_GPIO_Init+0x324>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	4a65      	ldr	r2, [pc, #404]	@ (8003df8 <HAL_GPIO_Init+0x324>)
 8003c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c6a:	4b63      	ldr	r3, [pc, #396]	@ (8003df8 <HAL_GPIO_Init+0x324>)
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c76:	4a61      	ldr	r2, [pc, #388]	@ (8003dfc <HAL_GPIO_Init+0x328>)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	089b      	lsrs	r3, r3, #2
 8003c7c:	3302      	adds	r3, #2
 8003c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	220f      	movs	r2, #15
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43db      	mvns	r3, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4013      	ands	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a58      	ldr	r2, [pc, #352]	@ (8003e00 <HAL_GPIO_Init+0x32c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d037      	beq.n	8003d12 <HAL_GPIO_Init+0x23e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a57      	ldr	r2, [pc, #348]	@ (8003e04 <HAL_GPIO_Init+0x330>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d031      	beq.n	8003d0e <HAL_GPIO_Init+0x23a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a56      	ldr	r2, [pc, #344]	@ (8003e08 <HAL_GPIO_Init+0x334>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d02b      	beq.n	8003d0a <HAL_GPIO_Init+0x236>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a55      	ldr	r2, [pc, #340]	@ (8003e0c <HAL_GPIO_Init+0x338>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d025      	beq.n	8003d06 <HAL_GPIO_Init+0x232>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a54      	ldr	r2, [pc, #336]	@ (8003e10 <HAL_GPIO_Init+0x33c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d01f      	beq.n	8003d02 <HAL_GPIO_Init+0x22e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a53      	ldr	r2, [pc, #332]	@ (8003e14 <HAL_GPIO_Init+0x340>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d019      	beq.n	8003cfe <HAL_GPIO_Init+0x22a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a52      	ldr	r2, [pc, #328]	@ (8003e18 <HAL_GPIO_Init+0x344>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_GPIO_Init+0x226>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a51      	ldr	r2, [pc, #324]	@ (8003e1c <HAL_GPIO_Init+0x348>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00d      	beq.n	8003cf6 <HAL_GPIO_Init+0x222>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a50      	ldr	r2, [pc, #320]	@ (8003e20 <HAL_GPIO_Init+0x34c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d007      	beq.n	8003cf2 <HAL_GPIO_Init+0x21e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a4f      	ldr	r2, [pc, #316]	@ (8003e24 <HAL_GPIO_Init+0x350>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d101      	bne.n	8003cee <HAL_GPIO_Init+0x21a>
 8003cea:	2309      	movs	r3, #9
 8003cec:	e012      	b.n	8003d14 <HAL_GPIO_Init+0x240>
 8003cee:	230a      	movs	r3, #10
 8003cf0:	e010      	b.n	8003d14 <HAL_GPIO_Init+0x240>
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	e00e      	b.n	8003d14 <HAL_GPIO_Init+0x240>
 8003cf6:	2307      	movs	r3, #7
 8003cf8:	e00c      	b.n	8003d14 <HAL_GPIO_Init+0x240>
 8003cfa:	2306      	movs	r3, #6
 8003cfc:	e00a      	b.n	8003d14 <HAL_GPIO_Init+0x240>
 8003cfe:	2305      	movs	r3, #5
 8003d00:	e008      	b.n	8003d14 <HAL_GPIO_Init+0x240>
 8003d02:	2304      	movs	r3, #4
 8003d04:	e006      	b.n	8003d14 <HAL_GPIO_Init+0x240>
 8003d06:	2303      	movs	r3, #3
 8003d08:	e004      	b.n	8003d14 <HAL_GPIO_Init+0x240>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e002      	b.n	8003d14 <HAL_GPIO_Init+0x240>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <HAL_GPIO_Init+0x240>
 8003d12:	2300      	movs	r3, #0
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	f002 0203 	and.w	r2, r2, #3
 8003d1a:	0092      	lsls	r2, r2, #2
 8003d1c:	4093      	lsls	r3, r2
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d24:	4935      	ldr	r1, [pc, #212]	@ (8003dfc <HAL_GPIO_Init+0x328>)
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	089b      	lsrs	r3, r3, #2
 8003d2a:	3302      	adds	r3, #2
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d32:	4b3d      	ldr	r3, [pc, #244]	@ (8003e28 <HAL_GPIO_Init+0x354>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d56:	4a34      	ldr	r2, [pc, #208]	@ (8003e28 <HAL_GPIO_Init+0x354>)
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d5c:	4b32      	ldr	r3, [pc, #200]	@ (8003e28 <HAL_GPIO_Init+0x354>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	43db      	mvns	r3, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d80:	4a29      	ldr	r2, [pc, #164]	@ (8003e28 <HAL_GPIO_Init+0x354>)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d86:	4b28      	ldr	r3, [pc, #160]	@ (8003e28 <HAL_GPIO_Init+0x354>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003daa:	4a1f      	ldr	r2, [pc, #124]	@ (8003e28 <HAL_GPIO_Init+0x354>)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003db0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e28 <HAL_GPIO_Init+0x354>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dd4:	4a14      	ldr	r2, [pc, #80]	@ (8003e28 <HAL_GPIO_Init+0x354>)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	61fb      	str	r3, [r7, #28]
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	2b0f      	cmp	r3, #15
 8003de4:	f67f ae84 	bls.w	8003af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003de8:	bf00      	nop
 8003dea:	bf00      	nop
 8003dec:	3724      	adds	r7, #36	@ 0x24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	40013800 	.word	0x40013800
 8003e00:	40020000 	.word	0x40020000
 8003e04:	40020400 	.word	0x40020400
 8003e08:	40020800 	.word	0x40020800
 8003e0c:	40020c00 	.word	0x40020c00
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40021400 	.word	0x40021400
 8003e18:	40021800 	.word	0x40021800
 8003e1c:	40021c00 	.word	0x40021c00
 8003e20:	40022000 	.word	0x40022000
 8003e24:	40022400 	.word	0x40022400
 8003e28:	40013c00 	.word	0x40013c00

08003e2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	e0d9      	b.n	8003ffc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e48:	2201      	movs	r2, #1
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4013      	ands	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	f040 80c9 	bne.w	8003ff6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003e64:	4a6b      	ldr	r2, [pc, #428]	@ (8004014 <HAL_GPIO_DeInit+0x1e8>)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	089b      	lsrs	r3, r3, #2
 8003e6a:	3302      	adds	r3, #2
 8003e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e70:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	220f      	movs	r2, #15
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	4013      	ands	r3, r2
 8003e84:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a63      	ldr	r2, [pc, #396]	@ (8004018 <HAL_GPIO_DeInit+0x1ec>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d037      	beq.n	8003efe <HAL_GPIO_DeInit+0xd2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a62      	ldr	r2, [pc, #392]	@ (800401c <HAL_GPIO_DeInit+0x1f0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d031      	beq.n	8003efa <HAL_GPIO_DeInit+0xce>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a61      	ldr	r2, [pc, #388]	@ (8004020 <HAL_GPIO_DeInit+0x1f4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d02b      	beq.n	8003ef6 <HAL_GPIO_DeInit+0xca>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a60      	ldr	r2, [pc, #384]	@ (8004024 <HAL_GPIO_DeInit+0x1f8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d025      	beq.n	8003ef2 <HAL_GPIO_DeInit+0xc6>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a5f      	ldr	r2, [pc, #380]	@ (8004028 <HAL_GPIO_DeInit+0x1fc>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d01f      	beq.n	8003eee <HAL_GPIO_DeInit+0xc2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a5e      	ldr	r2, [pc, #376]	@ (800402c <HAL_GPIO_DeInit+0x200>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d019      	beq.n	8003eea <HAL_GPIO_DeInit+0xbe>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a5d      	ldr	r2, [pc, #372]	@ (8004030 <HAL_GPIO_DeInit+0x204>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <HAL_GPIO_DeInit+0xba>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a5c      	ldr	r2, [pc, #368]	@ (8004034 <HAL_GPIO_DeInit+0x208>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00d      	beq.n	8003ee2 <HAL_GPIO_DeInit+0xb6>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a5b      	ldr	r2, [pc, #364]	@ (8004038 <HAL_GPIO_DeInit+0x20c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d007      	beq.n	8003ede <HAL_GPIO_DeInit+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a5a      	ldr	r2, [pc, #360]	@ (800403c <HAL_GPIO_DeInit+0x210>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d101      	bne.n	8003eda <HAL_GPIO_DeInit+0xae>
 8003ed6:	2309      	movs	r3, #9
 8003ed8:	e012      	b.n	8003f00 <HAL_GPIO_DeInit+0xd4>
 8003eda:	230a      	movs	r3, #10
 8003edc:	e010      	b.n	8003f00 <HAL_GPIO_DeInit+0xd4>
 8003ede:	2308      	movs	r3, #8
 8003ee0:	e00e      	b.n	8003f00 <HAL_GPIO_DeInit+0xd4>
 8003ee2:	2307      	movs	r3, #7
 8003ee4:	e00c      	b.n	8003f00 <HAL_GPIO_DeInit+0xd4>
 8003ee6:	2306      	movs	r3, #6
 8003ee8:	e00a      	b.n	8003f00 <HAL_GPIO_DeInit+0xd4>
 8003eea:	2305      	movs	r3, #5
 8003eec:	e008      	b.n	8003f00 <HAL_GPIO_DeInit+0xd4>
 8003eee:	2304      	movs	r3, #4
 8003ef0:	e006      	b.n	8003f00 <HAL_GPIO_DeInit+0xd4>
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e004      	b.n	8003f00 <HAL_GPIO_DeInit+0xd4>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e002      	b.n	8003f00 <HAL_GPIO_DeInit+0xd4>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <HAL_GPIO_DeInit+0xd4>
 8003efe:	2300      	movs	r3, #0
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	f002 0203 	and.w	r2, r2, #3
 8003f06:	0092      	lsls	r2, r2, #2
 8003f08:	4093      	lsls	r3, r2
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d132      	bne.n	8003f76 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003f10:	4b4b      	ldr	r3, [pc, #300]	@ (8004040 <HAL_GPIO_DeInit+0x214>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	43db      	mvns	r3, r3
 8003f18:	4949      	ldr	r1, [pc, #292]	@ (8004040 <HAL_GPIO_DeInit+0x214>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003f1e:	4b48      	ldr	r3, [pc, #288]	@ (8004040 <HAL_GPIO_DeInit+0x214>)
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	4946      	ldr	r1, [pc, #280]	@ (8004040 <HAL_GPIO_DeInit+0x214>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003f2c:	4b44      	ldr	r3, [pc, #272]	@ (8004040 <HAL_GPIO_DeInit+0x214>)
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	43db      	mvns	r3, r3
 8003f34:	4942      	ldr	r1, [pc, #264]	@ (8004040 <HAL_GPIO_DeInit+0x214>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003f3a:	4b41      	ldr	r3, [pc, #260]	@ (8004040 <HAL_GPIO_DeInit+0x214>)
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	493f      	ldr	r1, [pc, #252]	@ (8004040 <HAL_GPIO_DeInit+0x214>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	220f      	movs	r2, #15
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003f58:	4a2e      	ldr	r2, [pc, #184]	@ (8004014 <HAL_GPIO_DeInit+0x1e8>)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	089b      	lsrs	r3, r3, #2
 8003f5e:	3302      	adds	r3, #2
 8003f60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	43da      	mvns	r2, r3
 8003f68:	482a      	ldr	r0, [pc, #168]	@ (8004014 <HAL_GPIO_DeInit+0x1e8>)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	089b      	lsrs	r3, r3, #2
 8003f6e:	400a      	ands	r2, r1
 8003f70:	3302      	adds	r3, #2
 8003f72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	2103      	movs	r1, #3
 8003f80:	fa01 f303 	lsl.w	r3, r1, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	401a      	ands	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	08da      	lsrs	r2, r3, #3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3208      	adds	r2, #8
 8003f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	220f      	movs	r2, #15
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	08d2      	lsrs	r2, r2, #3
 8003fac:	4019      	ands	r1, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3208      	adds	r2, #8
 8003fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	2103      	movs	r1, #3
 8003fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	401a      	ands	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	2103      	movs	r1, #3
 8003fea:	fa01 f303 	lsl.w	r3, r1, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	401a      	ands	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2b0f      	cmp	r3, #15
 8004000:	f67f af22 	bls.w	8003e48 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40013800 	.word	0x40013800
 8004018:	40020000 	.word	0x40020000
 800401c:	40020400 	.word	0x40020400
 8004020:	40020800 	.word	0x40020800
 8004024:	40020c00 	.word	0x40020c00
 8004028:	40021000 	.word	0x40021000
 800402c:	40021400 	.word	0x40021400
 8004030:	40021800 	.word	0x40021800
 8004034:	40021c00 	.word	0x40021c00
 8004038:	40022000 	.word	0x40022000
 800403c:	40022400 	.word	0x40022400
 8004040:	40013c00 	.word	0x40013c00

08004044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	887b      	ldrh	r3, [r7, #2]
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
 8004060:	e001      	b.n	8004066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	807b      	strh	r3, [r7, #2]
 8004080:	4613      	mov	r3, r2
 8004082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004084:	787b      	ldrb	r3, [r7, #1]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004090:	e003      	b.n	800409a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004092:	887b      	ldrh	r3, [r7, #2]
 8004094:	041a      	lsls	r2, r3, #16
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	619a      	str	r2, [r3, #24]
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80040b2:	4b08      	ldr	r3, [pc, #32]	@ (80040d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d006      	beq.n	80040cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040be:	4a05      	ldr	r2, [pc, #20]	@ (80040d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040c0:	88fb      	ldrh	r3, [r7, #6]
 80040c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040c4:	88fb      	ldrh	r3, [r7, #6]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fc fdee 	bl	8000ca8 <HAL_GPIO_EXTI_Callback>
  }
}
 80040cc:	bf00      	nop
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40013c00 	.word	0x40013c00

080040d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e12b      	b.n	8004342 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7fe fd0c 	bl	8002b1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2224      	movs	r2, #36	@ 0x24
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0201 	bic.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800412a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800413a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800413c:	f001 ff82 	bl	8006044 <HAL_RCC_GetPCLK1Freq>
 8004140:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4a81      	ldr	r2, [pc, #516]	@ (800434c <HAL_I2C_Init+0x274>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d807      	bhi.n	800415c <HAL_I2C_Init+0x84>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4a80      	ldr	r2, [pc, #512]	@ (8004350 <HAL_I2C_Init+0x278>)
 8004150:	4293      	cmp	r3, r2
 8004152:	bf94      	ite	ls
 8004154:	2301      	movls	r3, #1
 8004156:	2300      	movhi	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	e006      	b.n	800416a <HAL_I2C_Init+0x92>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4a7d      	ldr	r2, [pc, #500]	@ (8004354 <HAL_I2C_Init+0x27c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	bf94      	ite	ls
 8004164:	2301      	movls	r3, #1
 8004166:	2300      	movhi	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e0e7      	b.n	8004342 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4a78      	ldr	r2, [pc, #480]	@ (8004358 <HAL_I2C_Init+0x280>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	0c9b      	lsrs	r3, r3, #18
 800417c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	430a      	orrs	r2, r1
 8004190:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4a6a      	ldr	r2, [pc, #424]	@ (800434c <HAL_I2C_Init+0x274>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d802      	bhi.n	80041ac <HAL_I2C_Init+0xd4>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	3301      	adds	r3, #1
 80041aa:	e009      	b.n	80041c0 <HAL_I2C_Init+0xe8>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	4a69      	ldr	r2, [pc, #420]	@ (800435c <HAL_I2C_Init+0x284>)
 80041b8:	fba2 2303 	umull	r2, r3, r2, r3
 80041bc:	099b      	lsrs	r3, r3, #6
 80041be:	3301      	adds	r3, #1
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	430b      	orrs	r3, r1
 80041c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80041d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	495c      	ldr	r1, [pc, #368]	@ (800434c <HAL_I2C_Init+0x274>)
 80041dc:	428b      	cmp	r3, r1
 80041de:	d819      	bhi.n	8004214 <HAL_I2C_Init+0x13c>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1e59      	subs	r1, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80041ee:	1c59      	adds	r1, r3, #1
 80041f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80041f4:	400b      	ands	r3, r1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_I2C_Init+0x138>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	1e59      	subs	r1, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	fbb1 f3f3 	udiv	r3, r1, r3
 8004208:	3301      	adds	r3, #1
 800420a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800420e:	e051      	b.n	80042b4 <HAL_I2C_Init+0x1dc>
 8004210:	2304      	movs	r3, #4
 8004212:	e04f      	b.n	80042b4 <HAL_I2C_Init+0x1dc>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d111      	bne.n	8004240 <HAL_I2C_Init+0x168>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	1e58      	subs	r0, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6859      	ldr	r1, [r3, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	440b      	add	r3, r1
 800422a:	fbb0 f3f3 	udiv	r3, r0, r3
 800422e:	3301      	adds	r3, #1
 8004230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004234:	2b00      	cmp	r3, #0
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	e012      	b.n	8004266 <HAL_I2C_Init+0x18e>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	1e58      	subs	r0, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6859      	ldr	r1, [r3, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	0099      	lsls	r1, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	fbb0 f3f3 	udiv	r3, r0, r3
 8004256:	3301      	adds	r3, #1
 8004258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800425c:	2b00      	cmp	r3, #0
 800425e:	bf0c      	ite	eq
 8004260:	2301      	moveq	r3, #1
 8004262:	2300      	movne	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_I2C_Init+0x196>
 800426a:	2301      	movs	r3, #1
 800426c:	e022      	b.n	80042b4 <HAL_I2C_Init+0x1dc>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10e      	bne.n	8004294 <HAL_I2C_Init+0x1bc>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1e58      	subs	r0, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6859      	ldr	r1, [r3, #4]
 800427e:	460b      	mov	r3, r1
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	440b      	add	r3, r1
 8004284:	fbb0 f3f3 	udiv	r3, r0, r3
 8004288:	3301      	adds	r3, #1
 800428a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800428e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004292:	e00f      	b.n	80042b4 <HAL_I2C_Init+0x1dc>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	1e58      	subs	r0, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6859      	ldr	r1, [r3, #4]
 800429c:	460b      	mov	r3, r1
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	0099      	lsls	r1, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042aa:	3301      	adds	r3, #1
 80042ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	6809      	ldr	r1, [r1, #0]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69da      	ldr	r2, [r3, #28]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80042e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6911      	ldr	r1, [r2, #16]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68d2      	ldr	r2, [r2, #12]
 80042ee:	4311      	orrs	r1, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	430b      	orrs	r3, r1
 80042f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	000186a0 	.word	0x000186a0
 8004350:	001e847f 	.word	0x001e847f
 8004354:	003d08ff 	.word	0x003d08ff
 8004358:	431bde83 	.word	0x431bde83
 800435c:	10624dd3 	.word	0x10624dd3

08004360 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af02      	add	r7, sp, #8
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	4608      	mov	r0, r1
 800436a:	4611      	mov	r1, r2
 800436c:	461a      	mov	r2, r3
 800436e:	4603      	mov	r3, r0
 8004370:	817b      	strh	r3, [r7, #10]
 8004372:	460b      	mov	r3, r1
 8004374:	813b      	strh	r3, [r7, #8]
 8004376:	4613      	mov	r3, r2
 8004378:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800437a:	f7ff fa69 	bl	8003850 <HAL_GetTick>
 800437e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b20      	cmp	r3, #32
 800438a:	f040 80d9 	bne.w	8004540 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	2319      	movs	r3, #25
 8004394:	2201      	movs	r2, #1
 8004396:	496d      	ldr	r1, [pc, #436]	@ (800454c <HAL_I2C_Mem_Write+0x1ec>)
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 fc8b 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
 80043a6:	e0cc      	b.n	8004542 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_I2C_Mem_Write+0x56>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e0c5      	b.n	8004542 <HAL_I2C_Mem_Write+0x1e2>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d007      	beq.n	80043dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2221      	movs	r2, #33	@ 0x21
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2240      	movs	r2, #64	@ 0x40
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a3a      	ldr	r2, [r7, #32]
 8004406:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800440c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4a4d      	ldr	r2, [pc, #308]	@ (8004550 <HAL_I2C_Mem_Write+0x1f0>)
 800441c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800441e:	88f8      	ldrh	r0, [r7, #6]
 8004420:	893a      	ldrh	r2, [r7, #8]
 8004422:	8979      	ldrh	r1, [r7, #10]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	9301      	str	r3, [sp, #4]
 8004428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	4603      	mov	r3, r0
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fac2 	bl	80049b8 <I2C_RequestMemoryWrite>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d052      	beq.n	80044e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e081      	b.n	8004542 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 fd50 	bl	8004ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00d      	beq.n	800446a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	2b04      	cmp	r3, #4
 8004454:	d107      	bne.n	8004466 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004464:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e06b      	b.n	8004542 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446e:	781a      	ldrb	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d11b      	bne.n	80044e0 <HAL_I2C_Mem_Write+0x180>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d017      	beq.n	80044e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	781a      	ldrb	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1aa      	bne.n	800443e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 fd43 	bl	8004f78 <I2C_WaitOnBTFFlagUntilTimeout>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00d      	beq.n	8004514 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d107      	bne.n	8004510 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800450e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e016      	b.n	8004542 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	e000      	b.n	8004542 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004540:	2302      	movs	r3, #2
  }
}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	00100002 	.word	0x00100002
 8004550:	ffff0000 	.word	0xffff0000

08004554 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08c      	sub	sp, #48	@ 0x30
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	4608      	mov	r0, r1
 800455e:	4611      	mov	r1, r2
 8004560:	461a      	mov	r2, r3
 8004562:	4603      	mov	r3, r0
 8004564:	817b      	strh	r3, [r7, #10]
 8004566:	460b      	mov	r3, r1
 8004568:	813b      	strh	r3, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800456e:	f7ff f96f 	bl	8003850 <HAL_GetTick>
 8004572:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b20      	cmp	r3, #32
 800457e:	f040 8214 	bne.w	80049aa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	2319      	movs	r3, #25
 8004588:	2201      	movs	r2, #1
 800458a:	497b      	ldr	r1, [pc, #492]	@ (8004778 <HAL_I2C_Mem_Read+0x224>)
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 fb91 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004598:	2302      	movs	r3, #2
 800459a:	e207      	b.n	80049ac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_I2C_Mem_Read+0x56>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e200      	b.n	80049ac <HAL_I2C_Mem_Read+0x458>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d007      	beq.n	80045d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2222      	movs	r2, #34	@ 0x22
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2240      	movs	r2, #64	@ 0x40
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004600:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4a5b      	ldr	r2, [pc, #364]	@ (800477c <HAL_I2C_Mem_Read+0x228>)
 8004610:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004612:	88f8      	ldrh	r0, [r7, #6]
 8004614:	893a      	ldrh	r2, [r7, #8]
 8004616:	8979      	ldrh	r1, [r7, #10]
 8004618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461a:	9301      	str	r3, [sp, #4]
 800461c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	4603      	mov	r3, r0
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fa5e 	bl	8004ae4 <I2C_RequestMemoryRead>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e1bc      	b.n	80049ac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	d113      	bne.n	8004662 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800463a:	2300      	movs	r3, #0
 800463c:	623b      	str	r3, [r7, #32]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	623b      	str	r3, [r7, #32]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	623b      	str	r3, [r7, #32]
 800464e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	e190      	b.n	8004984 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004666:	2b01      	cmp	r3, #1
 8004668:	d11b      	bne.n	80046a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004678:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467a:	2300      	movs	r3, #0
 800467c:	61fb      	str	r3, [r7, #28]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	e170      	b.n	8004984 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d11b      	bne.n	80046e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ca:	2300      	movs	r3, #0
 80046cc:	61bb      	str	r3, [r7, #24]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	61bb      	str	r3, [r7, #24]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	61bb      	str	r3, [r7, #24]
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	e150      	b.n	8004984 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80046f8:	e144      	b.n	8004984 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fe:	2b03      	cmp	r3, #3
 8004700:	f200 80f1 	bhi.w	80048e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004708:	2b01      	cmp	r3, #1
 800470a:	d123      	bne.n	8004754 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800470c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800470e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 fc79 	bl	8005008 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e145      	b.n	80049ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004752:	e117      	b.n	8004984 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004758:	2b02      	cmp	r3, #2
 800475a:	d14e      	bne.n	80047fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004762:	2200      	movs	r2, #0
 8004764:	4906      	ldr	r1, [pc, #24]	@ (8004780 <HAL_I2C_Mem_Read+0x22c>)
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 faa4 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e11a      	b.n	80049ac <HAL_I2C_Mem_Read+0x458>
 8004776:	bf00      	nop
 8004778:	00100002 	.word	0x00100002
 800477c:	ffff0000 	.word	0xffff0000
 8004780:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004792:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691a      	ldr	r2, [r3, #16]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047f8:	e0c4      	b.n	8004984 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004800:	2200      	movs	r2, #0
 8004802:	496c      	ldr	r1, [pc, #432]	@ (80049b4 <HAL_I2C_Mem_Read+0x460>)
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 fa55 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0cb      	b.n	80049ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004822:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485c:	2200      	movs	r2, #0
 800485e:	4955      	ldr	r1, [pc, #340]	@ (80049b4 <HAL_I2C_Mem_Read+0x460>)
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 fa27 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e09d      	b.n	80049ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800487e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691a      	ldr	r2, [r3, #16]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048bc:	b2d2      	uxtb	r2, r2
 80048be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048e4:	e04e      	b.n	8004984 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 fb8c 	bl	8005008 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e058      	b.n	80049ac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b04      	cmp	r3, #4
 8004938:	d124      	bne.n	8004984 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800493e:	2b03      	cmp	r3, #3
 8004940:	d107      	bne.n	8004952 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004950:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004988:	2b00      	cmp	r3, #0
 800498a:	f47f aeb6 	bne.w	80046fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	e000      	b.n	80049ac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80049aa:	2302      	movs	r3, #2
  }
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3728      	adds	r7, #40	@ 0x28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	00010004 	.word	0x00010004

080049b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	4608      	mov	r0, r1
 80049c2:	4611      	mov	r1, r2
 80049c4:	461a      	mov	r2, r3
 80049c6:	4603      	mov	r3, r0
 80049c8:	817b      	strh	r3, [r7, #10]
 80049ca:	460b      	mov	r3, r1
 80049cc:	813b      	strh	r3, [r7, #8]
 80049ce:	4613      	mov	r3, r2
 80049d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f960 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00d      	beq.n	8004a16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a08:	d103      	bne.n	8004a12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e05f      	b.n	8004ad6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a16:	897b      	ldrh	r3, [r7, #10]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a28:	6a3a      	ldr	r2, [r7, #32]
 8004a2a:	492d      	ldr	r1, [pc, #180]	@ (8004ae0 <I2C_RequestMemoryWrite+0x128>)
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f9bb 	bl	8004da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e04c      	b.n	8004ad6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a54:	6a39      	ldr	r1, [r7, #32]
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 fa46 	bl	8004ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00d      	beq.n	8004a7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d107      	bne.n	8004a7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e02b      	b.n	8004ad6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d105      	bne.n	8004a90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a84:	893b      	ldrh	r3, [r7, #8]
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	611a      	str	r2, [r3, #16]
 8004a8e:	e021      	b.n	8004ad4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a90:	893b      	ldrh	r3, [r7, #8]
 8004a92:	0a1b      	lsrs	r3, r3, #8
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa0:	6a39      	ldr	r1, [r7, #32]
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fa20 	bl	8004ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00d      	beq.n	8004aca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d107      	bne.n	8004ac6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ac4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e005      	b.n	8004ad6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004aca:	893b      	ldrh	r3, [r7, #8]
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	00010002 	.word	0x00010002

08004ae4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	4608      	mov	r0, r1
 8004aee:	4611      	mov	r1, r2
 8004af0:	461a      	mov	r2, r3
 8004af2:	4603      	mov	r3, r0
 8004af4:	817b      	strh	r3, [r7, #10]
 8004af6:	460b      	mov	r3, r1
 8004af8:	813b      	strh	r3, [r7, #8]
 8004afa:	4613      	mov	r3, r2
 8004afc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 f8c2 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00d      	beq.n	8004b52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b44:	d103      	bne.n	8004b4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e0aa      	b.n	8004ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b52:	897b      	ldrh	r3, [r7, #10]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	6a3a      	ldr	r2, [r7, #32]
 8004b66:	4952      	ldr	r1, [pc, #328]	@ (8004cb0 <I2C_RequestMemoryRead+0x1cc>)
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f91d 	bl	8004da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e097      	b.n	8004ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b78:	2300      	movs	r3, #0
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b90:	6a39      	ldr	r1, [r7, #32]
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f9a8 	bl	8004ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00d      	beq.n	8004bba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d107      	bne.n	8004bb6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e076      	b.n	8004ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d105      	bne.n	8004bcc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bc0:	893b      	ldrh	r3, [r7, #8]
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	611a      	str	r2, [r3, #16]
 8004bca:	e021      	b.n	8004c10 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004bcc:	893b      	ldrh	r3, [r7, #8]
 8004bce:	0a1b      	lsrs	r3, r3, #8
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bdc:	6a39      	ldr	r1, [r7, #32]
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f000 f982 	bl	8004ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00d      	beq.n	8004c06 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d107      	bne.n	8004c02 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e050      	b.n	8004ca8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c06:	893b      	ldrh	r3, [r7, #8]
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c12:	6a39      	ldr	r1, [r7, #32]
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f967 	bl	8004ee8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00d      	beq.n	8004c3c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d107      	bne.n	8004c38 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c36:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e035      	b.n	8004ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f82b 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00d      	beq.n	8004c80 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c72:	d103      	bne.n	8004c7c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e013      	b.n	8004ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c80:	897b      	ldrh	r3, [r7, #10]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	f043 0301 	orr.w	r3, r3, #1
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c92:	6a3a      	ldr	r2, [r7, #32]
 8004c94:	4906      	ldr	r1, [pc, #24]	@ (8004cb0 <I2C_RequestMemoryRead+0x1cc>)
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f886 	bl	8004da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	00010002 	.word	0x00010002

08004cb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cc4:	e048      	b.n	8004d58 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d044      	beq.n	8004d58 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cce:	f7fe fdbf 	bl	8003850 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d302      	bcc.n	8004ce4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d139      	bne.n	8004d58 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	0c1b      	lsrs	r3, r3, #16
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d10d      	bne.n	8004d0a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	43da      	mvns	r2, r3
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	bf0c      	ite	eq
 8004d00:	2301      	moveq	r3, #1
 8004d02:	2300      	movne	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	461a      	mov	r2, r3
 8004d08:	e00c      	b.n	8004d24 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	43da      	mvns	r2, r3
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	4013      	ands	r3, r2
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2301      	moveq	r3, #1
 8004d1e:	2300      	movne	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	79fb      	ldrb	r3, [r7, #7]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d116      	bne.n	8004d58 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d44:	f043 0220 	orr.w	r2, r3, #32
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e023      	b.n	8004da0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	0c1b      	lsrs	r3, r3, #16
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d10d      	bne.n	8004d7e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	43da      	mvns	r2, r3
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bf0c      	ite	eq
 8004d74:	2301      	moveq	r3, #1
 8004d76:	2300      	movne	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	e00c      	b.n	8004d98 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	43da      	mvns	r2, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bf0c      	ite	eq
 8004d90:	2301      	moveq	r3, #1
 8004d92:	2300      	movne	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d093      	beq.n	8004cc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004db6:	e071      	b.n	8004e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dc6:	d123      	bne.n	8004e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dd6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004de0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfc:	f043 0204 	orr.w	r2, r3, #4
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e067      	b.n	8004ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e16:	d041      	beq.n	8004e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e18:	f7fe fd1a 	bl	8003850 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d302      	bcc.n	8004e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d136      	bne.n	8004e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	0c1b      	lsrs	r3, r3, #16
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d10c      	bne.n	8004e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	43da      	mvns	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4013      	ands	r3, r2
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	bf14      	ite	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	2300      	moveq	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	e00b      	b.n	8004e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	43da      	mvns	r2, r3
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bf14      	ite	ne
 8004e64:	2301      	movne	r3, #1
 8004e66:	2300      	moveq	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d016      	beq.n	8004e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e88:	f043 0220 	orr.w	r2, r3, #32
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e021      	b.n	8004ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	0c1b      	lsrs	r3, r3, #16
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d10c      	bne.n	8004ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	43da      	mvns	r2, r3
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	bf14      	ite	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	2300      	moveq	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	e00b      	b.n	8004ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	43da      	mvns	r2, r3
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bf14      	ite	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	2300      	moveq	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f47f af6d 	bne.w	8004db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ef4:	e034      	b.n	8004f60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f8e3 	bl	80050c2 <I2C_IsAcknowledgeFailed>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e034      	b.n	8004f70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d028      	beq.n	8004f60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0e:	f7fe fc9f 	bl	8003850 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d302      	bcc.n	8004f24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d11d      	bne.n	8004f60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2e:	2b80      	cmp	r3, #128	@ 0x80
 8004f30:	d016      	beq.n	8004f60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4c:	f043 0220 	orr.w	r2, r3, #32
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e007      	b.n	8004f70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f6a:	2b80      	cmp	r3, #128	@ 0x80
 8004f6c:	d1c3      	bne.n	8004ef6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f84:	e034      	b.n	8004ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 f89b 	bl	80050c2 <I2C_IsAcknowledgeFailed>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e034      	b.n	8005000 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9c:	d028      	beq.n	8004ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f9e:	f7fe fc57 	bl	8003850 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d302      	bcc.n	8004fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d11d      	bne.n	8004ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d016      	beq.n	8004ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fdc:	f043 0220 	orr.w	r2, r3, #32
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e007      	b.n	8005000 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d1c3      	bne.n	8004f86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005014:	e049      	b.n	80050aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	f003 0310 	and.w	r3, r3, #16
 8005020:	2b10      	cmp	r3, #16
 8005022:	d119      	bne.n	8005058 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0210 	mvn.w	r2, #16
 800502c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e030      	b.n	80050ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005058:	f7fe fbfa 	bl	8003850 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	429a      	cmp	r2, r3
 8005066:	d302      	bcc.n	800506e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d11d      	bne.n	80050aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005078:	2b40      	cmp	r3, #64	@ 0x40
 800507a:	d016      	beq.n	80050aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2220      	movs	r2, #32
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005096:	f043 0220 	orr.w	r2, r3, #32
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e007      	b.n	80050ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b4:	2b40      	cmp	r3, #64	@ 0x40
 80050b6:	d1ae      	bne.n	8005016 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d8:	d11b      	bne.n	8005112 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fe:	f043 0204 	orr.w	r2, r3, #4
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e000      	b.n	8005114 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b20      	cmp	r3, #32
 8005134:	d129      	bne.n	800518a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2224      	movs	r2, #36	@ 0x24
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0210 	bic.w	r2, r2, #16
 800515c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0201 	orr.w	r2, r2, #1
 800517c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	e000      	b.n	800518c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800518a:	2302      	movs	r3, #2
  }
}
 800518c:	4618      	mov	r0, r3
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d12a      	bne.n	8005208 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2224      	movs	r2, #36	@ 0x24
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0201 	bic.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80051d2:	89fb      	ldrh	r3, [r7, #14]
 80051d4:	f023 030f 	bic.w	r3, r3, #15
 80051d8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	b29a      	uxth	r2, r3
 80051de:	89fb      	ldrh	r3, [r7, #14]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	89fa      	ldrh	r2, [r7, #14]
 80051ea:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	e000      	b.n	800520a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005208:	2302      	movs	r3, #2
  }
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e0bf      	b.n	80053aa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fd fcd6 	bl	8002bf0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800525a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6999      	ldr	r1, [r3, #24]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005270:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6899      	ldr	r1, [r3, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4b4a      	ldr	r3, [pc, #296]	@ (80053b4 <HAL_LTDC_Init+0x19c>)
 800528c:	400b      	ands	r3, r1
 800528e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	041b      	lsls	r3, r3, #16
 8005296:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6899      	ldr	r1, [r3, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68d9      	ldr	r1, [r3, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	4b3e      	ldr	r3, [pc, #248]	@ (80053b4 <HAL_LTDC_Init+0x19c>)
 80052ba:	400b      	ands	r3, r1
 80052bc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	041b      	lsls	r3, r3, #16
 80052c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68d9      	ldr	r1, [r3, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a1a      	ldr	r2, [r3, #32]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6919      	ldr	r1, [r3, #16]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	4b33      	ldr	r3, [pc, #204]	@ (80053b4 <HAL_LTDC_Init+0x19c>)
 80052e8:	400b      	ands	r3, r1
 80052ea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f0:	041b      	lsls	r3, r3, #16
 80052f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6919      	ldr	r1, [r3, #16]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	431a      	orrs	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6959      	ldr	r1, [r3, #20]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	4b27      	ldr	r3, [pc, #156]	@ (80053b4 <HAL_LTDC_Init+0x19c>)
 8005316:	400b      	ands	r3, r1
 8005318:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	041b      	lsls	r3, r3, #16
 8005320:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6959      	ldr	r1, [r3, #20]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800533e:	021b      	lsls	r3, r3, #8
 8005340:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005348:	041b      	lsls	r3, r3, #16
 800534a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800535a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0206 	orr.w	r2, r2, #6
 8005386:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699a      	ldr	r2, [r3, #24]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	f000f800 	.word	0xf000f800

080053b8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80053b8:	b5b0      	push	{r4, r5, r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <HAL_LTDC_ConfigLayer+0x1a>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e02c      	b.n	800542c <HAL_LTDC_ConfigLayer+0x74>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2202      	movs	r2, #2
 80053de:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2134      	movs	r1, #52	@ 0x34
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	4413      	add	r3, r2
 80053ee:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	4614      	mov	r4, r2
 80053f6:	461d      	mov	r5, r3
 80053f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 f811 	bl	8005434 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2201      	movs	r2, #1
 8005418:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bdb0      	pop	{r4, r5, r7, pc}

08005434 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005434:	b480      	push	{r7}
 8005436:	b089      	sub	sp, #36	@ 0x24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	0c1b      	lsrs	r3, r3, #16
 800544c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005450:	4413      	add	r3, r2
 8005452:	041b      	lsls	r3, r3, #16
 8005454:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	01db      	lsls	r3, r3, #7
 8005460:	4413      	add	r3, r2
 8005462:	3384      	adds	r3, #132	@ 0x84
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	6812      	ldr	r2, [r2, #0]
 800546a:	4611      	mov	r1, r2
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	01d2      	lsls	r2, r2, #7
 8005470:	440a      	add	r2, r1
 8005472:	3284      	adds	r2, #132	@ 0x84
 8005474:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005478:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	0c1b      	lsrs	r3, r3, #16
 8005486:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800548a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800548c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4619      	mov	r1, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	01db      	lsls	r3, r3, #7
 8005498:	440b      	add	r3, r1
 800549a:	3384      	adds	r3, #132	@ 0x84
 800549c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80054a2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054b2:	4413      	add	r3, r2
 80054b4:	041b      	lsls	r3, r3, #16
 80054b6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	461a      	mov	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	01db      	lsls	r3, r3, #7
 80054c2:	4413      	add	r3, r2
 80054c4:	3384      	adds	r3, #132	@ 0x84
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	6812      	ldr	r2, [r2, #0]
 80054cc:	4611      	mov	r1, r2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	01d2      	lsls	r2, r2, #7
 80054d2:	440a      	add	r2, r1
 80054d4:	3284      	adds	r2, #132	@ 0x84
 80054d6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80054da:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054ea:	4413      	add	r3, r2
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4619      	mov	r1, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	01db      	lsls	r3, r3, #7
 80054f8:	440b      	add	r3, r1
 80054fa:	3384      	adds	r3, #132	@ 0x84
 80054fc:	4619      	mov	r1, r3
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4313      	orrs	r3, r2
 8005502:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	01db      	lsls	r3, r3, #7
 800550e:	4413      	add	r3, r2
 8005510:	3384      	adds	r3, #132	@ 0x84
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	6812      	ldr	r2, [r2, #0]
 8005518:	4611      	mov	r1, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	01d2      	lsls	r2, r2, #7
 800551e:	440a      	add	r2, r1
 8005520:	3284      	adds	r2, #132	@ 0x84
 8005522:	f023 0307 	bic.w	r3, r3, #7
 8005526:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	01db      	lsls	r3, r3, #7
 8005532:	4413      	add	r3, r2
 8005534:	3384      	adds	r3, #132	@ 0x84
 8005536:	461a      	mov	r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005544:	021b      	lsls	r3, r3, #8
 8005546:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800554e:	041b      	lsls	r3, r3, #16
 8005550:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	061b      	lsls	r3, r3, #24
 8005558:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	01db      	lsls	r3, r3, #7
 8005564:	4413      	add	r3, r2
 8005566:	3384      	adds	r3, #132	@ 0x84
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	01db      	lsls	r3, r3, #7
 8005574:	4413      	add	r3, r2
 8005576:	3384      	adds	r3, #132	@ 0x84
 8005578:	461a      	mov	r2, r3
 800557a:	2300      	movs	r3, #0
 800557c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005584:	461a      	mov	r2, r3
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	431a      	orrs	r2, r3
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	431a      	orrs	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4619      	mov	r1, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	01db      	lsls	r3, r3, #7
 8005598:	440b      	add	r3, r1
 800559a:	3384      	adds	r3, #132	@ 0x84
 800559c:	4619      	mov	r1, r3
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	01db      	lsls	r3, r3, #7
 80055ae:	4413      	add	r3, r2
 80055b0:	3384      	adds	r3, #132	@ 0x84
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	4611      	mov	r1, r2
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	01d2      	lsls	r2, r2, #7
 80055be:	440a      	add	r2, r1
 80055c0:	3284      	adds	r2, #132	@ 0x84
 80055c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80055c6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	01db      	lsls	r3, r3, #7
 80055d2:	4413      	add	r3, r2
 80055d4:	3384      	adds	r3, #132	@ 0x84
 80055d6:	461a      	mov	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	01db      	lsls	r3, r3, #7
 80055e8:	4413      	add	r3, r2
 80055ea:	3384      	adds	r3, #132	@ 0x84
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	6812      	ldr	r2, [r2, #0]
 80055f2:	4611      	mov	r1, r2
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	01d2      	lsls	r2, r2, #7
 80055f8:	440a      	add	r2, r1
 80055fa:	3284      	adds	r2, #132	@ 0x84
 80055fc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005600:	f023 0307 	bic.w	r3, r3, #7
 8005604:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	69da      	ldr	r2, [r3, #28]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	68f9      	ldr	r1, [r7, #12]
 8005610:	6809      	ldr	r1, [r1, #0]
 8005612:	4608      	mov	r0, r1
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	01c9      	lsls	r1, r1, #7
 8005618:	4401      	add	r1, r0
 800561a:	3184      	adds	r1, #132	@ 0x84
 800561c:	4313      	orrs	r3, r2
 800561e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	461a      	mov	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	01db      	lsls	r3, r3, #7
 800562a:	4413      	add	r3, r2
 800562c:	3384      	adds	r3, #132	@ 0x84
 800562e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	01db      	lsls	r3, r3, #7
 800563a:	4413      	add	r3, r2
 800563c:	3384      	adds	r3, #132	@ 0x84
 800563e:	461a      	mov	r2, r3
 8005640:	2300      	movs	r3, #0
 8005642:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	01db      	lsls	r3, r3, #7
 800564e:	4413      	add	r3, r2
 8005650:	3384      	adds	r3, #132	@ 0x84
 8005652:	461a      	mov	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005658:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d102      	bne.n	8005668 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005662:	2304      	movs	r3, #4
 8005664:	61fb      	str	r3, [r7, #28]
 8005666:	e01b      	b.n	80056a0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d102      	bne.n	8005676 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005670:	2303      	movs	r3, #3
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	e014      	b.n	80056a0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	2b04      	cmp	r3, #4
 800567c:	d00b      	beq.n	8005696 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005682:	2b02      	cmp	r3, #2
 8005684:	d007      	beq.n	8005696 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800568a:	2b03      	cmp	r3, #3
 800568c:	d003      	beq.n	8005696 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005692:	2b07      	cmp	r3, #7
 8005694:	d102      	bne.n	800569c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005696:	2302      	movs	r3, #2
 8005698:	61fb      	str	r3, [r7, #28]
 800569a:	e001      	b.n	80056a0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800569c:	2301      	movs	r3, #1
 800569e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	461a      	mov	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	01db      	lsls	r3, r3, #7
 80056aa:	4413      	add	r3, r2
 80056ac:	3384      	adds	r3, #132	@ 0x84
 80056ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	6812      	ldr	r2, [r2, #0]
 80056b4:	4611      	mov	r1, r2
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	01d2      	lsls	r2, r2, #7
 80056ba:	440a      	add	r2, r1
 80056bc:	3284      	adds	r2, #132	@ 0x84
 80056be:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80056c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c8:	69fa      	ldr	r2, [r7, #28]
 80056ca:	fb02 f303 	mul.w	r3, r2, r3
 80056ce:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	6859      	ldr	r1, [r3, #4]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	1acb      	subs	r3, r1, r3
 80056da:	69f9      	ldr	r1, [r7, #28]
 80056dc:	fb01 f303 	mul.w	r3, r1, r3
 80056e0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80056e2:	68f9      	ldr	r1, [r7, #12]
 80056e4:	6809      	ldr	r1, [r1, #0]
 80056e6:	4608      	mov	r0, r1
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	01c9      	lsls	r1, r1, #7
 80056ec:	4401      	add	r1, r0
 80056ee:	3184      	adds	r1, #132	@ 0x84
 80056f0:	4313      	orrs	r3, r2
 80056f2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	01db      	lsls	r3, r3, #7
 80056fe:	4413      	add	r3, r2
 8005700:	3384      	adds	r3, #132	@ 0x84
 8005702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	6812      	ldr	r2, [r2, #0]
 8005708:	4611      	mov	r1, r2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	01d2      	lsls	r2, r2, #7
 800570e:	440a      	add	r2, r1
 8005710:	3284      	adds	r2, #132	@ 0x84
 8005712:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005716:	f023 0307 	bic.w	r3, r3, #7
 800571a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	01db      	lsls	r3, r3, #7
 8005726:	4413      	add	r3, r2
 8005728:	3384      	adds	r3, #132	@ 0x84
 800572a:	461a      	mov	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005730:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	01db      	lsls	r3, r3, #7
 800573c:	4413      	add	r3, r2
 800573e:	3384      	adds	r3, #132	@ 0x84
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	6812      	ldr	r2, [r2, #0]
 8005746:	4611      	mov	r1, r2
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	01d2      	lsls	r2, r2, #7
 800574c:	440a      	add	r2, r1
 800574e:	3284      	adds	r2, #132	@ 0x84
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	6013      	str	r3, [r2, #0]
}
 8005756:	bf00      	nop
 8005758:	3724      	adds	r7, #36	@ 0x24
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
	...

08005764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e267      	b.n	8005c46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d075      	beq.n	800586e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005782:	4b88      	ldr	r3, [pc, #544]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 030c 	and.w	r3, r3, #12
 800578a:	2b04      	cmp	r3, #4
 800578c:	d00c      	beq.n	80057a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800578e:	4b85      	ldr	r3, [pc, #532]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005796:	2b08      	cmp	r3, #8
 8005798:	d112      	bne.n	80057c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800579a:	4b82      	ldr	r3, [pc, #520]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057a6:	d10b      	bne.n	80057c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a8:	4b7e      	ldr	r3, [pc, #504]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d05b      	beq.n	800586c <HAL_RCC_OscConfig+0x108>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d157      	bne.n	800586c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e242      	b.n	8005c46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057c8:	d106      	bne.n	80057d8 <HAL_RCC_OscConfig+0x74>
 80057ca:	4b76      	ldr	r3, [pc, #472]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a75      	ldr	r2, [pc, #468]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 80057d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	e01d      	b.n	8005814 <HAL_RCC_OscConfig+0xb0>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057e0:	d10c      	bne.n	80057fc <HAL_RCC_OscConfig+0x98>
 80057e2:	4b70      	ldr	r3, [pc, #448]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a6f      	ldr	r2, [pc, #444]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 80057e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	4b6d      	ldr	r3, [pc, #436]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a6c      	ldr	r2, [pc, #432]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 80057f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	e00b      	b.n	8005814 <HAL_RCC_OscConfig+0xb0>
 80057fc:	4b69      	ldr	r3, [pc, #420]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a68      	ldr	r2, [pc, #416]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 8005802:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	4b66      	ldr	r3, [pc, #408]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a65      	ldr	r2, [pc, #404]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 800580e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d013      	beq.n	8005844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581c:	f7fe f818 	bl	8003850 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005824:	f7fe f814 	bl	8003850 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b64      	cmp	r3, #100	@ 0x64
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e207      	b.n	8005c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005836:	4b5b      	ldr	r3, [pc, #364]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCC_OscConfig+0xc0>
 8005842:	e014      	b.n	800586e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005844:	f7fe f804 	bl	8003850 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800584c:	f7fe f800 	bl	8003850 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b64      	cmp	r3, #100	@ 0x64
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e1f3      	b.n	8005c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800585e:	4b51      	ldr	r3, [pc, #324]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0xe8>
 800586a:	e000      	b.n	800586e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800586c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d063      	beq.n	8005942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800587a:	4b4a      	ldr	r3, [pc, #296]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 030c 	and.w	r3, r3, #12
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00b      	beq.n	800589e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005886:	4b47      	ldr	r3, [pc, #284]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800588e:	2b08      	cmp	r3, #8
 8005890:	d11c      	bne.n	80058cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005892:	4b44      	ldr	r3, [pc, #272]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d116      	bne.n	80058cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800589e:	4b41      	ldr	r3, [pc, #260]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <HAL_RCC_OscConfig+0x152>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d001      	beq.n	80058b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e1c7      	b.n	8005c46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b6:	4b3b      	ldr	r3, [pc, #236]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	4937      	ldr	r1, [pc, #220]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ca:	e03a      	b.n	8005942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d020      	beq.n	8005916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058d4:	4b34      	ldr	r3, [pc, #208]	@ (80059a8 <HAL_RCC_OscConfig+0x244>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058da:	f7fd ffb9 	bl	8003850 <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058e2:	f7fd ffb5 	bl	8003850 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e1a8      	b.n	8005c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f4:	4b2b      	ldr	r3, [pc, #172]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005900:	4b28      	ldr	r3, [pc, #160]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	4925      	ldr	r1, [pc, #148]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 8005910:	4313      	orrs	r3, r2
 8005912:	600b      	str	r3, [r1, #0]
 8005914:	e015      	b.n	8005942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005916:	4b24      	ldr	r3, [pc, #144]	@ (80059a8 <HAL_RCC_OscConfig+0x244>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591c:	f7fd ff98 	bl	8003850 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005924:	f7fd ff94 	bl	8003850 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e187      	b.n	8005c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005936:	4b1b      	ldr	r3, [pc, #108]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f0      	bne.n	8005924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d036      	beq.n	80059bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d016      	beq.n	8005984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005956:	4b15      	ldr	r3, [pc, #84]	@ (80059ac <HAL_RCC_OscConfig+0x248>)
 8005958:	2201      	movs	r2, #1
 800595a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595c:	f7fd ff78 	bl	8003850 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005964:	f7fd ff74 	bl	8003850 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e167      	b.n	8005c46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005976:	4b0b      	ldr	r3, [pc, #44]	@ (80059a4 <HAL_RCC_OscConfig+0x240>)
 8005978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f0      	beq.n	8005964 <HAL_RCC_OscConfig+0x200>
 8005982:	e01b      	b.n	80059bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005984:	4b09      	ldr	r3, [pc, #36]	@ (80059ac <HAL_RCC_OscConfig+0x248>)
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800598a:	f7fd ff61 	bl	8003850 <HAL_GetTick>
 800598e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005990:	e00e      	b.n	80059b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005992:	f7fd ff5d 	bl	8003850 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d907      	bls.n	80059b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e150      	b.n	8005c46 <HAL_RCC_OscConfig+0x4e2>
 80059a4:	40023800 	.word	0x40023800
 80059a8:	42470000 	.word	0x42470000
 80059ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b0:	4b88      	ldr	r3, [pc, #544]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 80059b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1ea      	bne.n	8005992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8097 	beq.w	8005af8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ca:	2300      	movs	r3, #0
 80059cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ce:	4b81      	ldr	r3, [pc, #516]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 80059d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10f      	bne.n	80059fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059da:	2300      	movs	r3, #0
 80059dc:	60bb      	str	r3, [r7, #8]
 80059de:	4b7d      	ldr	r3, [pc, #500]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 80059e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e2:	4a7c      	ldr	r2, [pc, #496]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 80059e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80059ea:	4b7a      	ldr	r3, [pc, #488]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 80059ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059f6:	2301      	movs	r3, #1
 80059f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059fa:	4b77      	ldr	r3, [pc, #476]	@ (8005bd8 <HAL_RCC_OscConfig+0x474>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d118      	bne.n	8005a38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a06:	4b74      	ldr	r3, [pc, #464]	@ (8005bd8 <HAL_RCC_OscConfig+0x474>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a73      	ldr	r2, [pc, #460]	@ (8005bd8 <HAL_RCC_OscConfig+0x474>)
 8005a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a12:	f7fd ff1d 	bl	8003850 <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a18:	e008      	b.n	8005a2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a1a:	f7fd ff19 	bl	8003850 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d901      	bls.n	8005a2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e10c      	b.n	8005c46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8005bd8 <HAL_RCC_OscConfig+0x474>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0f0      	beq.n	8005a1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d106      	bne.n	8005a4e <HAL_RCC_OscConfig+0x2ea>
 8005a40:	4b64      	ldr	r3, [pc, #400]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a44:	4a63      	ldr	r2, [pc, #396]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a4c:	e01c      	b.n	8005a88 <HAL_RCC_OscConfig+0x324>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	2b05      	cmp	r3, #5
 8005a54:	d10c      	bne.n	8005a70 <HAL_RCC_OscConfig+0x30c>
 8005a56:	4b5f      	ldr	r3, [pc, #380]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a5a:	4a5e      	ldr	r2, [pc, #376]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005a5c:	f043 0304 	orr.w	r3, r3, #4
 8005a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a62:	4b5c      	ldr	r3, [pc, #368]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a66:	4a5b      	ldr	r2, [pc, #364]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005a68:	f043 0301 	orr.w	r3, r3, #1
 8005a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a6e:	e00b      	b.n	8005a88 <HAL_RCC_OscConfig+0x324>
 8005a70:	4b58      	ldr	r3, [pc, #352]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a74:	4a57      	ldr	r2, [pc, #348]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005a76:	f023 0301 	bic.w	r3, r3, #1
 8005a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a7c:	4b55      	ldr	r3, [pc, #340]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a80:	4a54      	ldr	r2, [pc, #336]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005a82:	f023 0304 	bic.w	r3, r3, #4
 8005a86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d015      	beq.n	8005abc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a90:	f7fd fede 	bl	8003850 <HAL_GetTick>
 8005a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a96:	e00a      	b.n	8005aae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a98:	f7fd feda 	bl	8003850 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e0cb      	b.n	8005c46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aae:	4b49      	ldr	r3, [pc, #292]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0ee      	beq.n	8005a98 <HAL_RCC_OscConfig+0x334>
 8005aba:	e014      	b.n	8005ae6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005abc:	f7fd fec8 	bl	8003850 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac2:	e00a      	b.n	8005ada <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac4:	f7fd fec4 	bl	8003850 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e0b5      	b.n	8005c46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ada:	4b3e      	ldr	r3, [pc, #248]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1ee      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d105      	bne.n	8005af8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aec:	4b39      	ldr	r3, [pc, #228]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af0:	4a38      	ldr	r2, [pc, #224]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005af6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 80a1 	beq.w	8005c44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b02:	4b34      	ldr	r3, [pc, #208]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 030c 	and.w	r3, r3, #12
 8005b0a:	2b08      	cmp	r3, #8
 8005b0c:	d05c      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d141      	bne.n	8005b9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b16:	4b31      	ldr	r3, [pc, #196]	@ (8005bdc <HAL_RCC_OscConfig+0x478>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1c:	f7fd fe98 	bl	8003850 <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b24:	f7fd fe94 	bl	8003850 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e087      	b.n	8005c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b36:	4b27      	ldr	r3, [pc, #156]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f0      	bne.n	8005b24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69da      	ldr	r2, [r3, #28]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b50:	019b      	lsls	r3, r3, #6
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b58:	085b      	lsrs	r3, r3, #1
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	041b      	lsls	r3, r3, #16
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	061b      	lsls	r3, r3, #24
 8005b66:	491b      	ldr	r1, [pc, #108]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005bdc <HAL_RCC_OscConfig+0x478>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b72:	f7fd fe6d 	bl	8003850 <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b7a:	f7fd fe69 	bl	8003850 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e05c      	b.n	8005c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b8c:	4b11      	ldr	r3, [pc, #68]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0f0      	beq.n	8005b7a <HAL_RCC_OscConfig+0x416>
 8005b98:	e054      	b.n	8005c44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b9a:	4b10      	ldr	r3, [pc, #64]	@ (8005bdc <HAL_RCC_OscConfig+0x478>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba0:	f7fd fe56 	bl	8003850 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba8:	f7fd fe52 	bl	8003850 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e045      	b.n	8005c46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bba:	4b06      	ldr	r3, [pc, #24]	@ (8005bd4 <HAL_RCC_OscConfig+0x470>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f0      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x444>
 8005bc6:	e03d      	b.n	8005c44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d107      	bne.n	8005be0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e038      	b.n	8005c46 <HAL_RCC_OscConfig+0x4e2>
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	40007000 	.word	0x40007000
 8005bdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005be0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c50 <HAL_RCC_OscConfig+0x4ec>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d028      	beq.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d121      	bne.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d11a      	bne.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c10:	4013      	ands	r3, r2
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d111      	bne.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c26:	085b      	lsrs	r3, r3, #1
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d107      	bne.n	8005c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d001      	beq.n	8005c44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e000      	b.n	8005c46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	40023800 	.word	0x40023800

08005c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0cc      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c68:	4b68      	ldr	r3, [pc, #416]	@ (8005e0c <HAL_RCC_ClockConfig+0x1b8>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 030f 	and.w	r3, r3, #15
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d90c      	bls.n	8005c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c76:	4b65      	ldr	r3, [pc, #404]	@ (8005e0c <HAL_RCC_ClockConfig+0x1b8>)
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7e:	4b63      	ldr	r3, [pc, #396]	@ (8005e0c <HAL_RCC_ClockConfig+0x1b8>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d001      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e0b8      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d020      	beq.n	8005cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d005      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ca8:	4b59      	ldr	r3, [pc, #356]	@ (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	4a58      	ldr	r2, [pc, #352]	@ (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005cb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d005      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cc0:	4b53      	ldr	r3, [pc, #332]	@ (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	4a52      	ldr	r2, [pc, #328]	@ (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ccc:	4b50      	ldr	r3, [pc, #320]	@ (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	494d      	ldr	r1, [pc, #308]	@ (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d044      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d107      	bne.n	8005d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf2:	4b47      	ldr	r3, [pc, #284]	@ (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d119      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e07f      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d003      	beq.n	8005d12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d107      	bne.n	8005d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d12:	4b3f      	ldr	r3, [pc, #252]	@ (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d109      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e06f      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d22:	4b3b      	ldr	r3, [pc, #236]	@ (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e067      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d32:	4b37      	ldr	r3, [pc, #220]	@ (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f023 0203 	bic.w	r2, r3, #3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	4934      	ldr	r1, [pc, #208]	@ (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d44:	f7fd fd84 	bl	8003850 <HAL_GetTick>
 8005d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d4a:	e00a      	b.n	8005d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d4c:	f7fd fd80 	bl	8003850 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e04f      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d62:	4b2b      	ldr	r3, [pc, #172]	@ (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 020c 	and.w	r2, r3, #12
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d1eb      	bne.n	8005d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d74:	4b25      	ldr	r3, [pc, #148]	@ (8005e0c <HAL_RCC_ClockConfig+0x1b8>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 030f 	and.w	r3, r3, #15
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d20c      	bcs.n	8005d9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d82:	4b22      	ldr	r3, [pc, #136]	@ (8005e0c <HAL_RCC_ClockConfig+0x1b8>)
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8a:	4b20      	ldr	r3, [pc, #128]	@ (8005e0c <HAL_RCC_ClockConfig+0x1b8>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d001      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e032      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d008      	beq.n	8005dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005da8:	4b19      	ldr	r3, [pc, #100]	@ (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	4916      	ldr	r1, [pc, #88]	@ (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d009      	beq.n	8005dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dc6:	4b12      	ldr	r3, [pc, #72]	@ (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	490e      	ldr	r1, [pc, #56]	@ (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005dda:	f000 f821 	bl	8005e20 <HAL_RCC_GetSysClockFreq>
 8005dde:	4602      	mov	r2, r0
 8005de0:	4b0b      	ldr	r3, [pc, #44]	@ (8005e10 <HAL_RCC_ClockConfig+0x1bc>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	091b      	lsrs	r3, r3, #4
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	490a      	ldr	r1, [pc, #40]	@ (8005e14 <HAL_RCC_ClockConfig+0x1c0>)
 8005dec:	5ccb      	ldrb	r3, [r1, r3]
 8005dee:	fa22 f303 	lsr.w	r3, r2, r3
 8005df2:	4a09      	ldr	r2, [pc, #36]	@ (8005e18 <HAL_RCC_ClockConfig+0x1c4>)
 8005df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005df6:	4b09      	ldr	r3, [pc, #36]	@ (8005e1c <HAL_RCC_ClockConfig+0x1c8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fd fce4 	bl	80037c8 <HAL_InitTick>

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40023c00 	.word	0x40023c00
 8005e10:	40023800 	.word	0x40023800
 8005e14:	08008c5c 	.word	0x08008c5c
 8005e18:	20000014 	.word	0x20000014
 8005e1c:	20000018 	.word	0x20000018

08005e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e24:	b094      	sub	sp, #80	@ 0x50
 8005e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e38:	4b79      	ldr	r3, [pc, #484]	@ (8006020 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f003 030c 	and.w	r3, r3, #12
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	d00d      	beq.n	8005e60 <HAL_RCC_GetSysClockFreq+0x40>
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	f200 80e1 	bhi.w	800600c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <HAL_RCC_GetSysClockFreq+0x34>
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d003      	beq.n	8005e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8005e52:	e0db      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e54:	4b73      	ldr	r3, [pc, #460]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e58:	e0db      	b.n	8006012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e5a:	4b73      	ldr	r3, [pc, #460]	@ (8006028 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e5e:	e0d8      	b.n	8006012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e60:	4b6f      	ldr	r3, [pc, #444]	@ (8006020 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e6a:	4b6d      	ldr	r3, [pc, #436]	@ (8006020 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d063      	beq.n	8005f3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e76:	4b6a      	ldr	r3, [pc, #424]	@ (8006020 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	099b      	lsrs	r3, r3, #6
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005e92:	4622      	mov	r2, r4
 8005e94:	462b      	mov	r3, r5
 8005e96:	f04f 0000 	mov.w	r0, #0
 8005e9a:	f04f 0100 	mov.w	r1, #0
 8005e9e:	0159      	lsls	r1, r3, #5
 8005ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ea4:	0150      	lsls	r0, r2, #5
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4621      	mov	r1, r4
 8005eac:	1a51      	subs	r1, r2, r1
 8005eae:	6139      	str	r1, [r7, #16]
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	f04f 0200 	mov.w	r2, #0
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ec4:	4659      	mov	r1, fp
 8005ec6:	018b      	lsls	r3, r1, #6
 8005ec8:	4651      	mov	r1, sl
 8005eca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ece:	4651      	mov	r1, sl
 8005ed0:	018a      	lsls	r2, r1, #6
 8005ed2:	4651      	mov	r1, sl
 8005ed4:	ebb2 0801 	subs.w	r8, r2, r1
 8005ed8:	4659      	mov	r1, fp
 8005eda:	eb63 0901 	sbc.w	r9, r3, r1
 8005ede:	f04f 0200 	mov.w	r2, #0
 8005ee2:	f04f 0300 	mov.w	r3, #0
 8005ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ef2:	4690      	mov	r8, r2
 8005ef4:	4699      	mov	r9, r3
 8005ef6:	4623      	mov	r3, r4
 8005ef8:	eb18 0303 	adds.w	r3, r8, r3
 8005efc:	60bb      	str	r3, [r7, #8]
 8005efe:	462b      	mov	r3, r5
 8005f00:	eb49 0303 	adc.w	r3, r9, r3
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	f04f 0200 	mov.w	r2, #0
 8005f0a:	f04f 0300 	mov.w	r3, #0
 8005f0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f12:	4629      	mov	r1, r5
 8005f14:	024b      	lsls	r3, r1, #9
 8005f16:	4621      	mov	r1, r4
 8005f18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	024a      	lsls	r2, r1, #9
 8005f20:	4610      	mov	r0, r2
 8005f22:	4619      	mov	r1, r3
 8005f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f26:	2200      	movs	r2, #0
 8005f28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f30:	f7fa f9ae 	bl	8000290 <__aeabi_uldivmod>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4613      	mov	r3, r2
 8005f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f3c:	e058      	b.n	8005ff0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f3e:	4b38      	ldr	r3, [pc, #224]	@ (8006020 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	099b      	lsrs	r3, r3, #6
 8005f44:	2200      	movs	r2, #0
 8005f46:	4618      	mov	r0, r3
 8005f48:	4611      	mov	r1, r2
 8005f4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f4e:	623b      	str	r3, [r7, #32]
 8005f50:	2300      	movs	r3, #0
 8005f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f58:	4642      	mov	r2, r8
 8005f5a:	464b      	mov	r3, r9
 8005f5c:	f04f 0000 	mov.w	r0, #0
 8005f60:	f04f 0100 	mov.w	r1, #0
 8005f64:	0159      	lsls	r1, r3, #5
 8005f66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f6a:	0150      	lsls	r0, r2, #5
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4641      	mov	r1, r8
 8005f72:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f76:	4649      	mov	r1, r9
 8005f78:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f90:	ebb2 040a 	subs.w	r4, r2, sl
 8005f94:	eb63 050b 	sbc.w	r5, r3, fp
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	00eb      	lsls	r3, r5, #3
 8005fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fa6:	00e2      	lsls	r2, r4, #3
 8005fa8:	4614      	mov	r4, r2
 8005faa:	461d      	mov	r5, r3
 8005fac:	4643      	mov	r3, r8
 8005fae:	18e3      	adds	r3, r4, r3
 8005fb0:	603b      	str	r3, [r7, #0]
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	eb45 0303 	adc.w	r3, r5, r3
 8005fb8:	607b      	str	r3, [r7, #4]
 8005fba:	f04f 0200 	mov.w	r2, #0
 8005fbe:	f04f 0300 	mov.w	r3, #0
 8005fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	028b      	lsls	r3, r1, #10
 8005fca:	4621      	mov	r1, r4
 8005fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	028a      	lsls	r2, r1, #10
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fda:	2200      	movs	r2, #0
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	61fa      	str	r2, [r7, #28]
 8005fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fe4:	f7fa f954 	bl	8000290 <__aeabi_uldivmod>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4613      	mov	r3, r2
 8005fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8006020 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	0c1b      	lsrs	r3, r3, #16
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006000:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006004:	fbb2 f3f3 	udiv	r3, r2, r3
 8006008:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800600a:	e002      	b.n	8006012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800600c:	4b05      	ldr	r3, [pc, #20]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x204>)
 800600e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006014:	4618      	mov	r0, r3
 8006016:	3750      	adds	r7, #80	@ 0x50
 8006018:	46bd      	mov	sp, r7
 800601a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800601e:	bf00      	nop
 8006020:	40023800 	.word	0x40023800
 8006024:	00f42400 	.word	0x00f42400
 8006028:	007a1200 	.word	0x007a1200

0800602c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800602c:	b480      	push	{r7}
 800602e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006030:	4b03      	ldr	r3, [pc, #12]	@ (8006040 <HAL_RCC_GetHCLKFreq+0x14>)
 8006032:	681b      	ldr	r3, [r3, #0]
}
 8006034:	4618      	mov	r0, r3
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	20000014 	.word	0x20000014

08006044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006048:	f7ff fff0 	bl	800602c <HAL_RCC_GetHCLKFreq>
 800604c:	4602      	mov	r2, r0
 800604e:	4b05      	ldr	r3, [pc, #20]	@ (8006064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	0a9b      	lsrs	r3, r3, #10
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	4903      	ldr	r1, [pc, #12]	@ (8006068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800605a:	5ccb      	ldrb	r3, [r1, r3]
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006060:	4618      	mov	r0, r3
 8006062:	bd80      	pop	{r7, pc}
 8006064:	40023800 	.word	0x40023800
 8006068:	08008c6c 	.word	0x08008c6c

0800606c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10b      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006090:	2b00      	cmp	r3, #0
 8006092:	d105      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800609c:	2b00      	cmp	r3, #0
 800609e:	d075      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80060a0:	4b91      	ldr	r3, [pc, #580]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060a6:	f7fd fbd3 	bl	8003850 <HAL_GetTick>
 80060aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060ac:	e008      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060ae:	f7fd fbcf 	bl	8003850 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e189      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060c0:	4b8a      	ldr	r3, [pc, #552]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1f0      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d009      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	019a      	lsls	r2, r3, #6
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	071b      	lsls	r3, r3, #28
 80060e4:	4981      	ldr	r1, [pc, #516]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0302 	and.w	r3, r3, #2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d01f      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060f8:	4b7c      	ldr	r3, [pc, #496]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060fe:	0f1b      	lsrs	r3, r3, #28
 8006100:	f003 0307 	and.w	r3, r3, #7
 8006104:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	019a      	lsls	r2, r3, #6
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	061b      	lsls	r3, r3, #24
 8006112:	431a      	orrs	r2, r3
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	071b      	lsls	r3, r3, #28
 8006118:	4974      	ldr	r1, [pc, #464]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800611a:	4313      	orrs	r3, r2
 800611c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006120:	4b72      	ldr	r3, [pc, #456]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006122:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006126:	f023 021f 	bic.w	r2, r3, #31
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	3b01      	subs	r3, #1
 8006130:	496e      	ldr	r1, [pc, #440]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006132:	4313      	orrs	r3, r2
 8006134:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00d      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	019a      	lsls	r2, r3, #6
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	061b      	lsls	r3, r3, #24
 8006150:	431a      	orrs	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	071b      	lsls	r3, r3, #28
 8006158:	4964      	ldr	r1, [pc, #400]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800615a:	4313      	orrs	r3, r2
 800615c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006160:	4b61      	ldr	r3, [pc, #388]	@ (80062e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006162:	2201      	movs	r2, #1
 8006164:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006166:	f7fd fb73 	bl	8003850 <HAL_GetTick>
 800616a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800616c:	e008      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800616e:	f7fd fb6f 	bl	8003850 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d901      	bls.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e129      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006180:	4b5a      	ldr	r3, [pc, #360]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0f0      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d105      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d079      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80061a4:	4b52      	ldr	r3, [pc, #328]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061aa:	f7fd fb51 	bl	8003850 <HAL_GetTick>
 80061ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80061b0:	e008      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80061b2:	f7fd fb4d 	bl	8003850 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d901      	bls.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e107      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80061c4:	4b49      	ldr	r3, [pc, #292]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061d0:	d0ef      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d020      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061de:	4b43      	ldr	r3, [pc, #268]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e4:	0f1b      	lsrs	r3, r3, #28
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	019a      	lsls	r2, r3, #6
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	061b      	lsls	r3, r3, #24
 80061f8:	431a      	orrs	r2, r3
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	071b      	lsls	r3, r3, #28
 80061fe:	493b      	ldr	r1, [pc, #236]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006200:	4313      	orrs	r3, r2
 8006202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006206:	4b39      	ldr	r3, [pc, #228]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800620c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	3b01      	subs	r3, #1
 8006216:	021b      	lsls	r3, r3, #8
 8006218:	4934      	ldr	r1, [pc, #208]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800621a:	4313      	orrs	r3, r2
 800621c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0308 	and.w	r3, r3, #8
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01e      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800622c:	4b2f      	ldr	r3, [pc, #188]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800622e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006232:	0e1b      	lsrs	r3, r3, #24
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	019a      	lsls	r2, r3, #6
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	061b      	lsls	r3, r3, #24
 8006244:	431a      	orrs	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	071b      	lsls	r3, r3, #28
 800624c:	4927      	ldr	r1, [pc, #156]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800624e:	4313      	orrs	r3, r2
 8006250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006254:	4b25      	ldr	r3, [pc, #148]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006256:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800625a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006262:	4922      	ldr	r1, [pc, #136]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006264:	4313      	orrs	r3, r2
 8006266:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800626a:	4b21      	ldr	r3, [pc, #132]	@ (80062f0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800626c:	2201      	movs	r2, #1
 800626e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006270:	f7fd faee 	bl	8003850 <HAL_GetTick>
 8006274:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006276:	e008      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006278:	f7fd faea 	bl	8003850 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e0a4      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800628a:	4b18      	ldr	r3, [pc, #96]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006292:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006296:	d1ef      	bne.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 808b 	beq.w	80063bc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	4b10      	ldr	r3, [pc, #64]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ae:	4a0f      	ldr	r2, [pc, #60]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80062b6:	4b0d      	ldr	r3, [pc, #52]	@ (80062ec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80062c2:	4b0c      	ldr	r3, [pc, #48]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a0b      	ldr	r2, [pc, #44]	@ (80062f4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80062c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062ce:	f7fd fabf 	bl	8003850 <HAL_GetTick>
 80062d2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80062d4:	e010      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062d6:	f7fd fabb 	bl	8003850 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d909      	bls.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e075      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80062e8:	42470068 	.word	0x42470068
 80062ec:	40023800 	.word	0x40023800
 80062f0:	42470070 	.word	0x42470070
 80062f4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80062f8:	4b38      	ldr	r3, [pc, #224]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0e8      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006304:	4b36      	ldr	r3, [pc, #216]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006308:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800630c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d02f      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006318:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	429a      	cmp	r2, r3
 8006320:	d028      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006322:	4b2f      	ldr	r3, [pc, #188]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006326:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800632a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800632c:	4b2d      	ldr	r3, [pc, #180]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800632e:	2201      	movs	r2, #1
 8006330:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006332:	4b2c      	ldr	r3, [pc, #176]	@ (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006338:	4a29      	ldr	r2, [pc, #164]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800633e:	4b28      	ldr	r3, [pc, #160]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b01      	cmp	r3, #1
 8006348:	d114      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800634a:	f7fd fa81 	bl	8003850 <HAL_GetTick>
 800634e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006350:	e00a      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006352:	f7fd fa7d 	bl	8003850 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006360:	4293      	cmp	r3, r2
 8006362:	d901      	bls.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e035      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006368:	4b1d      	ldr	r3, [pc, #116]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800636a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0ee      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006378:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800637c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006380:	d10d      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006382:	4b17      	ldr	r3, [pc, #92]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800638e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006396:	4912      	ldr	r1, [pc, #72]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006398:	4313      	orrs	r3, r2
 800639a:	608b      	str	r3, [r1, #8]
 800639c:	e005      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800639e:	4b10      	ldr	r3, [pc, #64]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	4a0f      	ldr	r2, [pc, #60]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063a4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80063a8:	6093      	str	r3, [r2, #8]
 80063aa:	4b0d      	ldr	r3, [pc, #52]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063b6:	490a      	ldr	r1, [pc, #40]	@ (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0310 	and.w	r3, r3, #16
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d004      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80063ce:	4b06      	ldr	r3, [pc, #24]	@ (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80063d0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	40007000 	.word	0x40007000
 80063e0:	40023800 	.word	0x40023800
 80063e4:	42470e40 	.word	0x42470e40
 80063e8:	424711e0 	.word	0x424711e0

080063ec <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e01c      	b.n	8006438 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	795b      	ldrb	r3, [r3, #5]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d105      	bne.n	8006414 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7fc fd16 	bl	8002e40 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0204 	orr.w	r2, r2, #4
 8006428:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	791b      	ldrb	r3, [r3, #4]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d101      	bne.n	800645a <HAL_RNG_GenerateRandomNumber+0x1a>
 8006456:	2302      	movs	r3, #2
 8006458:	e044      	b.n	80064e4 <HAL_RNG_GenerateRandomNumber+0xa4>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	795b      	ldrb	r3, [r3, #5]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b01      	cmp	r3, #1
 8006468:	d133      	bne.n	80064d2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2202      	movs	r2, #2
 800646e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006470:	f7fd f9ee 	bl	8003850 <HAL_GetTick>
 8006474:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006476:	e018      	b.n	80064aa <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006478:	f7fd f9ea 	bl	8003850 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d911      	bls.n	80064aa <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b01      	cmp	r3, #1
 8006492:	d00a      	beq.n	80064aa <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2202      	movs	r2, #2
 800649e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e01c      	b.n	80064e4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d1df      	bne.n	8006478 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	715a      	strb	r2, [r3, #5]
 80064d0:	e004      	b.n	80064dc <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2204      	movs	r2, #4
 80064d6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	711a      	strb	r2, [r3, #4]

  return status;
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e07b      	b.n	80065f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006502:	2b00      	cmp	r3, #0
 8006504:	d108      	bne.n	8006518 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800650e:	d009      	beq.n	8006524 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	61da      	str	r2, [r3, #28]
 8006516:	e005      	b.n	8006524 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d106      	bne.n	8006544 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7fc fca0 	bl	8002e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800655a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800656c:	431a      	orrs	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006576:	431a      	orrs	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	431a      	orrs	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	431a      	orrs	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800659e:	431a      	orrs	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a8:	ea42 0103 	orr.w	r1, r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	0c1b      	lsrs	r3, r3, #16
 80065c2:	f003 0104 	and.w	r1, r3, #4
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ca:	f003 0210 	and.w	r2, r3, #16
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e01a      	b.n	8006646 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006626:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7fc fc73 	bl	8002f14 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b088      	sub	sp, #32
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	603b      	str	r3, [r7, #0]
 800665a:	4613      	mov	r3, r2
 800665c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800665e:	f7fd f8f7 	bl	8003850 <HAL_GetTick>
 8006662:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006664:	88fb      	ldrh	r3, [r7, #6]
 8006666:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b01      	cmp	r3, #1
 8006672:	d001      	beq.n	8006678 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006674:	2302      	movs	r3, #2
 8006676:	e12a      	b.n	80068ce <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d002      	beq.n	8006684 <HAL_SPI_Transmit+0x36>
 800667e:	88fb      	ldrh	r3, [r7, #6]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e122      	b.n	80068ce <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800668e:	2b01      	cmp	r3, #1
 8006690:	d101      	bne.n	8006696 <HAL_SPI_Transmit+0x48>
 8006692:	2302      	movs	r3, #2
 8006694:	e11b      	b.n	80068ce <HAL_SPI_Transmit+0x280>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2203      	movs	r2, #3
 80066a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	88fa      	ldrh	r2, [r7, #6]
 80066b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	88fa      	ldrh	r2, [r7, #6]
 80066bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066e4:	d10f      	bne.n	8006706 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006704:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006710:	2b40      	cmp	r3, #64	@ 0x40
 8006712:	d007      	beq.n	8006724 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006722:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800672c:	d152      	bne.n	80067d4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <HAL_SPI_Transmit+0xee>
 8006736:	8b7b      	ldrh	r3, [r7, #26]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d145      	bne.n	80067c8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006740:	881a      	ldrh	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800674c:	1c9a      	adds	r2, r3, #2
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006760:	e032      	b.n	80067c8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	2b02      	cmp	r3, #2
 800676e:	d112      	bne.n	8006796 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006774:	881a      	ldrh	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006780:	1c9a      	adds	r2, r3, #2
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006794:	e018      	b.n	80067c8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006796:	f7fd f85b 	bl	8003850 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d803      	bhi.n	80067ae <HAL_SPI_Transmit+0x160>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ac:	d102      	bne.n	80067b4 <HAL_SPI_Transmit+0x166>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d109      	bne.n	80067c8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e082      	b.n	80068ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1c7      	bne.n	8006762 <HAL_SPI_Transmit+0x114>
 80067d2:	e053      	b.n	800687c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <HAL_SPI_Transmit+0x194>
 80067dc:	8b7b      	ldrh	r3, [r7, #26]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d147      	bne.n	8006872 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	330c      	adds	r3, #12
 80067ec:	7812      	ldrb	r2, [r2, #0]
 80067ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067fe:	b29b      	uxth	r3, r3
 8006800:	3b01      	subs	r3, #1
 8006802:	b29a      	uxth	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006808:	e033      	b.n	8006872 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b02      	cmp	r3, #2
 8006816:	d113      	bne.n	8006840 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	330c      	adds	r3, #12
 8006822:	7812      	ldrb	r2, [r2, #0]
 8006824:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800683e:	e018      	b.n	8006872 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006840:	f7fd f806 	bl	8003850 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d803      	bhi.n	8006858 <HAL_SPI_Transmit+0x20a>
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006856:	d102      	bne.n	800685e <HAL_SPI_Transmit+0x210>
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e02d      	b.n	80068ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1c6      	bne.n	800680a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800687c:	69fa      	ldr	r2, [r7, #28]
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 f8bf 	bl	8006a04 <SPI_EndRxTxTransaction>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2220      	movs	r2, #32
 8006890:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10a      	bne.n	80068b0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800689a:	2300      	movs	r3, #0
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e000      	b.n	80068ce <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80068cc:	2300      	movs	r3, #0
  }
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3720      	adds	r7, #32
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068e4:	b2db      	uxtb	r3, r3
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
	...

080068f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	603b      	str	r3, [r7, #0]
 8006900:	4613      	mov	r3, r2
 8006902:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006904:	f7fc ffa4 	bl	8003850 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690c:	1a9b      	subs	r3, r3, r2
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	4413      	add	r3, r2
 8006912:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006914:	f7fc ff9c 	bl	8003850 <HAL_GetTick>
 8006918:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800691a:	4b39      	ldr	r3, [pc, #228]	@ (8006a00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	015b      	lsls	r3, r3, #5
 8006920:	0d1b      	lsrs	r3, r3, #20
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	fb02 f303 	mul.w	r3, r2, r3
 8006928:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800692a:	e054      	b.n	80069d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006932:	d050      	beq.n	80069d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006934:	f7fc ff8c 	bl	8003850 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	429a      	cmp	r2, r3
 8006942:	d902      	bls.n	800694a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d13d      	bne.n	80069c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006958:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006962:	d111      	bne.n	8006988 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800696c:	d004      	beq.n	8006978 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006976:	d107      	bne.n	8006988 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006986:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800698c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006990:	d10f      	bne.n	80069b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e017      	b.n	80069f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4013      	ands	r3, r2
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	bf0c      	ite	eq
 80069e6:	2301      	moveq	r3, #1
 80069e8:	2300      	movne	r3, #0
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	79fb      	ldrb	r3, [r7, #7]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d19b      	bne.n	800692c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3720      	adds	r7, #32
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20000014 	.word	0x20000014

08006a04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b088      	sub	sp, #32
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2201      	movs	r2, #1
 8006a18:	2102      	movs	r1, #2
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7ff ff6a 	bl	80068f4 <SPI_WaitFlagStateUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a2a:	f043 0220 	orr.w	r2, r3, #32
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e032      	b.n	8006a9c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a36:	4b1b      	ldr	r3, [pc, #108]	@ (8006aa4 <SPI_EndRxTxTransaction+0xa0>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8006aa8 <SPI_EndRxTxTransaction+0xa4>)
 8006a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a40:	0d5b      	lsrs	r3, r3, #21
 8006a42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a46:	fb02 f303 	mul.w	r3, r2, r3
 8006a4a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a54:	d112      	bne.n	8006a7c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2180      	movs	r1, #128	@ 0x80
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f7ff ff47 	bl	80068f4 <SPI_WaitFlagStateUntilTimeout>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d016      	beq.n	8006a9a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a70:	f043 0220 	orr.w	r2, r3, #32
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e00f      	b.n	8006a9c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a92:	2b80      	cmp	r3, #128	@ 0x80
 8006a94:	d0f2      	beq.n	8006a7c <SPI_EndRxTxTransaction+0x78>
 8006a96:	e000      	b.n	8006a9a <SPI_EndRxTxTransaction+0x96>
        break;
 8006a98:	bf00      	nop
  }

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	20000014 	.word	0x20000014
 8006aa8:	165e9f81 	.word	0x165e9f81

08006aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e041      	b.n	8006b42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d106      	bne.n	8006ad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7fc fa3c 	bl	8002f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4610      	mov	r0, r2
 8006aec:	f000 f8f4 	bl	8006cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d101      	bne.n	8006b66 <HAL_TIM_ConfigClockSource+0x1c>
 8006b62:	2302      	movs	r3, #2
 8006b64:	e0b4      	b.n	8006cd0 <HAL_TIM_ConfigClockSource+0x186>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2202      	movs	r2, #2
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b84:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b8c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b9e:	d03e      	beq.n	8006c1e <HAL_TIM_ConfigClockSource+0xd4>
 8006ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ba4:	f200 8087 	bhi.w	8006cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bac:	f000 8086 	beq.w	8006cbc <HAL_TIM_ConfigClockSource+0x172>
 8006bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bb4:	d87f      	bhi.n	8006cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb6:	2b70      	cmp	r3, #112	@ 0x70
 8006bb8:	d01a      	beq.n	8006bf0 <HAL_TIM_ConfigClockSource+0xa6>
 8006bba:	2b70      	cmp	r3, #112	@ 0x70
 8006bbc:	d87b      	bhi.n	8006cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8006bbe:	2b60      	cmp	r3, #96	@ 0x60
 8006bc0:	d050      	beq.n	8006c64 <HAL_TIM_ConfigClockSource+0x11a>
 8006bc2:	2b60      	cmp	r3, #96	@ 0x60
 8006bc4:	d877      	bhi.n	8006cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc6:	2b50      	cmp	r3, #80	@ 0x50
 8006bc8:	d03c      	beq.n	8006c44 <HAL_TIM_ConfigClockSource+0xfa>
 8006bca:	2b50      	cmp	r3, #80	@ 0x50
 8006bcc:	d873      	bhi.n	8006cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8006bce:	2b40      	cmp	r3, #64	@ 0x40
 8006bd0:	d058      	beq.n	8006c84 <HAL_TIM_ConfigClockSource+0x13a>
 8006bd2:	2b40      	cmp	r3, #64	@ 0x40
 8006bd4:	d86f      	bhi.n	8006cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd6:	2b30      	cmp	r3, #48	@ 0x30
 8006bd8:	d064      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0x15a>
 8006bda:	2b30      	cmp	r3, #48	@ 0x30
 8006bdc:	d86b      	bhi.n	8006cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	d060      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0x15a>
 8006be2:	2b20      	cmp	r3, #32
 8006be4:	d867      	bhi.n	8006cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d05c      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0x15a>
 8006bea:	2b10      	cmp	r3, #16
 8006bec:	d05a      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0x15a>
 8006bee:	e062      	b.n	8006cb6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c00:	f000 f990 	bl	8006f24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c12:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	609a      	str	r2, [r3, #8]
      break;
 8006c1c:	e04f      	b.n	8006cbe <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c2e:	f000 f979 	bl	8006f24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c40:	609a      	str	r2, [r3, #8]
      break;
 8006c42:	e03c      	b.n	8006cbe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c50:	461a      	mov	r2, r3
 8006c52:	f000 f8ed 	bl	8006e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2150      	movs	r1, #80	@ 0x50
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 f946 	bl	8006eee <TIM_ITRx_SetConfig>
      break;
 8006c62:	e02c      	b.n	8006cbe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c70:	461a      	mov	r2, r3
 8006c72:	f000 f90c 	bl	8006e8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2160      	movs	r1, #96	@ 0x60
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 f936 	bl	8006eee <TIM_ITRx_SetConfig>
      break;
 8006c82:	e01c      	b.n	8006cbe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c90:	461a      	mov	r2, r3
 8006c92:	f000 f8cd 	bl	8006e30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2140      	movs	r1, #64	@ 0x40
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 f926 	bl	8006eee <TIM_ITRx_SetConfig>
      break;
 8006ca2:	e00c      	b.n	8006cbe <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4619      	mov	r1, r3
 8006cae:	4610      	mov	r0, r2
 8006cb0:	f000 f91d 	bl	8006eee <TIM_ITRx_SetConfig>
      break;
 8006cb4:	e003      	b.n	8006cbe <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8006cba:	e000      	b.n	8006cbe <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006cbc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a46      	ldr	r2, [pc, #280]	@ (8006e04 <TIM_Base_SetConfig+0x12c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d013      	beq.n	8006d18 <TIM_Base_SetConfig+0x40>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf6:	d00f      	beq.n	8006d18 <TIM_Base_SetConfig+0x40>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a43      	ldr	r2, [pc, #268]	@ (8006e08 <TIM_Base_SetConfig+0x130>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d00b      	beq.n	8006d18 <TIM_Base_SetConfig+0x40>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a42      	ldr	r2, [pc, #264]	@ (8006e0c <TIM_Base_SetConfig+0x134>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d007      	beq.n	8006d18 <TIM_Base_SetConfig+0x40>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a41      	ldr	r2, [pc, #260]	@ (8006e10 <TIM_Base_SetConfig+0x138>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d003      	beq.n	8006d18 <TIM_Base_SetConfig+0x40>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a40      	ldr	r2, [pc, #256]	@ (8006e14 <TIM_Base_SetConfig+0x13c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d108      	bne.n	8006d2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a35      	ldr	r2, [pc, #212]	@ (8006e04 <TIM_Base_SetConfig+0x12c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d02b      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d38:	d027      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a32      	ldr	r2, [pc, #200]	@ (8006e08 <TIM_Base_SetConfig+0x130>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d023      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a31      	ldr	r2, [pc, #196]	@ (8006e0c <TIM_Base_SetConfig+0x134>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d01f      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a30      	ldr	r2, [pc, #192]	@ (8006e10 <TIM_Base_SetConfig+0x138>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d01b      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a2f      	ldr	r2, [pc, #188]	@ (8006e14 <TIM_Base_SetConfig+0x13c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d017      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8006e18 <TIM_Base_SetConfig+0x140>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d013      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a2d      	ldr	r2, [pc, #180]	@ (8006e1c <TIM_Base_SetConfig+0x144>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d00f      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8006e20 <TIM_Base_SetConfig+0x148>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d00b      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a2b      	ldr	r2, [pc, #172]	@ (8006e24 <TIM_Base_SetConfig+0x14c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d007      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8006e28 <TIM_Base_SetConfig+0x150>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d003      	beq.n	8006d8a <TIM_Base_SetConfig+0xb2>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a29      	ldr	r2, [pc, #164]	@ (8006e2c <TIM_Base_SetConfig+0x154>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d108      	bne.n	8006d9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a10      	ldr	r2, [pc, #64]	@ (8006e04 <TIM_Base_SetConfig+0x12c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d003      	beq.n	8006dd0 <TIM_Base_SetConfig+0xf8>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a12      	ldr	r2, [pc, #72]	@ (8006e14 <TIM_Base_SetConfig+0x13c>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d103      	bne.n	8006dd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	691a      	ldr	r2, [r3, #16]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d105      	bne.n	8006df6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f023 0201 	bic.w	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	611a      	str	r2, [r3, #16]
  }
}
 8006df6:	bf00      	nop
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	40010000 	.word	0x40010000
 8006e08:	40000400 	.word	0x40000400
 8006e0c:	40000800 	.word	0x40000800
 8006e10:	40000c00 	.word	0x40000c00
 8006e14:	40010400 	.word	0x40010400
 8006e18:	40014000 	.word	0x40014000
 8006e1c:	40014400 	.word	0x40014400
 8006e20:	40014800 	.word	0x40014800
 8006e24:	40001800 	.word	0x40001800
 8006e28:	40001c00 	.word	0x40001c00
 8006e2c:	40002000 	.word	0x40002000

08006e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	f023 0201 	bic.w	r2, r3, #1
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	011b      	lsls	r3, r3, #4
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f023 030a 	bic.w	r3, r3, #10
 8006e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	621a      	str	r2, [r3, #32]
}
 8006e82:	bf00      	nop
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b087      	sub	sp, #28
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	f023 0210 	bic.w	r2, r3, #16
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006eb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	031b      	lsls	r3, r3, #12
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006eca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	011b      	lsls	r3, r3, #4
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	621a      	str	r2, [r3, #32]
}
 8006ee2:	bf00      	nop
 8006ee4:	371c      	adds	r7, #28
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	f043 0307 	orr.w	r3, r3, #7
 8006f10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	609a      	str	r2, [r3, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	021a      	lsls	r2, r3, #8
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	431a      	orrs	r2, r3
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	609a      	str	r2, [r3, #8]
}
 8006f58:	bf00      	nop
 8006f5a:	371c      	adds	r7, #28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e05a      	b.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a21      	ldr	r2, [pc, #132]	@ (8007040 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d022      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fc8:	d01d      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a1d      	ldr	r2, [pc, #116]	@ (8007044 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d018      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8007048 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d013      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800704c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00e      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a18      	ldr	r2, [pc, #96]	@ (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d009      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a17      	ldr	r2, [pc, #92]	@ (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d004      	beq.n	8007006 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a15      	ldr	r2, [pc, #84]	@ (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d10c      	bne.n	8007020 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800700c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	4313      	orrs	r3, r2
 8007016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	40010000 	.word	0x40010000
 8007044:	40000400 	.word	0x40000400
 8007048:	40000800 	.word	0x40000800
 800704c:	40000c00 	.word	0x40000c00
 8007050:	40010400 	.word	0x40010400
 8007054:	40014000 	.word	0x40014000
 8007058:	40001800 	.word	0x40001800

0800705c <siprintf>:
 800705c:	b40e      	push	{r1, r2, r3}
 800705e:	b510      	push	{r4, lr}
 8007060:	b09d      	sub	sp, #116	@ 0x74
 8007062:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007064:	9002      	str	r0, [sp, #8]
 8007066:	9006      	str	r0, [sp, #24]
 8007068:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800706c:	480a      	ldr	r0, [pc, #40]	@ (8007098 <siprintf+0x3c>)
 800706e:	9107      	str	r1, [sp, #28]
 8007070:	9104      	str	r1, [sp, #16]
 8007072:	490a      	ldr	r1, [pc, #40]	@ (800709c <siprintf+0x40>)
 8007074:	f853 2b04 	ldr.w	r2, [r3], #4
 8007078:	9105      	str	r1, [sp, #20]
 800707a:	2400      	movs	r4, #0
 800707c:	a902      	add	r1, sp, #8
 800707e:	6800      	ldr	r0, [r0, #0]
 8007080:	9301      	str	r3, [sp, #4]
 8007082:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007084:	f000 f994 	bl	80073b0 <_svfiprintf_r>
 8007088:	9b02      	ldr	r3, [sp, #8]
 800708a:	701c      	strb	r4, [r3, #0]
 800708c:	b01d      	add	sp, #116	@ 0x74
 800708e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007092:	b003      	add	sp, #12
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	20000020 	.word	0x20000020
 800709c:	ffff0208 	.word	0xffff0208

080070a0 <memset>:
 80070a0:	4402      	add	r2, r0
 80070a2:	4603      	mov	r3, r0
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d100      	bne.n	80070aa <memset+0xa>
 80070a8:	4770      	bx	lr
 80070aa:	f803 1b01 	strb.w	r1, [r3], #1
 80070ae:	e7f9      	b.n	80070a4 <memset+0x4>

080070b0 <__errno>:
 80070b0:	4b01      	ldr	r3, [pc, #4]	@ (80070b8 <__errno+0x8>)
 80070b2:	6818      	ldr	r0, [r3, #0]
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	20000020 	.word	0x20000020

080070bc <__libc_init_array>:
 80070bc:	b570      	push	{r4, r5, r6, lr}
 80070be:	4d0d      	ldr	r5, [pc, #52]	@ (80070f4 <__libc_init_array+0x38>)
 80070c0:	4c0d      	ldr	r4, [pc, #52]	@ (80070f8 <__libc_init_array+0x3c>)
 80070c2:	1b64      	subs	r4, r4, r5
 80070c4:	10a4      	asrs	r4, r4, #2
 80070c6:	2600      	movs	r6, #0
 80070c8:	42a6      	cmp	r6, r4
 80070ca:	d109      	bne.n	80070e0 <__libc_init_array+0x24>
 80070cc:	4d0b      	ldr	r5, [pc, #44]	@ (80070fc <__libc_init_array+0x40>)
 80070ce:	4c0c      	ldr	r4, [pc, #48]	@ (8007100 <__libc_init_array+0x44>)
 80070d0:	f000 fc64 	bl	800799c <_init>
 80070d4:	1b64      	subs	r4, r4, r5
 80070d6:	10a4      	asrs	r4, r4, #2
 80070d8:	2600      	movs	r6, #0
 80070da:	42a6      	cmp	r6, r4
 80070dc:	d105      	bne.n	80070ea <__libc_init_array+0x2e>
 80070de:	bd70      	pop	{r4, r5, r6, pc}
 80070e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e4:	4798      	blx	r3
 80070e6:	3601      	adds	r6, #1
 80070e8:	e7ee      	b.n	80070c8 <__libc_init_array+0xc>
 80070ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ee:	4798      	blx	r3
 80070f0:	3601      	adds	r6, #1
 80070f2:	e7f2      	b.n	80070da <__libc_init_array+0x1e>
 80070f4:	08008cb0 	.word	0x08008cb0
 80070f8:	08008cb0 	.word	0x08008cb0
 80070fc:	08008cb0 	.word	0x08008cb0
 8007100:	08008cb4 	.word	0x08008cb4

08007104 <__retarget_lock_acquire_recursive>:
 8007104:	4770      	bx	lr

08007106 <__retarget_lock_release_recursive>:
 8007106:	4770      	bx	lr

08007108 <_free_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4605      	mov	r5, r0
 800710c:	2900      	cmp	r1, #0
 800710e:	d041      	beq.n	8007194 <_free_r+0x8c>
 8007110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007114:	1f0c      	subs	r4, r1, #4
 8007116:	2b00      	cmp	r3, #0
 8007118:	bfb8      	it	lt
 800711a:	18e4      	addlt	r4, r4, r3
 800711c:	f000 f8e0 	bl	80072e0 <__malloc_lock>
 8007120:	4a1d      	ldr	r2, [pc, #116]	@ (8007198 <_free_r+0x90>)
 8007122:	6813      	ldr	r3, [r2, #0]
 8007124:	b933      	cbnz	r3, 8007134 <_free_r+0x2c>
 8007126:	6063      	str	r3, [r4, #4]
 8007128:	6014      	str	r4, [r2, #0]
 800712a:	4628      	mov	r0, r5
 800712c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007130:	f000 b8dc 	b.w	80072ec <__malloc_unlock>
 8007134:	42a3      	cmp	r3, r4
 8007136:	d908      	bls.n	800714a <_free_r+0x42>
 8007138:	6820      	ldr	r0, [r4, #0]
 800713a:	1821      	adds	r1, r4, r0
 800713c:	428b      	cmp	r3, r1
 800713e:	bf01      	itttt	eq
 8007140:	6819      	ldreq	r1, [r3, #0]
 8007142:	685b      	ldreq	r3, [r3, #4]
 8007144:	1809      	addeq	r1, r1, r0
 8007146:	6021      	streq	r1, [r4, #0]
 8007148:	e7ed      	b.n	8007126 <_free_r+0x1e>
 800714a:	461a      	mov	r2, r3
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	b10b      	cbz	r3, 8007154 <_free_r+0x4c>
 8007150:	42a3      	cmp	r3, r4
 8007152:	d9fa      	bls.n	800714a <_free_r+0x42>
 8007154:	6811      	ldr	r1, [r2, #0]
 8007156:	1850      	adds	r0, r2, r1
 8007158:	42a0      	cmp	r0, r4
 800715a:	d10b      	bne.n	8007174 <_free_r+0x6c>
 800715c:	6820      	ldr	r0, [r4, #0]
 800715e:	4401      	add	r1, r0
 8007160:	1850      	adds	r0, r2, r1
 8007162:	4283      	cmp	r3, r0
 8007164:	6011      	str	r1, [r2, #0]
 8007166:	d1e0      	bne.n	800712a <_free_r+0x22>
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	6053      	str	r3, [r2, #4]
 800716e:	4408      	add	r0, r1
 8007170:	6010      	str	r0, [r2, #0]
 8007172:	e7da      	b.n	800712a <_free_r+0x22>
 8007174:	d902      	bls.n	800717c <_free_r+0x74>
 8007176:	230c      	movs	r3, #12
 8007178:	602b      	str	r3, [r5, #0]
 800717a:	e7d6      	b.n	800712a <_free_r+0x22>
 800717c:	6820      	ldr	r0, [r4, #0]
 800717e:	1821      	adds	r1, r4, r0
 8007180:	428b      	cmp	r3, r1
 8007182:	bf04      	itt	eq
 8007184:	6819      	ldreq	r1, [r3, #0]
 8007186:	685b      	ldreq	r3, [r3, #4]
 8007188:	6063      	str	r3, [r4, #4]
 800718a:	bf04      	itt	eq
 800718c:	1809      	addeq	r1, r1, r0
 800718e:	6021      	streq	r1, [r4, #0]
 8007190:	6054      	str	r4, [r2, #4]
 8007192:	e7ca      	b.n	800712a <_free_r+0x22>
 8007194:	bd38      	pop	{r3, r4, r5, pc}
 8007196:	bf00      	nop
 8007198:	20025d4c 	.word	0x20025d4c

0800719c <sbrk_aligned>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	4e0f      	ldr	r6, [pc, #60]	@ (80071dc <sbrk_aligned+0x40>)
 80071a0:	460c      	mov	r4, r1
 80071a2:	6831      	ldr	r1, [r6, #0]
 80071a4:	4605      	mov	r5, r0
 80071a6:	b911      	cbnz	r1, 80071ae <sbrk_aligned+0x12>
 80071a8:	f000 fba4 	bl	80078f4 <_sbrk_r>
 80071ac:	6030      	str	r0, [r6, #0]
 80071ae:	4621      	mov	r1, r4
 80071b0:	4628      	mov	r0, r5
 80071b2:	f000 fb9f 	bl	80078f4 <_sbrk_r>
 80071b6:	1c43      	adds	r3, r0, #1
 80071b8:	d103      	bne.n	80071c2 <sbrk_aligned+0x26>
 80071ba:	f04f 34ff 	mov.w	r4, #4294967295
 80071be:	4620      	mov	r0, r4
 80071c0:	bd70      	pop	{r4, r5, r6, pc}
 80071c2:	1cc4      	adds	r4, r0, #3
 80071c4:	f024 0403 	bic.w	r4, r4, #3
 80071c8:	42a0      	cmp	r0, r4
 80071ca:	d0f8      	beq.n	80071be <sbrk_aligned+0x22>
 80071cc:	1a21      	subs	r1, r4, r0
 80071ce:	4628      	mov	r0, r5
 80071d0:	f000 fb90 	bl	80078f4 <_sbrk_r>
 80071d4:	3001      	adds	r0, #1
 80071d6:	d1f2      	bne.n	80071be <sbrk_aligned+0x22>
 80071d8:	e7ef      	b.n	80071ba <sbrk_aligned+0x1e>
 80071da:	bf00      	nop
 80071dc:	20025d48 	.word	0x20025d48

080071e0 <_malloc_r>:
 80071e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e4:	1ccd      	adds	r5, r1, #3
 80071e6:	f025 0503 	bic.w	r5, r5, #3
 80071ea:	3508      	adds	r5, #8
 80071ec:	2d0c      	cmp	r5, #12
 80071ee:	bf38      	it	cc
 80071f0:	250c      	movcc	r5, #12
 80071f2:	2d00      	cmp	r5, #0
 80071f4:	4606      	mov	r6, r0
 80071f6:	db01      	blt.n	80071fc <_malloc_r+0x1c>
 80071f8:	42a9      	cmp	r1, r5
 80071fa:	d904      	bls.n	8007206 <_malloc_r+0x26>
 80071fc:	230c      	movs	r3, #12
 80071fe:	6033      	str	r3, [r6, #0]
 8007200:	2000      	movs	r0, #0
 8007202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007206:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072dc <_malloc_r+0xfc>
 800720a:	f000 f869 	bl	80072e0 <__malloc_lock>
 800720e:	f8d8 3000 	ldr.w	r3, [r8]
 8007212:	461c      	mov	r4, r3
 8007214:	bb44      	cbnz	r4, 8007268 <_malloc_r+0x88>
 8007216:	4629      	mov	r1, r5
 8007218:	4630      	mov	r0, r6
 800721a:	f7ff ffbf 	bl	800719c <sbrk_aligned>
 800721e:	1c43      	adds	r3, r0, #1
 8007220:	4604      	mov	r4, r0
 8007222:	d158      	bne.n	80072d6 <_malloc_r+0xf6>
 8007224:	f8d8 4000 	ldr.w	r4, [r8]
 8007228:	4627      	mov	r7, r4
 800722a:	2f00      	cmp	r7, #0
 800722c:	d143      	bne.n	80072b6 <_malloc_r+0xd6>
 800722e:	2c00      	cmp	r4, #0
 8007230:	d04b      	beq.n	80072ca <_malloc_r+0xea>
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	4639      	mov	r1, r7
 8007236:	4630      	mov	r0, r6
 8007238:	eb04 0903 	add.w	r9, r4, r3
 800723c:	f000 fb5a 	bl	80078f4 <_sbrk_r>
 8007240:	4581      	cmp	r9, r0
 8007242:	d142      	bne.n	80072ca <_malloc_r+0xea>
 8007244:	6821      	ldr	r1, [r4, #0]
 8007246:	1a6d      	subs	r5, r5, r1
 8007248:	4629      	mov	r1, r5
 800724a:	4630      	mov	r0, r6
 800724c:	f7ff ffa6 	bl	800719c <sbrk_aligned>
 8007250:	3001      	adds	r0, #1
 8007252:	d03a      	beq.n	80072ca <_malloc_r+0xea>
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	442b      	add	r3, r5
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	f8d8 3000 	ldr.w	r3, [r8]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	bb62      	cbnz	r2, 80072bc <_malloc_r+0xdc>
 8007262:	f8c8 7000 	str.w	r7, [r8]
 8007266:	e00f      	b.n	8007288 <_malloc_r+0xa8>
 8007268:	6822      	ldr	r2, [r4, #0]
 800726a:	1b52      	subs	r2, r2, r5
 800726c:	d420      	bmi.n	80072b0 <_malloc_r+0xd0>
 800726e:	2a0b      	cmp	r2, #11
 8007270:	d917      	bls.n	80072a2 <_malloc_r+0xc2>
 8007272:	1961      	adds	r1, r4, r5
 8007274:	42a3      	cmp	r3, r4
 8007276:	6025      	str	r5, [r4, #0]
 8007278:	bf18      	it	ne
 800727a:	6059      	strne	r1, [r3, #4]
 800727c:	6863      	ldr	r3, [r4, #4]
 800727e:	bf08      	it	eq
 8007280:	f8c8 1000 	streq.w	r1, [r8]
 8007284:	5162      	str	r2, [r4, r5]
 8007286:	604b      	str	r3, [r1, #4]
 8007288:	4630      	mov	r0, r6
 800728a:	f000 f82f 	bl	80072ec <__malloc_unlock>
 800728e:	f104 000b 	add.w	r0, r4, #11
 8007292:	1d23      	adds	r3, r4, #4
 8007294:	f020 0007 	bic.w	r0, r0, #7
 8007298:	1ac2      	subs	r2, r0, r3
 800729a:	bf1c      	itt	ne
 800729c:	1a1b      	subne	r3, r3, r0
 800729e:	50a3      	strne	r3, [r4, r2]
 80072a0:	e7af      	b.n	8007202 <_malloc_r+0x22>
 80072a2:	6862      	ldr	r2, [r4, #4]
 80072a4:	42a3      	cmp	r3, r4
 80072a6:	bf0c      	ite	eq
 80072a8:	f8c8 2000 	streq.w	r2, [r8]
 80072ac:	605a      	strne	r2, [r3, #4]
 80072ae:	e7eb      	b.n	8007288 <_malloc_r+0xa8>
 80072b0:	4623      	mov	r3, r4
 80072b2:	6864      	ldr	r4, [r4, #4]
 80072b4:	e7ae      	b.n	8007214 <_malloc_r+0x34>
 80072b6:	463c      	mov	r4, r7
 80072b8:	687f      	ldr	r7, [r7, #4]
 80072ba:	e7b6      	b.n	800722a <_malloc_r+0x4a>
 80072bc:	461a      	mov	r2, r3
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	42a3      	cmp	r3, r4
 80072c2:	d1fb      	bne.n	80072bc <_malloc_r+0xdc>
 80072c4:	2300      	movs	r3, #0
 80072c6:	6053      	str	r3, [r2, #4]
 80072c8:	e7de      	b.n	8007288 <_malloc_r+0xa8>
 80072ca:	230c      	movs	r3, #12
 80072cc:	6033      	str	r3, [r6, #0]
 80072ce:	4630      	mov	r0, r6
 80072d0:	f000 f80c 	bl	80072ec <__malloc_unlock>
 80072d4:	e794      	b.n	8007200 <_malloc_r+0x20>
 80072d6:	6005      	str	r5, [r0, #0]
 80072d8:	e7d6      	b.n	8007288 <_malloc_r+0xa8>
 80072da:	bf00      	nop
 80072dc:	20025d4c 	.word	0x20025d4c

080072e0 <__malloc_lock>:
 80072e0:	4801      	ldr	r0, [pc, #4]	@ (80072e8 <__malloc_lock+0x8>)
 80072e2:	f7ff bf0f 	b.w	8007104 <__retarget_lock_acquire_recursive>
 80072e6:	bf00      	nop
 80072e8:	20025d44 	.word	0x20025d44

080072ec <__malloc_unlock>:
 80072ec:	4801      	ldr	r0, [pc, #4]	@ (80072f4 <__malloc_unlock+0x8>)
 80072ee:	f7ff bf0a 	b.w	8007106 <__retarget_lock_release_recursive>
 80072f2:	bf00      	nop
 80072f4:	20025d44 	.word	0x20025d44

080072f8 <__ssputs_r>:
 80072f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072fc:	688e      	ldr	r6, [r1, #8]
 80072fe:	461f      	mov	r7, r3
 8007300:	42be      	cmp	r6, r7
 8007302:	680b      	ldr	r3, [r1, #0]
 8007304:	4682      	mov	sl, r0
 8007306:	460c      	mov	r4, r1
 8007308:	4690      	mov	r8, r2
 800730a:	d82d      	bhi.n	8007368 <__ssputs_r+0x70>
 800730c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007310:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007314:	d026      	beq.n	8007364 <__ssputs_r+0x6c>
 8007316:	6965      	ldr	r5, [r4, #20]
 8007318:	6909      	ldr	r1, [r1, #16]
 800731a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800731e:	eba3 0901 	sub.w	r9, r3, r1
 8007322:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007326:	1c7b      	adds	r3, r7, #1
 8007328:	444b      	add	r3, r9
 800732a:	106d      	asrs	r5, r5, #1
 800732c:	429d      	cmp	r5, r3
 800732e:	bf38      	it	cc
 8007330:	461d      	movcc	r5, r3
 8007332:	0553      	lsls	r3, r2, #21
 8007334:	d527      	bpl.n	8007386 <__ssputs_r+0x8e>
 8007336:	4629      	mov	r1, r5
 8007338:	f7ff ff52 	bl	80071e0 <_malloc_r>
 800733c:	4606      	mov	r6, r0
 800733e:	b360      	cbz	r0, 800739a <__ssputs_r+0xa2>
 8007340:	6921      	ldr	r1, [r4, #16]
 8007342:	464a      	mov	r2, r9
 8007344:	f000 fae6 	bl	8007914 <memcpy>
 8007348:	89a3      	ldrh	r3, [r4, #12]
 800734a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800734e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007352:	81a3      	strh	r3, [r4, #12]
 8007354:	6126      	str	r6, [r4, #16]
 8007356:	6165      	str	r5, [r4, #20]
 8007358:	444e      	add	r6, r9
 800735a:	eba5 0509 	sub.w	r5, r5, r9
 800735e:	6026      	str	r6, [r4, #0]
 8007360:	60a5      	str	r5, [r4, #8]
 8007362:	463e      	mov	r6, r7
 8007364:	42be      	cmp	r6, r7
 8007366:	d900      	bls.n	800736a <__ssputs_r+0x72>
 8007368:	463e      	mov	r6, r7
 800736a:	6820      	ldr	r0, [r4, #0]
 800736c:	4632      	mov	r2, r6
 800736e:	4641      	mov	r1, r8
 8007370:	f000 faa6 	bl	80078c0 <memmove>
 8007374:	68a3      	ldr	r3, [r4, #8]
 8007376:	1b9b      	subs	r3, r3, r6
 8007378:	60a3      	str	r3, [r4, #8]
 800737a:	6823      	ldr	r3, [r4, #0]
 800737c:	4433      	add	r3, r6
 800737e:	6023      	str	r3, [r4, #0]
 8007380:	2000      	movs	r0, #0
 8007382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007386:	462a      	mov	r2, r5
 8007388:	f000 fad2 	bl	8007930 <_realloc_r>
 800738c:	4606      	mov	r6, r0
 800738e:	2800      	cmp	r0, #0
 8007390:	d1e0      	bne.n	8007354 <__ssputs_r+0x5c>
 8007392:	6921      	ldr	r1, [r4, #16]
 8007394:	4650      	mov	r0, sl
 8007396:	f7ff feb7 	bl	8007108 <_free_r>
 800739a:	230c      	movs	r3, #12
 800739c:	f8ca 3000 	str.w	r3, [sl]
 80073a0:	89a3      	ldrh	r3, [r4, #12]
 80073a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073a6:	81a3      	strh	r3, [r4, #12]
 80073a8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ac:	e7e9      	b.n	8007382 <__ssputs_r+0x8a>
	...

080073b0 <_svfiprintf_r>:
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	4698      	mov	r8, r3
 80073b6:	898b      	ldrh	r3, [r1, #12]
 80073b8:	061b      	lsls	r3, r3, #24
 80073ba:	b09d      	sub	sp, #116	@ 0x74
 80073bc:	4607      	mov	r7, r0
 80073be:	460d      	mov	r5, r1
 80073c0:	4614      	mov	r4, r2
 80073c2:	d510      	bpl.n	80073e6 <_svfiprintf_r+0x36>
 80073c4:	690b      	ldr	r3, [r1, #16]
 80073c6:	b973      	cbnz	r3, 80073e6 <_svfiprintf_r+0x36>
 80073c8:	2140      	movs	r1, #64	@ 0x40
 80073ca:	f7ff ff09 	bl	80071e0 <_malloc_r>
 80073ce:	6028      	str	r0, [r5, #0]
 80073d0:	6128      	str	r0, [r5, #16]
 80073d2:	b930      	cbnz	r0, 80073e2 <_svfiprintf_r+0x32>
 80073d4:	230c      	movs	r3, #12
 80073d6:	603b      	str	r3, [r7, #0]
 80073d8:	f04f 30ff 	mov.w	r0, #4294967295
 80073dc:	b01d      	add	sp, #116	@ 0x74
 80073de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e2:	2340      	movs	r3, #64	@ 0x40
 80073e4:	616b      	str	r3, [r5, #20]
 80073e6:	2300      	movs	r3, #0
 80073e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80073ea:	2320      	movs	r3, #32
 80073ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80073f4:	2330      	movs	r3, #48	@ 0x30
 80073f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007594 <_svfiprintf_r+0x1e4>
 80073fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073fe:	f04f 0901 	mov.w	r9, #1
 8007402:	4623      	mov	r3, r4
 8007404:	469a      	mov	sl, r3
 8007406:	f813 2b01 	ldrb.w	r2, [r3], #1
 800740a:	b10a      	cbz	r2, 8007410 <_svfiprintf_r+0x60>
 800740c:	2a25      	cmp	r2, #37	@ 0x25
 800740e:	d1f9      	bne.n	8007404 <_svfiprintf_r+0x54>
 8007410:	ebba 0b04 	subs.w	fp, sl, r4
 8007414:	d00b      	beq.n	800742e <_svfiprintf_r+0x7e>
 8007416:	465b      	mov	r3, fp
 8007418:	4622      	mov	r2, r4
 800741a:	4629      	mov	r1, r5
 800741c:	4638      	mov	r0, r7
 800741e:	f7ff ff6b 	bl	80072f8 <__ssputs_r>
 8007422:	3001      	adds	r0, #1
 8007424:	f000 80a7 	beq.w	8007576 <_svfiprintf_r+0x1c6>
 8007428:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800742a:	445a      	add	r2, fp
 800742c:	9209      	str	r2, [sp, #36]	@ 0x24
 800742e:	f89a 3000 	ldrb.w	r3, [sl]
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 809f 	beq.w	8007576 <_svfiprintf_r+0x1c6>
 8007438:	2300      	movs	r3, #0
 800743a:	f04f 32ff 	mov.w	r2, #4294967295
 800743e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007442:	f10a 0a01 	add.w	sl, sl, #1
 8007446:	9304      	str	r3, [sp, #16]
 8007448:	9307      	str	r3, [sp, #28]
 800744a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800744e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007450:	4654      	mov	r4, sl
 8007452:	2205      	movs	r2, #5
 8007454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007458:	484e      	ldr	r0, [pc, #312]	@ (8007594 <_svfiprintf_r+0x1e4>)
 800745a:	f7f8 fec9 	bl	80001f0 <memchr>
 800745e:	9a04      	ldr	r2, [sp, #16]
 8007460:	b9d8      	cbnz	r0, 800749a <_svfiprintf_r+0xea>
 8007462:	06d0      	lsls	r0, r2, #27
 8007464:	bf44      	itt	mi
 8007466:	2320      	movmi	r3, #32
 8007468:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800746c:	0711      	lsls	r1, r2, #28
 800746e:	bf44      	itt	mi
 8007470:	232b      	movmi	r3, #43	@ 0x2b
 8007472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007476:	f89a 3000 	ldrb.w	r3, [sl]
 800747a:	2b2a      	cmp	r3, #42	@ 0x2a
 800747c:	d015      	beq.n	80074aa <_svfiprintf_r+0xfa>
 800747e:	9a07      	ldr	r2, [sp, #28]
 8007480:	4654      	mov	r4, sl
 8007482:	2000      	movs	r0, #0
 8007484:	f04f 0c0a 	mov.w	ip, #10
 8007488:	4621      	mov	r1, r4
 800748a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800748e:	3b30      	subs	r3, #48	@ 0x30
 8007490:	2b09      	cmp	r3, #9
 8007492:	d94b      	bls.n	800752c <_svfiprintf_r+0x17c>
 8007494:	b1b0      	cbz	r0, 80074c4 <_svfiprintf_r+0x114>
 8007496:	9207      	str	r2, [sp, #28]
 8007498:	e014      	b.n	80074c4 <_svfiprintf_r+0x114>
 800749a:	eba0 0308 	sub.w	r3, r0, r8
 800749e:	fa09 f303 	lsl.w	r3, r9, r3
 80074a2:	4313      	orrs	r3, r2
 80074a4:	9304      	str	r3, [sp, #16]
 80074a6:	46a2      	mov	sl, r4
 80074a8:	e7d2      	b.n	8007450 <_svfiprintf_r+0xa0>
 80074aa:	9b03      	ldr	r3, [sp, #12]
 80074ac:	1d19      	adds	r1, r3, #4
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	9103      	str	r1, [sp, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	bfbb      	ittet	lt
 80074b6:	425b      	neglt	r3, r3
 80074b8:	f042 0202 	orrlt.w	r2, r2, #2
 80074bc:	9307      	strge	r3, [sp, #28]
 80074be:	9307      	strlt	r3, [sp, #28]
 80074c0:	bfb8      	it	lt
 80074c2:	9204      	strlt	r2, [sp, #16]
 80074c4:	7823      	ldrb	r3, [r4, #0]
 80074c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80074c8:	d10a      	bne.n	80074e0 <_svfiprintf_r+0x130>
 80074ca:	7863      	ldrb	r3, [r4, #1]
 80074cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80074ce:	d132      	bne.n	8007536 <_svfiprintf_r+0x186>
 80074d0:	9b03      	ldr	r3, [sp, #12]
 80074d2:	1d1a      	adds	r2, r3, #4
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	9203      	str	r2, [sp, #12]
 80074d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074dc:	3402      	adds	r4, #2
 80074de:	9305      	str	r3, [sp, #20]
 80074e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80075a4 <_svfiprintf_r+0x1f4>
 80074e4:	7821      	ldrb	r1, [r4, #0]
 80074e6:	2203      	movs	r2, #3
 80074e8:	4650      	mov	r0, sl
 80074ea:	f7f8 fe81 	bl	80001f0 <memchr>
 80074ee:	b138      	cbz	r0, 8007500 <_svfiprintf_r+0x150>
 80074f0:	9b04      	ldr	r3, [sp, #16]
 80074f2:	eba0 000a 	sub.w	r0, r0, sl
 80074f6:	2240      	movs	r2, #64	@ 0x40
 80074f8:	4082      	lsls	r2, r0
 80074fa:	4313      	orrs	r3, r2
 80074fc:	3401      	adds	r4, #1
 80074fe:	9304      	str	r3, [sp, #16]
 8007500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007504:	4824      	ldr	r0, [pc, #144]	@ (8007598 <_svfiprintf_r+0x1e8>)
 8007506:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800750a:	2206      	movs	r2, #6
 800750c:	f7f8 fe70 	bl	80001f0 <memchr>
 8007510:	2800      	cmp	r0, #0
 8007512:	d036      	beq.n	8007582 <_svfiprintf_r+0x1d2>
 8007514:	4b21      	ldr	r3, [pc, #132]	@ (800759c <_svfiprintf_r+0x1ec>)
 8007516:	bb1b      	cbnz	r3, 8007560 <_svfiprintf_r+0x1b0>
 8007518:	9b03      	ldr	r3, [sp, #12]
 800751a:	3307      	adds	r3, #7
 800751c:	f023 0307 	bic.w	r3, r3, #7
 8007520:	3308      	adds	r3, #8
 8007522:	9303      	str	r3, [sp, #12]
 8007524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007526:	4433      	add	r3, r6
 8007528:	9309      	str	r3, [sp, #36]	@ 0x24
 800752a:	e76a      	b.n	8007402 <_svfiprintf_r+0x52>
 800752c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007530:	460c      	mov	r4, r1
 8007532:	2001      	movs	r0, #1
 8007534:	e7a8      	b.n	8007488 <_svfiprintf_r+0xd8>
 8007536:	2300      	movs	r3, #0
 8007538:	3401      	adds	r4, #1
 800753a:	9305      	str	r3, [sp, #20]
 800753c:	4619      	mov	r1, r3
 800753e:	f04f 0c0a 	mov.w	ip, #10
 8007542:	4620      	mov	r0, r4
 8007544:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007548:	3a30      	subs	r2, #48	@ 0x30
 800754a:	2a09      	cmp	r2, #9
 800754c:	d903      	bls.n	8007556 <_svfiprintf_r+0x1a6>
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0c6      	beq.n	80074e0 <_svfiprintf_r+0x130>
 8007552:	9105      	str	r1, [sp, #20]
 8007554:	e7c4      	b.n	80074e0 <_svfiprintf_r+0x130>
 8007556:	fb0c 2101 	mla	r1, ip, r1, r2
 800755a:	4604      	mov	r4, r0
 800755c:	2301      	movs	r3, #1
 800755e:	e7f0      	b.n	8007542 <_svfiprintf_r+0x192>
 8007560:	ab03      	add	r3, sp, #12
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	462a      	mov	r2, r5
 8007566:	4b0e      	ldr	r3, [pc, #56]	@ (80075a0 <_svfiprintf_r+0x1f0>)
 8007568:	a904      	add	r1, sp, #16
 800756a:	4638      	mov	r0, r7
 800756c:	f3af 8000 	nop.w
 8007570:	1c42      	adds	r2, r0, #1
 8007572:	4606      	mov	r6, r0
 8007574:	d1d6      	bne.n	8007524 <_svfiprintf_r+0x174>
 8007576:	89ab      	ldrh	r3, [r5, #12]
 8007578:	065b      	lsls	r3, r3, #25
 800757a:	f53f af2d 	bmi.w	80073d8 <_svfiprintf_r+0x28>
 800757e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007580:	e72c      	b.n	80073dc <_svfiprintf_r+0x2c>
 8007582:	ab03      	add	r3, sp, #12
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	462a      	mov	r2, r5
 8007588:	4b05      	ldr	r3, [pc, #20]	@ (80075a0 <_svfiprintf_r+0x1f0>)
 800758a:	a904      	add	r1, sp, #16
 800758c:	4638      	mov	r0, r7
 800758e:	f000 f879 	bl	8007684 <_printf_i>
 8007592:	e7ed      	b.n	8007570 <_svfiprintf_r+0x1c0>
 8007594:	08008c74 	.word	0x08008c74
 8007598:	08008c7e 	.word	0x08008c7e
 800759c:	00000000 	.word	0x00000000
 80075a0:	080072f9 	.word	0x080072f9
 80075a4:	08008c7a 	.word	0x08008c7a

080075a8 <_printf_common>:
 80075a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075ac:	4616      	mov	r6, r2
 80075ae:	4698      	mov	r8, r3
 80075b0:	688a      	ldr	r2, [r1, #8]
 80075b2:	690b      	ldr	r3, [r1, #16]
 80075b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075b8:	4293      	cmp	r3, r2
 80075ba:	bfb8      	it	lt
 80075bc:	4613      	movlt	r3, r2
 80075be:	6033      	str	r3, [r6, #0]
 80075c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075c4:	4607      	mov	r7, r0
 80075c6:	460c      	mov	r4, r1
 80075c8:	b10a      	cbz	r2, 80075ce <_printf_common+0x26>
 80075ca:	3301      	adds	r3, #1
 80075cc:	6033      	str	r3, [r6, #0]
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	0699      	lsls	r1, r3, #26
 80075d2:	bf42      	ittt	mi
 80075d4:	6833      	ldrmi	r3, [r6, #0]
 80075d6:	3302      	addmi	r3, #2
 80075d8:	6033      	strmi	r3, [r6, #0]
 80075da:	6825      	ldr	r5, [r4, #0]
 80075dc:	f015 0506 	ands.w	r5, r5, #6
 80075e0:	d106      	bne.n	80075f0 <_printf_common+0x48>
 80075e2:	f104 0a19 	add.w	sl, r4, #25
 80075e6:	68e3      	ldr	r3, [r4, #12]
 80075e8:	6832      	ldr	r2, [r6, #0]
 80075ea:	1a9b      	subs	r3, r3, r2
 80075ec:	42ab      	cmp	r3, r5
 80075ee:	dc26      	bgt.n	800763e <_printf_common+0x96>
 80075f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075f4:	6822      	ldr	r2, [r4, #0]
 80075f6:	3b00      	subs	r3, #0
 80075f8:	bf18      	it	ne
 80075fa:	2301      	movne	r3, #1
 80075fc:	0692      	lsls	r2, r2, #26
 80075fe:	d42b      	bmi.n	8007658 <_printf_common+0xb0>
 8007600:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007604:	4641      	mov	r1, r8
 8007606:	4638      	mov	r0, r7
 8007608:	47c8      	blx	r9
 800760a:	3001      	adds	r0, #1
 800760c:	d01e      	beq.n	800764c <_printf_common+0xa4>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	6922      	ldr	r2, [r4, #16]
 8007612:	f003 0306 	and.w	r3, r3, #6
 8007616:	2b04      	cmp	r3, #4
 8007618:	bf02      	ittt	eq
 800761a:	68e5      	ldreq	r5, [r4, #12]
 800761c:	6833      	ldreq	r3, [r6, #0]
 800761e:	1aed      	subeq	r5, r5, r3
 8007620:	68a3      	ldr	r3, [r4, #8]
 8007622:	bf0c      	ite	eq
 8007624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007628:	2500      	movne	r5, #0
 800762a:	4293      	cmp	r3, r2
 800762c:	bfc4      	itt	gt
 800762e:	1a9b      	subgt	r3, r3, r2
 8007630:	18ed      	addgt	r5, r5, r3
 8007632:	2600      	movs	r6, #0
 8007634:	341a      	adds	r4, #26
 8007636:	42b5      	cmp	r5, r6
 8007638:	d11a      	bne.n	8007670 <_printf_common+0xc8>
 800763a:	2000      	movs	r0, #0
 800763c:	e008      	b.n	8007650 <_printf_common+0xa8>
 800763e:	2301      	movs	r3, #1
 8007640:	4652      	mov	r2, sl
 8007642:	4641      	mov	r1, r8
 8007644:	4638      	mov	r0, r7
 8007646:	47c8      	blx	r9
 8007648:	3001      	adds	r0, #1
 800764a:	d103      	bne.n	8007654 <_printf_common+0xac>
 800764c:	f04f 30ff 	mov.w	r0, #4294967295
 8007650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007654:	3501      	adds	r5, #1
 8007656:	e7c6      	b.n	80075e6 <_printf_common+0x3e>
 8007658:	18e1      	adds	r1, r4, r3
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	2030      	movs	r0, #48	@ 0x30
 800765e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007662:	4422      	add	r2, r4
 8007664:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007668:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800766c:	3302      	adds	r3, #2
 800766e:	e7c7      	b.n	8007600 <_printf_common+0x58>
 8007670:	2301      	movs	r3, #1
 8007672:	4622      	mov	r2, r4
 8007674:	4641      	mov	r1, r8
 8007676:	4638      	mov	r0, r7
 8007678:	47c8      	blx	r9
 800767a:	3001      	adds	r0, #1
 800767c:	d0e6      	beq.n	800764c <_printf_common+0xa4>
 800767e:	3601      	adds	r6, #1
 8007680:	e7d9      	b.n	8007636 <_printf_common+0x8e>
	...

08007684 <_printf_i>:
 8007684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007688:	7e0f      	ldrb	r7, [r1, #24]
 800768a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800768c:	2f78      	cmp	r7, #120	@ 0x78
 800768e:	4691      	mov	r9, r2
 8007690:	4680      	mov	r8, r0
 8007692:	460c      	mov	r4, r1
 8007694:	469a      	mov	sl, r3
 8007696:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800769a:	d807      	bhi.n	80076ac <_printf_i+0x28>
 800769c:	2f62      	cmp	r7, #98	@ 0x62
 800769e:	d80a      	bhi.n	80076b6 <_printf_i+0x32>
 80076a0:	2f00      	cmp	r7, #0
 80076a2:	f000 80d1 	beq.w	8007848 <_printf_i+0x1c4>
 80076a6:	2f58      	cmp	r7, #88	@ 0x58
 80076a8:	f000 80b8 	beq.w	800781c <_printf_i+0x198>
 80076ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076b4:	e03a      	b.n	800772c <_printf_i+0xa8>
 80076b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076ba:	2b15      	cmp	r3, #21
 80076bc:	d8f6      	bhi.n	80076ac <_printf_i+0x28>
 80076be:	a101      	add	r1, pc, #4	@ (adr r1, 80076c4 <_printf_i+0x40>)
 80076c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076c4:	0800771d 	.word	0x0800771d
 80076c8:	08007731 	.word	0x08007731
 80076cc:	080076ad 	.word	0x080076ad
 80076d0:	080076ad 	.word	0x080076ad
 80076d4:	080076ad 	.word	0x080076ad
 80076d8:	080076ad 	.word	0x080076ad
 80076dc:	08007731 	.word	0x08007731
 80076e0:	080076ad 	.word	0x080076ad
 80076e4:	080076ad 	.word	0x080076ad
 80076e8:	080076ad 	.word	0x080076ad
 80076ec:	080076ad 	.word	0x080076ad
 80076f0:	0800782f 	.word	0x0800782f
 80076f4:	0800775b 	.word	0x0800775b
 80076f8:	080077e9 	.word	0x080077e9
 80076fc:	080076ad 	.word	0x080076ad
 8007700:	080076ad 	.word	0x080076ad
 8007704:	08007851 	.word	0x08007851
 8007708:	080076ad 	.word	0x080076ad
 800770c:	0800775b 	.word	0x0800775b
 8007710:	080076ad 	.word	0x080076ad
 8007714:	080076ad 	.word	0x080076ad
 8007718:	080077f1 	.word	0x080077f1
 800771c:	6833      	ldr	r3, [r6, #0]
 800771e:	1d1a      	adds	r2, r3, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6032      	str	r2, [r6, #0]
 8007724:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007728:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800772c:	2301      	movs	r3, #1
 800772e:	e09c      	b.n	800786a <_printf_i+0x1e6>
 8007730:	6833      	ldr	r3, [r6, #0]
 8007732:	6820      	ldr	r0, [r4, #0]
 8007734:	1d19      	adds	r1, r3, #4
 8007736:	6031      	str	r1, [r6, #0]
 8007738:	0606      	lsls	r6, r0, #24
 800773a:	d501      	bpl.n	8007740 <_printf_i+0xbc>
 800773c:	681d      	ldr	r5, [r3, #0]
 800773e:	e003      	b.n	8007748 <_printf_i+0xc4>
 8007740:	0645      	lsls	r5, r0, #25
 8007742:	d5fb      	bpl.n	800773c <_printf_i+0xb8>
 8007744:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007748:	2d00      	cmp	r5, #0
 800774a:	da03      	bge.n	8007754 <_printf_i+0xd0>
 800774c:	232d      	movs	r3, #45	@ 0x2d
 800774e:	426d      	negs	r5, r5
 8007750:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007754:	4858      	ldr	r0, [pc, #352]	@ (80078b8 <_printf_i+0x234>)
 8007756:	230a      	movs	r3, #10
 8007758:	e011      	b.n	800777e <_printf_i+0xfa>
 800775a:	6821      	ldr	r1, [r4, #0]
 800775c:	6833      	ldr	r3, [r6, #0]
 800775e:	0608      	lsls	r0, r1, #24
 8007760:	f853 5b04 	ldr.w	r5, [r3], #4
 8007764:	d402      	bmi.n	800776c <_printf_i+0xe8>
 8007766:	0649      	lsls	r1, r1, #25
 8007768:	bf48      	it	mi
 800776a:	b2ad      	uxthmi	r5, r5
 800776c:	2f6f      	cmp	r7, #111	@ 0x6f
 800776e:	4852      	ldr	r0, [pc, #328]	@ (80078b8 <_printf_i+0x234>)
 8007770:	6033      	str	r3, [r6, #0]
 8007772:	bf14      	ite	ne
 8007774:	230a      	movne	r3, #10
 8007776:	2308      	moveq	r3, #8
 8007778:	2100      	movs	r1, #0
 800777a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800777e:	6866      	ldr	r6, [r4, #4]
 8007780:	60a6      	str	r6, [r4, #8]
 8007782:	2e00      	cmp	r6, #0
 8007784:	db05      	blt.n	8007792 <_printf_i+0x10e>
 8007786:	6821      	ldr	r1, [r4, #0]
 8007788:	432e      	orrs	r6, r5
 800778a:	f021 0104 	bic.w	r1, r1, #4
 800778e:	6021      	str	r1, [r4, #0]
 8007790:	d04b      	beq.n	800782a <_printf_i+0x1a6>
 8007792:	4616      	mov	r6, r2
 8007794:	fbb5 f1f3 	udiv	r1, r5, r3
 8007798:	fb03 5711 	mls	r7, r3, r1, r5
 800779c:	5dc7      	ldrb	r7, [r0, r7]
 800779e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077a2:	462f      	mov	r7, r5
 80077a4:	42bb      	cmp	r3, r7
 80077a6:	460d      	mov	r5, r1
 80077a8:	d9f4      	bls.n	8007794 <_printf_i+0x110>
 80077aa:	2b08      	cmp	r3, #8
 80077ac:	d10b      	bne.n	80077c6 <_printf_i+0x142>
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	07df      	lsls	r7, r3, #31
 80077b2:	d508      	bpl.n	80077c6 <_printf_i+0x142>
 80077b4:	6923      	ldr	r3, [r4, #16]
 80077b6:	6861      	ldr	r1, [r4, #4]
 80077b8:	4299      	cmp	r1, r3
 80077ba:	bfde      	ittt	le
 80077bc:	2330      	movle	r3, #48	@ 0x30
 80077be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077c6:	1b92      	subs	r2, r2, r6
 80077c8:	6122      	str	r2, [r4, #16]
 80077ca:	f8cd a000 	str.w	sl, [sp]
 80077ce:	464b      	mov	r3, r9
 80077d0:	aa03      	add	r2, sp, #12
 80077d2:	4621      	mov	r1, r4
 80077d4:	4640      	mov	r0, r8
 80077d6:	f7ff fee7 	bl	80075a8 <_printf_common>
 80077da:	3001      	adds	r0, #1
 80077dc:	d14a      	bne.n	8007874 <_printf_i+0x1f0>
 80077de:	f04f 30ff 	mov.w	r0, #4294967295
 80077e2:	b004      	add	sp, #16
 80077e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	f043 0320 	orr.w	r3, r3, #32
 80077ee:	6023      	str	r3, [r4, #0]
 80077f0:	4832      	ldr	r0, [pc, #200]	@ (80078bc <_printf_i+0x238>)
 80077f2:	2778      	movs	r7, #120	@ 0x78
 80077f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	6831      	ldr	r1, [r6, #0]
 80077fc:	061f      	lsls	r7, r3, #24
 80077fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8007802:	d402      	bmi.n	800780a <_printf_i+0x186>
 8007804:	065f      	lsls	r7, r3, #25
 8007806:	bf48      	it	mi
 8007808:	b2ad      	uxthmi	r5, r5
 800780a:	6031      	str	r1, [r6, #0]
 800780c:	07d9      	lsls	r1, r3, #31
 800780e:	bf44      	itt	mi
 8007810:	f043 0320 	orrmi.w	r3, r3, #32
 8007814:	6023      	strmi	r3, [r4, #0]
 8007816:	b11d      	cbz	r5, 8007820 <_printf_i+0x19c>
 8007818:	2310      	movs	r3, #16
 800781a:	e7ad      	b.n	8007778 <_printf_i+0xf4>
 800781c:	4826      	ldr	r0, [pc, #152]	@ (80078b8 <_printf_i+0x234>)
 800781e:	e7e9      	b.n	80077f4 <_printf_i+0x170>
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	f023 0320 	bic.w	r3, r3, #32
 8007826:	6023      	str	r3, [r4, #0]
 8007828:	e7f6      	b.n	8007818 <_printf_i+0x194>
 800782a:	4616      	mov	r6, r2
 800782c:	e7bd      	b.n	80077aa <_printf_i+0x126>
 800782e:	6833      	ldr	r3, [r6, #0]
 8007830:	6825      	ldr	r5, [r4, #0]
 8007832:	6961      	ldr	r1, [r4, #20]
 8007834:	1d18      	adds	r0, r3, #4
 8007836:	6030      	str	r0, [r6, #0]
 8007838:	062e      	lsls	r6, r5, #24
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	d501      	bpl.n	8007842 <_printf_i+0x1be>
 800783e:	6019      	str	r1, [r3, #0]
 8007840:	e002      	b.n	8007848 <_printf_i+0x1c4>
 8007842:	0668      	lsls	r0, r5, #25
 8007844:	d5fb      	bpl.n	800783e <_printf_i+0x1ba>
 8007846:	8019      	strh	r1, [r3, #0]
 8007848:	2300      	movs	r3, #0
 800784a:	6123      	str	r3, [r4, #16]
 800784c:	4616      	mov	r6, r2
 800784e:	e7bc      	b.n	80077ca <_printf_i+0x146>
 8007850:	6833      	ldr	r3, [r6, #0]
 8007852:	1d1a      	adds	r2, r3, #4
 8007854:	6032      	str	r2, [r6, #0]
 8007856:	681e      	ldr	r6, [r3, #0]
 8007858:	6862      	ldr	r2, [r4, #4]
 800785a:	2100      	movs	r1, #0
 800785c:	4630      	mov	r0, r6
 800785e:	f7f8 fcc7 	bl	80001f0 <memchr>
 8007862:	b108      	cbz	r0, 8007868 <_printf_i+0x1e4>
 8007864:	1b80      	subs	r0, r0, r6
 8007866:	6060      	str	r0, [r4, #4]
 8007868:	6863      	ldr	r3, [r4, #4]
 800786a:	6123      	str	r3, [r4, #16]
 800786c:	2300      	movs	r3, #0
 800786e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007872:	e7aa      	b.n	80077ca <_printf_i+0x146>
 8007874:	6923      	ldr	r3, [r4, #16]
 8007876:	4632      	mov	r2, r6
 8007878:	4649      	mov	r1, r9
 800787a:	4640      	mov	r0, r8
 800787c:	47d0      	blx	sl
 800787e:	3001      	adds	r0, #1
 8007880:	d0ad      	beq.n	80077de <_printf_i+0x15a>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	079b      	lsls	r3, r3, #30
 8007886:	d413      	bmi.n	80078b0 <_printf_i+0x22c>
 8007888:	68e0      	ldr	r0, [r4, #12]
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	4298      	cmp	r0, r3
 800788e:	bfb8      	it	lt
 8007890:	4618      	movlt	r0, r3
 8007892:	e7a6      	b.n	80077e2 <_printf_i+0x15e>
 8007894:	2301      	movs	r3, #1
 8007896:	4632      	mov	r2, r6
 8007898:	4649      	mov	r1, r9
 800789a:	4640      	mov	r0, r8
 800789c:	47d0      	blx	sl
 800789e:	3001      	adds	r0, #1
 80078a0:	d09d      	beq.n	80077de <_printf_i+0x15a>
 80078a2:	3501      	adds	r5, #1
 80078a4:	68e3      	ldr	r3, [r4, #12]
 80078a6:	9903      	ldr	r1, [sp, #12]
 80078a8:	1a5b      	subs	r3, r3, r1
 80078aa:	42ab      	cmp	r3, r5
 80078ac:	dcf2      	bgt.n	8007894 <_printf_i+0x210>
 80078ae:	e7eb      	b.n	8007888 <_printf_i+0x204>
 80078b0:	2500      	movs	r5, #0
 80078b2:	f104 0619 	add.w	r6, r4, #25
 80078b6:	e7f5      	b.n	80078a4 <_printf_i+0x220>
 80078b8:	08008c85 	.word	0x08008c85
 80078bc:	08008c96 	.word	0x08008c96

080078c0 <memmove>:
 80078c0:	4288      	cmp	r0, r1
 80078c2:	b510      	push	{r4, lr}
 80078c4:	eb01 0402 	add.w	r4, r1, r2
 80078c8:	d902      	bls.n	80078d0 <memmove+0x10>
 80078ca:	4284      	cmp	r4, r0
 80078cc:	4623      	mov	r3, r4
 80078ce:	d807      	bhi.n	80078e0 <memmove+0x20>
 80078d0:	1e43      	subs	r3, r0, #1
 80078d2:	42a1      	cmp	r1, r4
 80078d4:	d008      	beq.n	80078e8 <memmove+0x28>
 80078d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078de:	e7f8      	b.n	80078d2 <memmove+0x12>
 80078e0:	4402      	add	r2, r0
 80078e2:	4601      	mov	r1, r0
 80078e4:	428a      	cmp	r2, r1
 80078e6:	d100      	bne.n	80078ea <memmove+0x2a>
 80078e8:	bd10      	pop	{r4, pc}
 80078ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078f2:	e7f7      	b.n	80078e4 <memmove+0x24>

080078f4 <_sbrk_r>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	4d06      	ldr	r5, [pc, #24]	@ (8007910 <_sbrk_r+0x1c>)
 80078f8:	2300      	movs	r3, #0
 80078fa:	4604      	mov	r4, r0
 80078fc:	4608      	mov	r0, r1
 80078fe:	602b      	str	r3, [r5, #0]
 8007900:	f7fb fece 	bl	80036a0 <_sbrk>
 8007904:	1c43      	adds	r3, r0, #1
 8007906:	d102      	bne.n	800790e <_sbrk_r+0x1a>
 8007908:	682b      	ldr	r3, [r5, #0]
 800790a:	b103      	cbz	r3, 800790e <_sbrk_r+0x1a>
 800790c:	6023      	str	r3, [r4, #0]
 800790e:	bd38      	pop	{r3, r4, r5, pc}
 8007910:	20025d40 	.word	0x20025d40

08007914 <memcpy>:
 8007914:	440a      	add	r2, r1
 8007916:	4291      	cmp	r1, r2
 8007918:	f100 33ff 	add.w	r3, r0, #4294967295
 800791c:	d100      	bne.n	8007920 <memcpy+0xc>
 800791e:	4770      	bx	lr
 8007920:	b510      	push	{r4, lr}
 8007922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800792a:	4291      	cmp	r1, r2
 800792c:	d1f9      	bne.n	8007922 <memcpy+0xe>
 800792e:	bd10      	pop	{r4, pc}

08007930 <_realloc_r>:
 8007930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007934:	4607      	mov	r7, r0
 8007936:	4614      	mov	r4, r2
 8007938:	460d      	mov	r5, r1
 800793a:	b921      	cbnz	r1, 8007946 <_realloc_r+0x16>
 800793c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007940:	4611      	mov	r1, r2
 8007942:	f7ff bc4d 	b.w	80071e0 <_malloc_r>
 8007946:	b92a      	cbnz	r2, 8007954 <_realloc_r+0x24>
 8007948:	f7ff fbde 	bl	8007108 <_free_r>
 800794c:	4625      	mov	r5, r4
 800794e:	4628      	mov	r0, r5
 8007950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007954:	f000 f81a 	bl	800798c <_malloc_usable_size_r>
 8007958:	4284      	cmp	r4, r0
 800795a:	4606      	mov	r6, r0
 800795c:	d802      	bhi.n	8007964 <_realloc_r+0x34>
 800795e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007962:	d8f4      	bhi.n	800794e <_realloc_r+0x1e>
 8007964:	4621      	mov	r1, r4
 8007966:	4638      	mov	r0, r7
 8007968:	f7ff fc3a 	bl	80071e0 <_malloc_r>
 800796c:	4680      	mov	r8, r0
 800796e:	b908      	cbnz	r0, 8007974 <_realloc_r+0x44>
 8007970:	4645      	mov	r5, r8
 8007972:	e7ec      	b.n	800794e <_realloc_r+0x1e>
 8007974:	42b4      	cmp	r4, r6
 8007976:	4622      	mov	r2, r4
 8007978:	4629      	mov	r1, r5
 800797a:	bf28      	it	cs
 800797c:	4632      	movcs	r2, r6
 800797e:	f7ff ffc9 	bl	8007914 <memcpy>
 8007982:	4629      	mov	r1, r5
 8007984:	4638      	mov	r0, r7
 8007986:	f7ff fbbf 	bl	8007108 <_free_r>
 800798a:	e7f1      	b.n	8007970 <_realloc_r+0x40>

0800798c <_malloc_usable_size_r>:
 800798c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007990:	1f18      	subs	r0, r3, #4
 8007992:	2b00      	cmp	r3, #0
 8007994:	bfbc      	itt	lt
 8007996:	580b      	ldrlt	r3, [r1, r0]
 8007998:	18c0      	addlt	r0, r0, r3
 800799a:	4770      	bx	lr

0800799c <_init>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	bf00      	nop
 80079a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a2:	bc08      	pop	{r3}
 80079a4:	469e      	mov	lr, r3
 80079a6:	4770      	bx	lr

080079a8 <_fini>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	bf00      	nop
 80079ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ae:	bc08      	pop	{r3}
 80079b0:	469e      	mov	lr, r3
 80079b2:	4770      	bx	lr
